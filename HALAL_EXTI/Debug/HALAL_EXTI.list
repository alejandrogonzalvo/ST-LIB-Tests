
HALAL_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019780  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08019a4c  08019a4c  00029a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019ff8  08019ff8  00029ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  0801a000  0801a000  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000018  0801a018  0801a018  0002a018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0801a030  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0801a0a4  00030074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0801a104  000300d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010ec  24000134  0801a164  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001220  0801a164  00031220  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a02e0  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a02d  00000000  00000000  000d0442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005590  00000000  00000000  000da470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000055f0  00000000  00000000  000dfa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004e7e2  00000000  00000000  000e4ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004b1c7  00000000  00000000  001337d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00227d09  00000000  00000000  0017e999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  003a66a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00018cec  00000000  00000000  003a66f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000134 	.word	0x24000134
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08019a34 	.word	0x08019a34

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000138 	.word	0x24000138
 8000308:	08019a34 	.word	0x08019a34

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2224      	movs	r2, #36	; 0x24
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f019 f8b9 	bl	80197a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062e:	4b39      	ldr	r3, [pc, #228]	; (8000714 <MX_ADC1_Init+0x104>)
 8000630:	4a39      	ldr	r2, [pc, #228]	; (8000718 <MX_ADC1_Init+0x108>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000634:	4b37      	ldr	r3, [pc, #220]	; (8000714 <MX_ADC1_Init+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800063a:	4b36      	ldr	r3, [pc, #216]	; (8000714 <MX_ADC1_Init+0x104>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000640:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_ADC1_Init+0x104>)
 8000642:	2201      	movs	r2, #1
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b33      	ldr	r3, [pc, #204]	; (8000714 <MX_ADC1_Init+0x104>)
 8000648:	2208      	movs	r2, #8
 800064a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800064c:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_ADC1_Init+0x104>)
 800064e:	2200      	movs	r2, #0
 8000650:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <MX_ADC1_Init+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000658:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <MX_ADC1_Init+0x104>)
 800065a:	2202      	movs	r2, #2
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <MX_ADC1_Init+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM1_OUT;
 8000666:	4b2b      	ldr	r3, [pc, #172]	; (8000714 <MX_ADC1_Init+0x104>)
 8000668:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_ADC1_Init+0x104>)
 8000670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_ADC1_Init+0x104>)
 8000678:	2203      	movs	r2, #3
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <MX_ADC1_Init+0x104>)
 800067e:	2200      	movs	r2, #0
 8000680:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_ADC1_Init+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_ADC1_Init+0x104>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	4820      	ldr	r0, [pc, #128]	; (8000714 <MX_ADC1_Init+0x104>)
 8000692:	f003 f981 	bl	8003998 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800069c:	f001 f90f 	bl	80018be <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a8:	4619      	mov	r1, r3
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <MX_ADC1_Init+0x104>)
 80006ac:	f004 fc44 	bl	8004f38 <HAL_ADCEx_MultiModeConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006b6:	f001 f902 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_ADC1_Init+0x10c>)
 80006bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006be:	2306      	movs	r3, #6
 80006c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006cc:	2304      	movs	r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_ADC1_Init+0x104>)
 80006e0:	f003 fdba 	bl	8004258 <HAL_ADC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ea:	f001 f8e8 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_ADC1_Init+0x110>)
 80006f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f2:	230c      	movs	r3, #12
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_ADC1_Init+0x104>)
 80006fc:	f003 fdac 	bl	8004258 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000706:	f001 f8da 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3730      	adds	r7, #48	; 0x30
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	24000150 	.word	0x24000150
 8000718:	40022000 	.word	0x40022000
 800071c:	08600004 	.word	0x08600004
 8000720:	0c900008 	.word	0x0c900008

08000724 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2224      	movs	r2, #36	; 0x24
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f019 f835 	bl	80197a0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000736:	4b32      	ldr	r3, [pc, #200]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000738:	4a32      	ldr	r2, [pc, #200]	; (8000804 <MX_ADC2_Init+0xe0>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_ADC2_Init+0xdc>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_ADC2_Init+0xdc>)
 800074a:	2201      	movs	r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800074e:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000750:	2208      	movs	r2, #8
 8000752:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000754:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000756:	2200      	movs	r2, #0
 8000758:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_ADC2_Init+0xdc>)
 800075c:	2200      	movs	r2, #0
 800075e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000760:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000762:	2202      	movs	r2, #2
 8000764:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM2_OUT;
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000770:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000780:	2203      	movs	r2, #3
 8000782:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000786:	2200      	movs	r2, #0
 8000788:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC2_Init+0xdc>)
 800078c:	2200      	movs	r2, #0
 800078e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_ADC2_Init+0xdc>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000798:	4819      	ldr	r0, [pc, #100]	; (8000800 <MX_ADC2_Init+0xdc>)
 800079a:	f003 f8fd 	bl	8003998 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80007a4:	f001 f88b 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_ADC2_Init+0xe4>)
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2306      	movs	r3, #6
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007ba:	2304      	movs	r3, #4
 80007bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ADC2_Init+0xdc>)
 80007ce:	f003 fd43 	bl	8004258 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80007d8:	f001 f871 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_ADC2_Init+0xe8>)
 80007de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e0:	230c      	movs	r3, #12
 80007e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC2_Init+0xdc>)
 80007ea:	f003 fd35 	bl	8004258 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80007f4:	f001 f863 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	240001c0 	.word	0x240001c0
 8000804:	40022100 	.word	0x40022100
 8000808:	08600004 	.word	0x08600004
 800080c:	19200040 	.word	0x19200040

08000810 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2224      	movs	r2, #36	; 0x24
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f018 ffbf 	bl	80197a0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000824:	4a38      	ldr	r2, [pc, #224]	; (8000908 <MX_ADC3_Init+0xf8>)
 8000826:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_ADC3_Init+0xf4>)
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000830:	2208      	movs	r2, #8
 8000832:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <MX_ADC3_Init+0xf4>)
 800083c:	2201      	movs	r2, #1
 800083e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000842:	2208      	movs	r2, #8
 8000844:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000846:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000848:	2200      	movs	r2, #0
 800084a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <MX_ADC3_Init+0xf4>)
 800084e:	2200      	movs	r2, #0
 8000850:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000852:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000854:	2202      	movs	r2, #2
 8000856:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <MX_ADC3_Init+0xf4>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM3_OUT;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000862:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_ADC3_Init+0xf4>)
 800086a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000872:	2201      	movs	r2, #1
 8000874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000878:	4b22      	ldr	r3, [pc, #136]	; (8000904 <MX_ADC3_Init+0xf4>)
 800087a:	2200      	movs	r2, #0
 800087c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087e:	4b21      	ldr	r3, [pc, #132]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000880:	2203      	movs	r2, #3
 8000882:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000886:	2200      	movs	r2, #0
 8000888:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b1e      	ldr	r3, [pc, #120]	; (8000904 <MX_ADC3_Init+0xf4>)
 800088c:	2200      	movs	r2, #0
 800088e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <MX_ADC3_Init+0xf4>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	481a      	ldr	r0, [pc, #104]	; (8000904 <MX_ADC3_Init+0xf4>)
 800089a:	f003 f87d 	bl	8003998 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 80008a4:	f001 f80b 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_ADC3_Init+0xf4>)
 80008d2:	f003 fcc1 	bl	8004258 <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80008dc:	f000 ffef 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_ADC3_Init+0xfc>)
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008e4:	230c      	movs	r3, #12
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_ADC3_Init+0xf4>)
 80008ee:	f003 fcb3 	bl	8004258 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80008f8:	f000 ffe1 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3728      	adds	r7, #40	; 0x28
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	24000230 	.word	0x24000230
 8000908:	58026000 	.word	0x58026000
 800090c:	04300002 	.word	0x04300002

08000910 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	; 0x48
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a9f      	ldr	r2, [pc, #636]	; (8000bac <HAL_ADC_MspInit+0x29c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 80b6 	bne.w	8000aa0 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000934:	4b9e      	ldr	r3, [pc, #632]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a9d      	ldr	r2, [pc, #628]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 800093c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800093e:	4b9c      	ldr	r3, [pc, #624]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d10e      	bne.n	8000964 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000946:	4b9b      	ldr	r3, [pc, #620]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800094c:	4a99      	ldr	r2, [pc, #612]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 800094e:	f043 0320 	orr.w	r3, r3, #32
 8000952:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000956:	4b97      	ldr	r3, [pc, #604]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800095c:	f003 0320 	and.w	r3, r3, #32
 8000960:	633b      	str	r3, [r7, #48]	; 0x30
 8000962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000964:	4b93      	ldr	r3, [pc, #588]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096a:	4a92      	ldr	r2, [pc, #584]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000974:	4b8f      	ldr	r3, [pc, #572]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b8c      	ldr	r3, [pc, #560]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a8a      	ldr	r2, [pc, #552]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b88      	ldr	r3, [pc, #544]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a0:	4b84      	ldr	r3, [pc, #528]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a83      	ldr	r2, [pc, #524]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b80      	ldr	r3, [pc, #512]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
 80009bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009be:	4b7d      	ldr	r3, [pc, #500]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a7b      	ldr	r2, [pc, #492]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009c6:	f043 0320 	orr.w	r3, r3, #32
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b79      	ldr	r3, [pc, #484]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	623b      	str	r3, [r7, #32]
 80009da:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 80009dc:	2301      	movs	r3, #1
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e0:	2303      	movs	r3, #3
 80009e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009ec:	4619      	mov	r1, r3
 80009ee:	4872      	ldr	r0, [pc, #456]	; (8000bb8 <HAL_ADC_MspInit+0x2a8>)
 80009f0:	f007 f9ba 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 80009f4:	2379      	movs	r3, #121	; 0x79
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a04:	4619      	mov	r1, r3
 8000a06:	486d      	ldr	r0, [pc, #436]	; (8000bbc <HAL_ADC_MspInit+0x2ac>)
 8000a08:	f007 f9ae 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a10:	2303      	movs	r3, #3
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4868      	ldr	r0, [pc, #416]	; (8000bc0 <HAL_ADC_MspInit+0x2b0>)
 8000a20:	f007 f9a2 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 8000a24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a36:	4619      	mov	r1, r3
 8000a38:	4862      	ldr	r0, [pc, #392]	; (8000bc4 <HAL_ADC_MspInit+0x2b4>)
 8000a3a:	f007 f995 	bl	8007d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a3e:	4b62      	ldr	r3, [pc, #392]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a40:	4a62      	ldr	r2, [pc, #392]	; (8000bcc <HAL_ADC_MspInit+0x2bc>)
 8000a42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a44:	4b60      	ldr	r3, [pc, #384]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a46:	2209      	movs	r2, #9
 8000a48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a50:	4b5d      	ldr	r3, [pc, #372]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a56:	4b5c      	ldr	r3, [pc, #368]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a66:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a6e:	4b56      	ldr	r3, [pc, #344]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7c:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a82:	4851      	ldr	r0, [pc, #324]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a84:	f004 fc7c 	bl	8005380 <HAL_DMA_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8000a8e:	f000 ff16 	bl	80018be <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4c      	ldr	r2, [pc, #304]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a96:	659a      	str	r2, [r3, #88]	; 0x58
 8000a98:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <HAL_ADC_MspInit+0x2b8>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a9e:	e120      	b.n	8000ce2 <HAL_ADC_MspInit+0x3d2>
  else if(adcHandle->Instance==ADC2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_ADC_MspInit+0x2c0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	f040 8098 	bne.w	8000bdc <HAL_ADC_MspInit+0x2cc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000aac:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a3f      	ldr	r2, [pc, #252]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 8000ab4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <HAL_ADC_MspInit+0x2a0>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10e      	bne.n	8000adc <HAL_ADC_MspInit+0x1cc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac4:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000ac6:	f043 0320 	orr.w	r3, r3, #32
 8000aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ace:	4b39      	ldr	r3, [pc, #228]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	f003 0320 	and.w	r3, r3, #32
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	4b35      	ldr	r3, [pc, #212]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae2:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000b02:	f043 0320 	orr.w	r3, r3, #32
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <HAL_ADC_MspInit+0x2a4>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0320 	and.w	r3, r3, #32
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4824      	ldr	r0, [pc, #144]	; (8000bbc <HAL_ADC_MspInit+0x2ac>)
 8000b2c:	f007 f91c 	bl	8007d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 8000b30:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b42:	4619      	mov	r1, r3
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <HAL_ADC_MspInit+0x2b4>)
 8000b46:	f007 f90f 	bl	8007d68 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000b4a:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_ADC_MspInit+0x2c8>)
 8000b4e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b52:	220a      	movs	r2, #10
 8000b54:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b80:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000b90:	f004 fbf6 	bl	8005380 <HAL_DMA_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_ADC_MspInit+0x28e>
      Error_Handler();
 8000b9a:	f000 fe90 	bl	80018be <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_ADC_MspInit+0x2c4>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000baa:	e09a      	b.n	8000ce2 <HAL_ADC_MspInit+0x3d2>
 8000bac:	40022000 	.word	0x40022000
 8000bb0:	24000408 	.word	0x24000408
 8000bb4:	58024400 	.word	0x58024400
 8000bb8:	58020800 	.word	0x58020800
 8000bbc:	58020000 	.word	0x58020000
 8000bc0:	58020400 	.word	0x58020400
 8000bc4:	58021400 	.word	0x58021400
 8000bc8:	240002a0 	.word	0x240002a0
 8000bcc:	40020010 	.word	0x40020010
 8000bd0:	40022100 	.word	0x40022100
 8000bd4:	24000318 	.word	0x24000318
 8000bd8:	40020028 	.word	0x40020028
  else if(adcHandle->Instance==ADC3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a42      	ldr	r2, [pc, #264]	; (8000cec <HAL_ADC_MspInit+0x3dc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d17d      	bne.n	8000ce2 <HAL_ADC_MspInit+0x3d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_ADC_MspInit+0x3e0>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 8000c40:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	4619      	mov	r1, r3
 8000c54:	4827      	ldr	r0, [pc, #156]	; (8000cf4 <HAL_ADC_MspInit+0x3e4>)
 8000c56:	f007 f887 	bl	8007d68 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c5a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000c5e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c62:	f002 fbfb 	bl	800345c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000c66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000c6a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000c6e:	f002 fbf5 	bl	800345c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <HAL_ADC_MspInit+0x3ec>)
 8000c76:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c78:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c7a:	2273      	movs	r2, #115	; 0x73
 8000c7c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7e:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c84:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c90:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c98:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000c9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000cb8:	f004 fb62 	bl	8005380 <HAL_DMA_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_ADC_MspInit+0x3b6>
      Error_Handler();
 8000cc2:	f000 fdfc 	bl	80018be <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000cca:	659a      	str	r2, [r3, #88]	; 0x58
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_ADC_MspInit+0x3e8>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	207f      	movs	r0, #127	; 0x7f
 8000cd8:	f004 fb1d 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cdc:	207f      	movs	r0, #127	; 0x7f
 8000cde:	f004 fb34 	bl	800534a <HAL_NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3748      	adds	r7, #72	; 0x48
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	58026000 	.word	0x58026000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58021400 	.word	0x58021400
 8000cf8:	24000390 	.word	0x24000390
 8000cfc:	40020040 	.word	0x40020040

08000d00 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_CORDIC_Init+0x20>)
 8000d06:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <MX_CORDIC_Init+0x24>)
 8000d08:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_CORDIC_Init+0x20>)
 8000d0c:	f004 f9f6 	bl	80050fc <HAL_CORDIC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000d16:	f000 fdd2 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2400040c 	.word	0x2400040c
 8000d24:	48024400 	.word	0x48024400

08000d28 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_CORDIC_MspInit+0x3c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10e      	bne.n	8000d58 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_CORDIC_MspInit+0x40>)
 8000d3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <HAL_CORDIC_MspInit+0x40>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <HAL_CORDIC_MspInit+0x40>)
 8000d4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	48024400 	.word	0x48024400
 8000d68:	58024400 	.word	0x58024400

08000d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <MX_DMA_Init+0x5c>)
 8000d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <MX_DMA_Init+0x5c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_DMA_Init+0x5c>)
 8000d84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	200b      	movs	r0, #11
 8000d96:	f004 fabe 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d9a:	200b      	movs	r0, #11
 8000d9c:	f004 fad5 	bl	800534a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	200c      	movs	r0, #12
 8000da6:	f004 fab6 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000daa:	200c      	movs	r0, #12
 8000dac:	f004 facd 	bl	800534a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	200d      	movs	r0, #13
 8000db6:	f004 faae 	bl	8005316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dba:	200d      	movs	r0, #13
 8000dbc:	f004 fac5 	bl	800534a <HAL_NVIC_EnableIRQ>

}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	58024400 	.word	0x58024400

08000dcc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_ETH_Init+0x80>)
 8000dd2:	4a1f      	ldr	r2, [pc, #124]	; (8000e50 <MX_ETH_Init+0x84>)
 8000dd4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ETH_Init+0x88>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ETH_Init+0x88>)
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ETH_Init+0x88>)
 8000de4:	22e1      	movs	r2, #225	; 0xe1
 8000de6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ETH_Init+0x88>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ETH_Init+0x88>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ETH_Init+0x88>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_ETH_Init+0x80>)
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <MX_ETH_Init+0x88>)
 8000dfe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <MX_ETH_Init+0x80>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_ETH_Init+0x80>)
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_ETH_Init+0x8c>)
 8000e0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_ETH_Init+0x80>)
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_ETH_Init+0x90>)
 8000e10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_ETH_Init+0x80>)
 8000e14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_ETH_Init+0x80>)
 8000e1c:	f005 ff70 	bl	8006d00 <HAL_ETH_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e26:	f000 fd4a 	bl	80018be <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e2a:	2238      	movs	r2, #56	; 0x38
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480c      	ldr	r0, [pc, #48]	; (8000e60 <MX_ETH_Init+0x94>)
 8000e30:	f018 fcb6 	bl	80197a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_ETH_Init+0x94>)
 8000e36:	2221      	movs	r2, #33	; 0x21
 8000e38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_ETH_Init+0x94>)
 8000e3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_ETH_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2400046c 	.word	0x2400046c
 8000e50:	40028000 	.word	0x40028000
 8000e54:	2400051c 	.word	0x2400051c
 8000e58:	240000d4 	.word	0x240000d4
 8000e5c:	24000074 	.word	0x24000074
 8000e60:	24000434 	.word	0x24000434

08000e64 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a59      	ldr	r2, [pc, #356]	; (8000fe8 <HAL_ETH_MspInit+0x184>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	f040 80ab 	bne.w	8000fde <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e88:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8e:	4a57      	ldr	r2, [pc, #348]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e98:	4b54      	ldr	r3, [pc, #336]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea2:	623b      	str	r3, [r7, #32]
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ea6:	4b51      	ldr	r3, [pc, #324]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	4a4f      	ldr	r2, [pc, #316]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	61fb      	str	r3, [r7, #28]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ec4:	4b49      	ldr	r3, [pc, #292]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ec6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eca:	4a48      	ldr	r2, [pc, #288]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ed6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	4a40      	ldr	r2, [pc, #256]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f06:	4a39      	ldr	r2, [pc, #228]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a31      	ldr	r2, [pc, #196]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4c:	4b27      	ldr	r3, [pc, #156]	; (8000fec <HAL_ETH_MspInit+0x188>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f5a:	2332      	movs	r3, #50	; 0x32
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <HAL_ETH_MspInit+0x18c>)
 8000f76:	f006 fef7 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f7a:	2386      	movs	r3, #134	; 0x86
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <HAL_ETH_MspInit+0x190>)
 8000f96:	f006 fee7 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <HAL_ETH_MspInit+0x194>)
 8000fb8:	f006 fed6 	bl	8007d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <HAL_ETH_MspInit+0x198>)
 8000fda:	f006 fec5 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3738      	adds	r7, #56	; 0x38
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40028000 	.word	0x40028000
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020800 	.word	0x58020800
 8000ff4:	58020000 	.word	0x58020000
 8000ff8:	58020400 	.word	0x58020400
 8000ffc:	58021800 	.word	0x58021800

08001000 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <MX_FDCAN1_Init+0xc4>)
 8001008:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800101e:	2200      	movs	r2, #0
 8001020:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001022:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8001028:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800102a:	2210      	movs	r2, #16
 800102c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800102e:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001036:	2202      	movs	r2, #2
 8001038:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800103c:	2202      	movs	r2, #2
 800103e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001042:	2201      	movs	r2, #1
 8001044:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001048:	2201      	movs	r2, #1
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800104e:	2201      	movs	r2, #1
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001054:	2201      	movs	r2, #1
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001058:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800105a:	2200      	movs	r2, #0
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001060:	2200      	movs	r2, #0
 8001062:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001064:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800106c:	2200      	movs	r2, #0
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001072:	2204      	movs	r2, #4
 8001074:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800107c:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800107e:	2204      	movs	r2, #4
 8001080:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800108a:	2204      	movs	r2, #4
 800108c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001090:	2200      	movs	r2, #0
 8001092:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 8001096:	2200      	movs	r2, #0
 8001098:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 800109c:	2200      	movs	r2, #0
 800109e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010a0:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 80010a8:	2204      	movs	r2, #4
 80010aa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_FDCAN1_Init+0xc0>)
 80010ae:	f006 fa4b 	bl	8007548 <HAL_FDCAN_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80010b8:	f000 fc01 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	24000524 	.word	0x24000524
 80010c4:	4000a000 	.word	0x4000a000

080010c8 <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80010cc:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010ce:	4a2f      	ldr	r2, [pc, #188]	; (800118c <MX_FDCAN3_Init+0xc4>)
 80010d0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010f2:	2210      	movs	r2, #16
 80010f4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 80010fe:	2202      	movs	r2, #2
 8001100:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001104:	2202      	movs	r2, #2
 8001106:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800110a:	2201      	movs	r2, #1
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800110e:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001110:	2201      	movs	r2, #1
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001116:	2201      	movs	r2, #1
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800111c:	2201      	movs	r2, #1
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001120:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001122:	2200      	movs	r2, #0
 8001124:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001128:	2200      	movs	r2, #0
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800112e:	2200      	movs	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001134:	2200      	movs	r2, #0
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800113a:	2204      	movs	r2, #4
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001140:	2200      	movs	r2, #0
 8001142:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001146:	2204      	movs	r2, #4
 8001148:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001152:	2204      	movs	r2, #4
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001158:	2200      	movs	r2, #0
 800115a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800115e:	2200      	movs	r2, #0
 8001160:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001164:	2200      	movs	r2, #0
 8001166:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001170:	2204      	movs	r2, #4
 8001172:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	; (8001188 <MX_FDCAN3_Init+0xc0>)
 8001176:	f006 f9e7 	bl	8007548 <HAL_FDCAN_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001180:	f000 fb9d 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	240005c4 	.word	0x240005c4
 800118c:	4000d400 	.word	0x4000d400

08001190 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b0b8      	sub	sp, #224	; 0xe0
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	22b4      	movs	r2, #180	; 0xb4
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f018 faf5 	bl	80197a0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a54      	ldr	r2, [pc, #336]	; (800130c <HAL_FDCAN_MspInit+0x17c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d14e      	bne.n	800125e <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f008 f890 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80011de:	f000 fb6e 	bl	80018be <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011e2:	4b4b      	ldr	r3, [pc, #300]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a49      	ldr	r2, [pc, #292]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 80011ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011ec:	4b48      	ldr	r3, [pc, #288]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10e      	bne.n	8001212 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011f4:	4b47      	ldr	r3, [pc, #284]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80011f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011fa:	4a46      	ldr	r2, [pc, #280]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001200:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001204:	4b43      	ldr	r3, [pc, #268]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 8001206:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001230:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800124a:	2309      	movs	r3, #9
 800124c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001254:	4619      	mov	r1, r3
 8001256:	4830      	ldr	r0, [pc, #192]	; (8001318 <HAL_FDCAN_MspInit+0x188>)
 8001258:	f006 fd86 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 800125c:	e052      	b.n	8001304 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2e      	ldr	r2, [pc, #184]	; (800131c <HAL_FDCAN_MspInit+0x18c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d14d      	bne.n	8001304 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800126e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4618      	mov	r0, r3
 800127c:	f008 f83c 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8001286:	f000 fb1a 	bl	80018be <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a1f      	ldr	r2, [pc, #124]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 8001292:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001294:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <HAL_FDCAN_MspInit+0x180>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d10e      	bne.n	80012ba <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 800129e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012ac:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80012ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c0:	4a14      	ldr	r2, [pc, #80]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80012c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_FDCAN_MspInit+0x184>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012d8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fc:	4619      	mov	r1, r3
 80012fe:	4808      	ldr	r0, [pc, #32]	; (8001320 <HAL_FDCAN_MspInit+0x190>)
 8001300:	f006 fd32 	bl	8007d68 <HAL_GPIO_Init>
}
 8001304:	bf00      	nop
 8001306:	37e0      	adds	r7, #224	; 0xe0
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	4000a000 	.word	0x4000a000
 8001310:	24000664 	.word	0x24000664
 8001314:	58024400 	.word	0x58024400
 8001318:	58020000 	.word	0x58020000
 800131c:	4000d400 	.word	0x4000d400
 8001320:	58021800 	.word	0x58021800

08001324 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_FMAC_Init+0x20>)
 800132a:	4a07      	ldr	r2, [pc, #28]	; (8001348 <MX_FMAC_Init+0x24>)
 800132c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_FMAC_Init+0x20>)
 8001330:	f006 fc6e 	bl	8007c10 <HAL_FMAC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800133a:	f000 fac0 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000668 	.word	0x24000668
 8001348:	48024000 	.word	0x48024000

0800134c <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <HAL_FMAC_MspInit+0x3c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10e      	bne.n	800137c <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_FMAC_MspInit+0x40>)
 8001360:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_FMAC_MspInit+0x40>)
 8001366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_FMAC_MspInit+0x40>)
 8001370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	48024000 	.word	0x48024000
 800138c:	58024400 	.word	0x58024400

08001390 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim2;
LPTIM_HandleTypeDef hlptim3;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <MX_LPTIM1_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_LPTIM1_Init+0x50>)
 80013ce:	f006 fe8d 	bl	80080ec <HAL_LPTIM_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 fa71 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	240006a0 	.word	0x240006a0
 80013e4:	40002400 	.word	0x40002400

080013e8 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_LPTIM2_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_LPTIM2_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_LPTIM2_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_LPTIM2_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_LPTIM2_Init+0x50>)
 8001400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001404:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_LPTIM2_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_LPTIM2_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_LPTIM2_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_LPTIM2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_LPTIM2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_LPTIM2_Init+0x50>)
 8001426:	f006 fe61 	bl	80080ec <HAL_LPTIM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 fa45 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	240006d8 	.word	0x240006d8
 800143c:	58002400 	.word	0x58002400

08001440 <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_LPTIM3_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_LPTIM3_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145c:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_LPTIM3_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_LPTIM3_Init+0x4c>)
 8001478:	f006 fe38 	bl	80080ec <HAL_LPTIM_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 fa1c 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000710 	.word	0x24000710
 8001490:	58002800 	.word	0x58002800

08001494 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0b2      	sub	sp, #200	; 0xc8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	22b4      	movs	r2, #180	; 0xb4
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f018 f97b 	bl	80197a0 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_LPTIM_MspInit+0x124>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d126      	bne.n	8001502 <HAL_LPTIM_MspInit+0x6e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80014b4:	2320      	movs	r3, #32
 80014b6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 ff18 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80014ce:	f000 f9f6 	bl	80018be <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 80014d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014d8:	4a38      	ldr	r2, [pc, #224]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 80014e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2100      	movs	r1, #0
 80014f4:	205d      	movs	r0, #93	; 0x5d
 80014f6:	f003 ff0e 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80014fa:	205d      	movs	r0, #93	; 0x5d
 80014fc:	f003 ff25 	bl	800534a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }
}
 8001500:	e056      	b.n	80015b0 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM2)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_LPTIM_MspInit+0x12c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d126      	bne.n	800155a <HAL_LPTIM_MspInit+0xc6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4618      	mov	r0, r3
 800151c:	f007 feec 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 8001526:	f000 f9ca 	bl	80018be <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 800152c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001530:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 800153c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	208a      	movs	r0, #138	; 0x8a
 800154e:	f003 fee2 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001552:	208a      	movs	r0, #138	; 0x8a
 8001554:	f003 fef9 	bl	800534a <HAL_NVIC_EnableIRQ>
}
 8001558:	e02a      	b.n	80015b0 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM3)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_LPTIM_MspInit+0x130>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d125      	bne.n	80015b0 <HAL_LPTIM_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4618      	mov	r0, r3
 8001574:	f007 fec0 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_LPTIM_MspInit+0xee>
      Error_Handler();
 800157e:	f000 f99e 	bl	80018be <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 8001584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_LPTIM_MspInit+0x128>)
 8001594:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2100      	movs	r1, #0
 80015a4:	208b      	movs	r0, #139	; 0x8b
 80015a6:	f003 feb6 	bl	8005316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 80015aa:	208b      	movs	r0, #139	; 0x8b
 80015ac:	f003 fecd 	bl	800534a <HAL_NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	37c8      	adds	r7, #200	; 0xc8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40002400 	.word	0x40002400
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58002400 	.word	0x58002400
 80015c4:	58002800 	.word	0x58002800

080015c8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	f018 f872 	bl	80196cc <abort>

080015e8 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	2203      	movs	r2, #3
 800164a:	4798      	blx	r3
    }
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffe5 	bl	8001630 <_ZNSt14_Function_baseD1Ev>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_ZZ4mainENKUlvE_clEv>:
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  uint8_t exti1 = ExternalInterrupt::inscribe(PE0, []() {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	  __NOP();
 8001678:	bf00      	nop
  }).value();
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <main>:
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
  HAL_Init();
 800168e:	f001 fe3f 	bl	8003310 <HAL_Init>
  }).value();
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4621      	mov	r1, r4
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f916 	bl	80018c8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4828      	ldr	r0, [pc, #160]	; (8001744 <main+0xbc>)
 80016a2:	f00d fd13 	bl	800f0cc <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE>
 80016a6:	4603      	mov	r3, r0
 80016a8:	803b      	strh	r3, [r7, #0]
 80016aa:	463b      	mov	r3, r7
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f941 	bl	8001934 <_ZNOSt8optionalIhE5valueEv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	75fb      	strb	r3, [r7, #23]
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffcb 	bl	8001656 <_ZNSt8functionIFvvEED1Ev>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f842 	bl	8001748 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80016c4:	f000 f8ca 	bl	800185c <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  Pin::start();
 80016c8:	f00c fc38 	bl	800df3c <_ZN3Pin5startEv>
  MX_ETH_Init();
 80016cc:	f7ff fb7e 	bl	8000dcc <MX_ETH_Init>
  MX_ADC1_Init();
 80016d0:	f7fe ff9e 	bl	8000610 <MX_ADC1_Init>
  MX_ADC2_Init();
 80016d4:	f7ff f826 	bl	8000724 <MX_ADC2_Init>
  MX_ADC3_Init();
 80016d8:	f7ff f89a 	bl	8000810 <MX_ADC3_Init>
  MX_FDCAN1_Init();
 80016dc:	f7ff fc90 	bl	8001000 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 80016e0:	f000 fd02 	bl	80020e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016e4:	f000 fe0a 	bl	80022fc <MX_TIM3_Init>
  MX_TIM4_Init();
 80016e8:	f000 fe84 	bl	80023f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 80016ec:	f000 fefe 	bl	80024ec <MX_TIM8_Init>
  MX_TIM12_Init();
 80016f0:	f000 ff56 	bl	80025a0 <MX_TIM12_Init>
  MX_TIM23_Init();
 80016f4:	f001 f92a 	bl	800294c <MX_TIM23_Init>
  MX_USART1_UART_Init();
 80016f8:	f001 fc96 	bl	8003028 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016fc:	f001 fce0 	bl	80030c0 <MX_USART2_UART_Init>
  MX_CORDIC_Init();
 8001700:	f7ff fafe 	bl	8000d00 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001704:	f7ff fe0e 	bl	8001324 <MX_FMAC_Init>
  MX_RTC_Init();
 8001708:	f000 fa72 	bl	8001bf0 <MX_RTC_Init>
  MX_TIM15_Init();
 800170c:	f000 ff98 	bl	8002640 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001710:	f001 f828 	bl	8002764 <MX_TIM16_Init>
  MX_DMA_Init();
 8001714:	f7ff fb2a 	bl	8000d6c <MX_DMA_Init>
  MX_LPTIM1_Init();
 8001718:	f7ff fe3a 	bl	8001390 <MX_LPTIM1_Init>
  MX_LPTIM3_Init();
 800171c:	f7ff fe90 	bl	8001440 <MX_LPTIM3_Init>
  MX_SPI3_Init();
 8001720:	f000 fabe 	bl	8001ca0 <MX_SPI3_Init>
  MX_TIM17_Init();
 8001724:	f001 f898 	bl	8002858 <MX_TIM17_Init>
  MX_FDCAN3_Init();
 8001728:	f7ff fcce 	bl	80010c8 <MX_FDCAN3_Init>
  MX_LPTIM2_Init();
 800172c:	f7ff fe5c 	bl	80013e8 <MX_LPTIM2_Init>
  MX_TIM2_Init();
 8001730:	f000 fd8e 	bl	8002250 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ExternalInterrupt::start();
 8001734:	f00d fd7a 	bl	800f22c <_ZN17ExternalInterrupt5startEv>
  ExternalInterrupt::turn_on(exti1);
 8001738:	7dfb      	ldrb	r3, [r7, #23]
 800173a:	4618      	mov	r0, r3
 800173c:	f00d fdc2 	bl	800f2c4 <_ZN17ExternalInterrupt7turn_onEh>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001740:	e7fe      	b.n	8001740 <main+0xb8>
 8001742:	bf00      	nop
 8001744:	24000f74 	.word	0x24000f74

08001748 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09c      	sub	sp, #112	; 0x70
 800174c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001752:	224c      	movs	r2, #76	; 0x4c
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f018 f822 	bl	80197a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2220      	movs	r2, #32
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f018 f81c 	bl	80197a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001768:	2002      	movs	r0, #2
 800176a:	f006 fe51 	bl	8008410 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b38      	ldr	r3, [pc, #224]	; (8001854 <_Z18SystemClock_Configv+0x10c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a37      	ldr	r2, [pc, #220]	; (8001854 <_Z18SystemClock_Configv+0x10c>)
 8001778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <_Z18SystemClock_Configv+0x10c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800178a:	4b32      	ldr	r3, [pc, #200]	; (8001854 <_Z18SystemClock_Configv+0x10c>)
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d000      	beq.n	80017a4 <_Z18SystemClock_Configv+0x5c>
 80017a2:	e7f2      	b.n	800178a <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80017a4:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <_Z18SystemClock_Configv+0x110>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f023 0303 	bic.w	r3, r3, #3
 80017ac:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <_Z18SystemClock_Configv+0x110>)
 80017ae:	f043 0302 	orr.w	r3, r3, #2
 80017b2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80017b4:	2309      	movs	r3, #9
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017be:	2301      	movs	r3, #1
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c2:	2302      	movs	r3, #2
 80017c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c6:	2302      	movs	r3, #2
 80017c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80017ce:	f240 1313 	movw	r3, #275	; 0x113
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017d8:	2304      	movs	r3, #4
 80017da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017dc:	2302      	movs	r3, #2
 80017de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80017e0:	2304      	movs	r3, #4
 80017e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f006 fe47 	bl	8008484 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001806:	f000 f85a 	bl	80018be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	233f      	movs	r3, #63	; 0x3f
 800180c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	2303      	movs	r3, #3
 8001810:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001816:	2308      	movs	r3, #8
 8001818:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800181a:	2340      	movs	r3, #64	; 0x40
 800181c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001826:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001828:	2340      	movs	r3, #64	; 0x40
 800182a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2103      	movs	r1, #3
 8001830:	4618      	mov	r0, r3
 8001832:	f007 f9d5 	bl	8008be0 <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8001846:	f000 f83a 	bl	80018be <Error_Handler>
  }
}
 800184a:	bf00      	nop
 800184c:	3770      	adds	r7, #112	; 0x70
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58024800 	.word	0x58024800
 8001858:	58024400 	.word	0x58024400

0800185c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0ae      	sub	sp, #184	; 0xb8
 8001860:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	22b4      	movs	r2, #180	; 0xb4
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f017 ff99 	bl	80197a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800186e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001872:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001878:	2318      	movs	r3, #24
 800187a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800187c:	2302      	movs	r3, #2
 800187e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001884:	2302      	movs	r3, #2
 8001886:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001888:	23c0      	movs	r3, #192	; 0xc0
 800188a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	4618      	mov	r0, r3
 800189e:	f007 fd2b 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 80018b2:	f000 f804 	bl	80018be <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	37b8      	adds	r7, #184	; 0xb8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c2:	b672      	cpsid	i
}
 80018c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <Error_Handler+0x8>

080018c8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	7039      	strb	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe9d 	bl	8001614 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80018da:	463b      	mov	r3, r7
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f842 	bl	8001966 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00f      	beq.n	8001908 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80018e8:	687c      	ldr	r4, [r7, #4]
 80018ea:	463b      	mov	r3, r7
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f845 	bl	800197c <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4619      	mov	r1, r3
 80018f6:	4620      	mov	r0, r4
 80018f8:	f000 f84b 	bl	8001992 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x4c>)
 8001900:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x50>)
 8001906:	609a      	str	r2, [r3, #8]
	  }
      }
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	080019b7 	.word	0x080019b7
 8001918:	080019d5 	.word	0x080019d5

0800191c <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      // _M_reset is a 'safe' operation with no precondition.
      constexpr void
      _M_reset() noexcept
      { static_cast<_Dp*>(this)->_M_payload._M_reset(); }

      constexpr bool _M_is_engaged() const noexcept
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	785b      	ldrb	r3, [r3, #1]
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_ZNOSt8optionalIhE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&&
      value()&&
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffed 	bl	800191c <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 8001942:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <_ZNOSt8optionalIhE5valueEv+0x26>
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f862 	bl	8001a12 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 800194e:	4603      	mov	r3, r0
 8001950:	4618      	mov	r0, r3
 8001952:	f000 f86b 	bl	8001a2c <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8001956:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 8001958:	e001      	b.n	800195e <_ZNOSt8optionalIhE5valueEv+0x2a>
 800195a:	f7ff fe41 	bl	80015e0 <_ZSt27__throw_bad_optional_accessv>
      }
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	  { return true; }
 800196e:	2301      	movs	r3, #1
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8001992:	b590      	push	{r4, r7, lr}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800199c:	6838      	ldr	r0, [r7, #0]
 800199e:	f7ff ffed 	bl	800197c <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4622      	mov	r2, r4
 80019a6:	4619      	mov	r1, r3
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f84a 	bl	8001a42 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}

080019b6 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f854 	bl	8001a6c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f860 	bl	8001a8c <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 80019cc:	bf00      	nop
      }
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d109      	bne.n	80019fc <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 f83f 	bl	8001a6c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80019ee:	4604      	mov	r4, r0
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f85b 	bl	8001aac <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 80019f6:	4603      	mov	r3, r0
 80019f8:	601c      	str	r4, [r3, #0]
	    break;
 80019fa:	e005      	b.n	8001a08 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f85e 	bl	8001ac4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8001a08:	2300      	movs	r3, #0
      }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f87c 	bl	8001b1a <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 8001a22:	4603      	mov	r3, r0
      }
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f7ff ff94 	bl	800197c <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fdc7 	bl	80015e8 <_ZNSt9_Any_data9_M_accessEv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f7ff fdb2 	bl	80015c8 <_ZnwjPv>
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f85b 	bl	8001b30 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 8001a7a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f863 	bl	8001b48 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>
 8001a82:	4603      	mov	r3, r0
	}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f862 	bl	8001b5e <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f000 f868 	bl	8001b74 <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}

08001aac <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>:
      _M_access()
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fd97 	bl	80015e8 <_ZNSt9_Any_data9_M_accessEv>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d016      	beq.n	8001b06 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	dc19      	bgt.n	8001b10 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d002      	beq.n	8001ae6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d00a      	beq.n	8001afa <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8001ae4:	e014      	b.n	8001b10 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	f7ff ffc0 	bl	8001a6c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8001aec:	4604      	mov	r4, r0
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff ffdc 	bl	8001aac <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 8001af4:	4603      	mov	r3, r0
 8001af6:	601c      	str	r4, [r3, #0]
	      break;
 8001af8:	e00a      	b.n	8001b10 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8001afa:	462a      	mov	r2, r5
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f848 	bl	8001b94 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 8001b04:	e004      	b.n	8001b10 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8001b06:	4621      	mov	r1, r4
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f858 	bl	8001bbe <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8001b0e:	bf00      	nop
	  return false;
 8001b10:	2300      	movs	r3, #0
	}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdb0      	pop	{r4, r5, r7, pc}

08001b1a <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>:
      _M_access() const
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fd60 	bl	80015fe <_ZNKSt9_Any_data9_M_accessEv>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	7138      	strb	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001b7e:	6838      	ldr	r0, [r7, #0]
 8001b80:	f7ff ffed 	bl	8001b5e <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fd72 	bl	8001670 <_ZZ4mainENKUlvE_clEv>
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8001ba0:	68b8      	ldr	r0, [r7, #8]
 8001ba2:	f7ff ffc5 	bl	8001b30 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fd1e 	bl	80015e8 <_ZNSt9_Any_data9_M_accessEv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fd09 	bl	80015c8 <_ZnwjPv>
	}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f804 	bl	8001bd6 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>
	}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>:
      _M_access()
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff fd02 	bl	80015e8 <_ZNSt9_Any_data9_M_accessEv>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_RTC_Init+0x48>)
 8001bf6:	4a11      	ldr	r2, [pc, #68]	; (8001c3c <MX_RTC_Init+0x4c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_RTC_Init+0x48>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c02:	227f      	movs	r2, #127	; 0x7f
 8001c04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c08:	22ff      	movs	r2, #255	; 0xff
 8001c0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_RTC_Init+0x48>)
 8001c26:	f009 fbfb 	bl	800b420 <HAL_RTC_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001c30:	f7ff fe45 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000748 	.word	0x24000748
 8001c3c:	58004000 	.word	0x58004000

08001c40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0b0      	sub	sp, #192	; 0xc0
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	22b4      	movs	r2, #180	; 0xb4
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f017 fda5 	bl	80197a0 <memset>
  if(rtcHandle->Instance==RTC)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RTC_MspInit+0x58>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d116      	bne.n	8001c8e <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 030c 	add.w	r3, r7, #12
 8001c72:	4618      	mov	r0, r3
 8001c74:	f007 fb40 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c7e:	f7ff fe1e 	bl	80018be <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_RTC_MspInit+0x5c>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <HAL_RTC_MspInit+0x5c>)
 8001c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001c8e:	bf00      	nop
 8001c90:	37c0      	adds	r7, #192	; 0xc0
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	58004000 	.word	0x58004000
 8001c9c:	58024400 	.word	0x58024400

08001ca0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001ca6:	4a28      	ldr	r2, [pc, #160]	; (8001d48 <MX_SPI3_Init+0xa8>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cba:	2203      	movs	r2, #3
 8001cbc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001ccc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cd0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cde:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_SPI3_Init+0xa4>)
 8001d30:	f009 fc86 	bl	800b640 <HAL_SPI_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001d3a:	f7ff fdc0 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2400076c 	.word	0x2400076c
 8001d48:	40003c00 	.word	0x40003c00

08001d4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0b6      	sub	sp, #216	; 0xd8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	22b4      	movs	r2, #180	; 0xb4
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f017 fd17 	bl	80197a0 <memset>
  if(spiHandle->Instance==SPI3)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_SPI_MspInit+0xc0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d142      	bne.n	8001e02 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f007 fab4 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d96:	f7ff fd92 	bl	80018be <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_SPI_MspInit+0xc8>)
 8001dfe:	f005 ffb3 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e02:	bf00      	nop
 8001e04:	37d8      	adds	r7, #216	; 0xd8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40003c00 	.word	0x40003c00
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020800 	.word	0x58020800

08001e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_MspInit+0x30>)
 8001e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_MspInit+0x30>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_MspInit+0x30>)
 8001e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	58024400 	.word	0x58024400

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <NMI_Handler+0x4>

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f001 faac 	bl	80033f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f006 f907 	bl	80080b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}

08001eae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f006 f900 	bl	80080b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Stream0_IRQHandler+0x10>)
 8001ec2:	f003 fdb7 	bl	8005a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	240002a0 	.word	0x240002a0

08001ed0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ed6:	f003 fdad 	bl	8005a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	24000318 	.word	0x24000318

08001ee4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <DMA1_Stream2_IRQHandler+0x10>)
 8001eea:	f003 fda3 	bl	8005a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	24000390 	.word	0x24000390

08001ef8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <LPTIM1_IRQHandler+0x10>)
 8001efe:	f006 f9a5 	bl	800824c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	240006a0 	.word	0x240006a0

08001f0c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001f10:	4802      	ldr	r0, [pc, #8]	; (8001f1c <ADC3_IRQHandler+0x10>)
 8001f12:	f001 ff49 	bl	8003da8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	24000230 	.word	0x24000230

08001f20 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <LPTIM2_IRQHandler+0x10>)
 8001f26:	f006 f991 	bl	800824c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	240006d8 	.word	0x240006d8

08001f34 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 8001f38:	4802      	ldr	r0, [pc, #8]	; (8001f44 <LPTIM3_IRQHandler+0x10>)
 8001f3a:	f006 f987 	bl	800824c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000710 	.word	0x24000710

08001f48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	return 1;
 8001f4c:	2301      	movs	r3, #1
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_kill>:

int _kill(int pid, int sig)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f62:	f017 fbbb 	bl	80196dc <__errno>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2216      	movs	r2, #22
 8001f6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_exit>:

void _exit (int status)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ffe7 	bl	8001f58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f8a:	e7fe      	b.n	8001f8a <_exit+0x12>

08001f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f94:	4a14      	ldr	r2, [pc, #80]	; (8001fe8 <_sbrk+0x5c>)
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <_sbrk+0x60>)
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <_sbrk+0x64>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	; (8001ff4 <_sbrk+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fbc:	f017 fb8e 	bl	80196dc <__errno>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	e009      	b.n	8001fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <_sbrk+0x64>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <_sbrk+0x64>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a05      	ldr	r2, [pc, #20]	; (8001ff0 <_sbrk+0x64>)
 8001fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fde:	68fb      	ldr	r3, [r7, #12]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24050000 	.word	0x24050000
 8001fec:	00000400 	.word	0x00000400
 8001ff0:	240007f4 	.word	0x240007f4
 8001ff4:	24001220 	.word	0x24001220

08001ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ffc:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <SystemInit+0xd0>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <SystemInit+0xd0>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <SystemInit+0xd4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	2b06      	cmp	r3, #6
 8002016:	d807      	bhi.n	8002028 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002018:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <SystemInit+0xd4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 030f 	bic.w	r3, r3, #15
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <SystemInit+0xd4>)
 8002022:	f043 0307 	orr.w	r3, r3, #7
 8002026:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002028:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <SystemInit+0xd8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a28      	ldr	r2, [pc, #160]	; (80020d0 <SystemInit+0xd8>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <SystemInit+0xd8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <SystemInit+0xd8>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4924      	ldr	r1, [pc, #144]	; (80020d0 <SystemInit+0xd8>)
 8002040:	4b24      	ldr	r3, [pc, #144]	; (80020d4 <SystemInit+0xdc>)
 8002042:	4013      	ands	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <SystemInit+0xd4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d007      	beq.n	8002062 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <SystemInit+0xd4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 030f 	bic.w	r3, r3, #15
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <SystemInit+0xd4>)
 800205c:	f043 0307 	orr.w	r3, r3, #7
 8002060:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <SystemInit+0xd8>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <SystemInit+0xd8>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <SystemInit+0xd8>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002074:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <SystemInit+0xd8>)
 8002076:	4a18      	ldr	r2, [pc, #96]	; (80020d8 <SystemInit+0xe0>)
 8002078:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <SystemInit+0xd8>)
 800207c:	4a17      	ldr	r2, [pc, #92]	; (80020dc <SystemInit+0xe4>)
 800207e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <SystemInit+0xd8>)
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <SystemInit+0xe8>)
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <SystemInit+0xd8>)
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <SystemInit+0xd8>)
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <SystemInit+0xe8>)
 8002090:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <SystemInit+0xd8>)
 8002094:	2200      	movs	r2, #0
 8002096:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <SystemInit+0xd8>)
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <SystemInit+0xe8>)
 800209c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <SystemInit+0xd8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <SystemInit+0xd8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <SystemInit+0xd8>)
 80020aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <SystemInit+0xd8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <SystemInit+0xec>)
 80020b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00
 80020cc:	52002000 	.word	0x52002000
 80020d0:	58024400 	.word	0x58024400
 80020d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80020d8:	02020200 	.word	0x02020200
 80020dc:	01ff0000 	.word	0x01ff0000
 80020e0:	01010280 	.word	0x01010280
 80020e4:	52004000 	.word	0x52004000

080020e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim23;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b098      	sub	sp, #96	; 0x60
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	2234      	movs	r2, #52	; 0x34
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f017 fb43 	bl	80197a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800211a:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <MX_TIM1_Init+0x160>)
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <MX_TIM1_Init+0x164>)
 800211e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002120:	4b49      	ldr	r3, [pc, #292]	; (8002248 <MX_TIM1_Init+0x160>)
 8002122:	2200      	movs	r2, #0
 8002124:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b48      	ldr	r3, [pc, #288]	; (8002248 <MX_TIM1_Init+0x160>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800212c:	4b46      	ldr	r3, [pc, #280]	; (8002248 <MX_TIM1_Init+0x160>)
 800212e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002132:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b44      	ldr	r3, [pc, #272]	; (8002248 <MX_TIM1_Init+0x160>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800213a:	4b43      	ldr	r3, [pc, #268]	; (8002248 <MX_TIM1_Init+0x160>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	4b41      	ldr	r3, [pc, #260]	; (8002248 <MX_TIM1_Init+0x160>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002146:	4840      	ldr	r0, [pc, #256]	; (8002248 <MX_TIM1_Init+0x160>)
 8002148:	f009 fbf2 	bl	800b930 <HAL_TIM_PWM_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002152:	f7ff fbb4 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002162:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002166:	4619      	mov	r1, r3
 8002168:	4837      	ldr	r0, [pc, #220]	; (8002248 <MX_TIM1_Init+0x160>)
 800216a:	f00a fb97 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002174:	f7ff fba3 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002178:	2360      	movs	r3, #96	; 0x60
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002180:	2300      	movs	r3, #0
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002194:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002198:	2200      	movs	r2, #0
 800219a:	4619      	mov	r1, r3
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <MX_TIM1_Init+0x160>)
 800219e:	f009 fdb7 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80021a8:	f7ff fb89 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b0:	2204      	movs	r2, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	4824      	ldr	r0, [pc, #144]	; (8002248 <MX_TIM1_Init+0x160>)
 80021b6:	f009 fdab 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80021c0:	f7ff fb7d 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c8:	2208      	movs	r2, #8
 80021ca:	4619      	mov	r1, r3
 80021cc:	481e      	ldr	r0, [pc, #120]	; (8002248 <MX_TIM1_Init+0x160>)
 80021ce:	f009 fd9f 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80021d8:	f7ff fb71 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021e0:	220c      	movs	r2, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4818      	ldr	r0, [pc, #96]	; (8002248 <MX_TIM1_Init+0x160>)
 80021e6:	f009 fd93 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80021f0:	f7ff fb65 	bl	80018be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002216:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4807      	ldr	r0, [pc, #28]	; (8002248 <MX_TIM1_Init+0x160>)
 800222a:	f00a fbd3 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8002234:	f7ff fb43 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <MX_TIM1_Init+0x160>)
 800223a:	f000 fd7d 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 800223e:	bf00      	nop
 8002240:	3760      	adds	r7, #96	; 0x60
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	240007f8 	.word	0x240007f8
 800224c:	40010000 	.word	0x40010000

08002250 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	605a      	str	r2, [r3, #4]
 8002260:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002262:	463b      	mov	r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
 8002270:	615a      	str	r2, [r3, #20]
 8002272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <MX_TIM2_Init+0xa8>)
 8002276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <MX_TIM2_Init+0xa8>)
 800227e:	2200      	movs	r2, #0
 8002280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002282:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <MX_TIM2_Init+0xa8>)
 8002284:	2200      	movs	r2, #0
 8002286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <MX_TIM2_Init+0xa8>)
 800228a:	f04f 32ff 	mov.w	r2, #4294967295
 800228e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <MX_TIM2_Init+0xa8>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <MX_TIM2_Init+0xa8>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <MX_TIM2_Init+0xa8>)
 800229e:	f009 fb47 	bl	800b930 <HAL_TIM_PWM_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80022a8:	f7ff fb09 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	480f      	ldr	r0, [pc, #60]	; (80022f8 <MX_TIM2_Init+0xa8>)
 80022bc:	f00a faee 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80022c6:	f7ff fafa 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ca:	2360      	movs	r3, #96	; 0x60
 80022cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022da:	463b      	mov	r3, r7
 80022dc:	2200      	movs	r2, #0
 80022de:	4619      	mov	r1, r3
 80022e0:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_TIM2_Init+0xa8>)
 80022e2:	f009 fd15 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80022ec:	f7ff fae7 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	24000844 	.word	0x24000844

080022fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
 800231c:	615a      	str	r2, [r3, #20]
 800231e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002320:	4b32      	ldr	r3, [pc, #200]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <MX_TIM3_Init+0xf4>)
 8002324:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002328:	2200      	movs	r2, #0
 800232a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b2f      	ldr	r3, [pc, #188]	; (80023ec <MX_TIM3_Init+0xf0>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002338:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <MX_TIM3_Init+0xf0>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002340:	4b2a      	ldr	r3, [pc, #168]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002346:	4829      	ldr	r0, [pc, #164]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002348:	f009 faf2 	bl	800b930 <HAL_TIM_PWM_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002352:	f7ff fab4 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	4619      	mov	r1, r3
 8002364:	4821      	ldr	r0, [pc, #132]	; (80023ec <MX_TIM3_Init+0xf0>)
 8002366:	f00a fa99 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002370:	f7ff faa5 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002374:	2360      	movs	r3, #96	; 0x60
 8002376:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	4619      	mov	r1, r3
 800238a:	4818      	ldr	r0, [pc, #96]	; (80023ec <MX_TIM3_Init+0xf0>)
 800238c:	f009 fcc0 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002396:	f7ff fa92 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239a:	463b      	mov	r3, r7
 800239c:	2204      	movs	r2, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4812      	ldr	r0, [pc, #72]	; (80023ec <MX_TIM3_Init+0xf0>)
 80023a2:	f009 fcb5 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80023ac:	f7ff fa87 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b0:	463b      	mov	r3, r7
 80023b2:	2208      	movs	r2, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	480d      	ldr	r0, [pc, #52]	; (80023ec <MX_TIM3_Init+0xf0>)
 80023b8:	f009 fcaa 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80023c2:	f7ff fa7c 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c6:	463b      	mov	r3, r7
 80023c8:	220c      	movs	r2, #12
 80023ca:	4619      	mov	r1, r3
 80023cc:	4807      	ldr	r0, [pc, #28]	; (80023ec <MX_TIM3_Init+0xf0>)
 80023ce:	f009 fc9f 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80023d8:	f7ff fa71 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <MX_TIM3_Init+0xf0>)
 80023de:	f000 fcab 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 80023e2:	bf00      	nop
 80023e4:	3728      	adds	r7, #40	; 0x28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	24000890 	.word	0x24000890
 80023f0:	40000400 	.word	0x40000400

080023f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	463b      	mov	r3, r7
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
 8002414:	615a      	str	r2, [r3, #20]
 8002416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002418:	4b32      	ldr	r3, [pc, #200]	; (80024e4 <MX_TIM4_Init+0xf0>)
 800241a:	4a33      	ldr	r2, [pc, #204]	; (80024e8 <MX_TIM4_Init+0xf4>)
 800241c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <MX_TIM4_Init+0xf0>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <MX_TIM4_Init+0xf0>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <MX_TIM4_Init+0xf0>)
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <MX_TIM4_Init+0xf0>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <MX_TIM4_Init+0xf0>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800243e:	4829      	ldr	r0, [pc, #164]	; (80024e4 <MX_TIM4_Init+0xf0>)
 8002440:	f009 fa76 	bl	800b930 <HAL_TIM_PWM_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800244a:	f7ff fa38 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002456:	f107 031c 	add.w	r3, r7, #28
 800245a:	4619      	mov	r1, r3
 800245c:	4821      	ldr	r0, [pc, #132]	; (80024e4 <MX_TIM4_Init+0xf0>)
 800245e:	f00a fa1d 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002468:	f7ff fa29 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246c:	2360      	movs	r3, #96	; 0x60
 800246e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	4818      	ldr	r0, [pc, #96]	; (80024e4 <MX_TIM4_Init+0xf0>)
 8002484:	f009 fc44 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800248e:	f7ff fa16 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	2204      	movs	r2, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4812      	ldr	r0, [pc, #72]	; (80024e4 <MX_TIM4_Init+0xf0>)
 800249a:	f009 fc39 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024a4:	f7ff fa0b 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	2208      	movs	r2, #8
 80024ac:	4619      	mov	r1, r3
 80024ae:	480d      	ldr	r0, [pc, #52]	; (80024e4 <MX_TIM4_Init+0xf0>)
 80024b0:	f009 fc2e 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80024ba:	f7ff fa00 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024be:	463b      	mov	r3, r7
 80024c0:	220c      	movs	r2, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	4807      	ldr	r0, [pc, #28]	; (80024e4 <MX_TIM4_Init+0xf0>)
 80024c6:	f009 fc23 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80024d0:	f7ff f9f5 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024d4:	4803      	ldr	r0, [pc, #12]	; (80024e4 <MX_TIM4_Init+0xf0>)
 80024d6:	f000 fc2f 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	240008dc 	.word	0x240008dc
 80024e8:	40000800 	.word	0x40000800

080024ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	2224      	movs	r2, #36	; 0x24
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f017 f950 	bl	80197a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	463b      	mov	r3, r7
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <MX_TIM8_Init+0xac>)
 800250c:	4a23      	ldr	r2, [pc, #140]	; (800259c <MX_TIM8_Init+0xb0>)
 800250e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <MX_TIM8_Init+0xac>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <MX_TIM8_Init+0xac>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800251c:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <MX_TIM8_Init+0xac>)
 800251e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002522:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <MX_TIM8_Init+0xac>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <MX_TIM8_Init+0xac>)
 800252c:	2200      	movs	r2, #0
 800252e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <MX_TIM8_Init+0xac>)
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002536:	2301      	movs	r3, #1
 8002538:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800253e:	2301      	movs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800254e:	2301      	movs	r3, #1
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800255a:	f107 030c 	add.w	r3, r7, #12
 800255e:	4619      	mov	r1, r3
 8002560:	480d      	ldr	r0, [pc, #52]	; (8002598 <MX_TIM8_Init+0xac>)
 8002562:	f009 fa93 	bl	800ba8c <HAL_TIM_Encoder_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800256c:	f7ff f9a7 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002570:	2300      	movs	r3, #0
 8002572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_TIM8_Init+0xac>)
 8002582:	f00a f98b 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800258c:	f7ff f997 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	3730      	adds	r7, #48	; 0x30
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	24000928 	.word	0x24000928
 800259c:	40010400 	.word	0x40010400

080025a0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	615a      	str	r2, [r3, #20]
 80025b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <MX_TIM12_Init+0x98>)
 80025ba:	4a20      	ldr	r2, [pc, #128]	; (800263c <MX_TIM12_Init+0x9c>)
 80025bc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <MX_TIM12_Init+0x98>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <MX_TIM12_Init+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80025ca:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <MX_TIM12_Init+0x98>)
 80025cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <MX_TIM12_Init+0x98>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <MX_TIM12_Init+0x98>)
 80025da:	2200      	movs	r2, #0
 80025dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80025de:	4816      	ldr	r0, [pc, #88]	; (8002638 <MX_TIM12_Init+0x98>)
 80025e0:	f009 f9a6 	bl	800b930 <HAL_TIM_PWM_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80025ea:	f7ff f968 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ee:	2360      	movs	r3, #96	; 0x60
 80025f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <MX_TIM12_Init+0x98>)
 8002606:	f009 fb83 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002610:	f7ff f955 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2204      	movs	r2, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4807      	ldr	r0, [pc, #28]	; (8002638 <MX_TIM12_Init+0x98>)
 800261c:	f009 fb78 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002626:	f7ff f94a 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <MX_TIM12_Init+0x98>)
 800262c:	f000 fb84 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 8002630:	bf00      	nop
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000974 	.word	0x24000974
 800263c:	40001800 	.word	0x40001800

08002640 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b098      	sub	sp, #96	; 0x60
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002646:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002652:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2234      	movs	r2, #52	; 0x34
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f017 f897 	bl	80197a0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002672:	4b3a      	ldr	r3, [pc, #232]	; (800275c <MX_TIM15_Init+0x11c>)
 8002674:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <MX_TIM15_Init+0x120>)
 8002676:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <MX_TIM15_Init+0x11c>)
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267e:	4b37      	ldr	r3, [pc, #220]	; (800275c <MX_TIM15_Init+0x11c>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002684:	4b35      	ldr	r3, [pc, #212]	; (800275c <MX_TIM15_Init+0x11c>)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <MX_TIM15_Init+0x11c>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <MX_TIM15_Init+0x11c>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <MX_TIM15_Init+0x11c>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800269e:	482f      	ldr	r0, [pc, #188]	; (800275c <MX_TIM15_Init+0x11c>)
 80026a0:	f009 f946 	bl	800b930 <HAL_TIM_PWM_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80026aa:	f7ff f908 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80026b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ba:	4619      	mov	r1, r3
 80026bc:	4827      	ldr	r0, [pc, #156]	; (800275c <MX_TIM15_Init+0x11c>)
 80026be:	f00a f8ed 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80026c8:	f7ff f8f9 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026cc:	2360      	movs	r3, #96	; 0x60
 80026ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	481a      	ldr	r0, [pc, #104]	; (800275c <MX_TIM15_Init+0x11c>)
 80026f2:	f009 fb0d 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80026fc:	f7ff f8df 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002700:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002704:	2204      	movs	r2, #4
 8002706:	4619      	mov	r1, r3
 8002708:	4814      	ldr	r0, [pc, #80]	; (800275c <MX_TIM15_Init+0x11c>)
 800270a:	f009 fb01 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002714:	f7ff f8d3 	bl	80018be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800272c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002730:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002736:	2300      	movs	r3, #0
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4807      	ldr	r0, [pc, #28]	; (800275c <MX_TIM15_Init+0x11c>)
 8002740:	f00a f948 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800274a:	f7ff f8b8 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800274e:	4803      	ldr	r0, [pc, #12]	; (800275c <MX_TIM15_Init+0x11c>)
 8002750:	f000 faf2 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 8002754:	bf00      	nop
 8002756:	3760      	adds	r7, #96	; 0x60
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	240009c0 	.word	0x240009c0
 8002760:	40014000 	.word	0x40014000

08002764 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b094      	sub	sp, #80	; 0x50
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800276a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	615a      	str	r2, [r3, #20]
 800277c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800277e:	463b      	mov	r3, r7
 8002780:	2234      	movs	r2, #52	; 0x34
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f017 f80b 	bl	80197a0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <MX_TIM16_Init+0xec>)
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <MX_TIM16_Init+0xf0>)
 800278e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002790:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <MX_TIM16_Init+0xec>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <MX_TIM16_Init+0xec>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800279c:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <MX_TIM16_Init+0xec>)
 800279e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <MX_TIM16_Init+0xec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80027aa:	4b29      	ldr	r3, [pc, #164]	; (8002850 <MX_TIM16_Init+0xec>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <MX_TIM16_Init+0xec>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80027b6:	4826      	ldr	r0, [pc, #152]	; (8002850 <MX_TIM16_Init+0xec>)
 80027b8:	f009 f863 	bl	800b882 <HAL_TIM_Base_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80027c2:	f7ff f87c 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80027c6:	4822      	ldr	r0, [pc, #136]	; (8002850 <MX_TIM16_Init+0xec>)
 80027c8:	f009 f8b2 	bl	800b930 <HAL_TIM_PWM_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80027d2:	f7ff f874 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d6:	2360      	movs	r3, #96	; 0x60
 80027d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027de:	2300      	movs	r3, #0
 80027e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027e2:	2300      	movs	r3, #0
 80027e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027f6:	2200      	movs	r2, #0
 80027f8:	4619      	mov	r1, r3
 80027fa:	4815      	ldr	r0, [pc, #84]	; (8002850 <MX_TIM16_Init+0xec>)
 80027fc:	f009 fa88 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002806:	f7ff f85a 	bl	80018be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800281e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002822:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800282c:	463b      	mov	r3, r7
 800282e:	4619      	mov	r1, r3
 8002830:	4807      	ldr	r0, [pc, #28]	; (8002850 <MX_TIM16_Init+0xec>)
 8002832:	f00a f8cf 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800283c:	f7ff f83f 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <MX_TIM16_Init+0xec>)
 8002842:	f000 fa79 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 8002846:	bf00      	nop
 8002848:	3750      	adds	r7, #80	; 0x50
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24000a0c 	.word	0x24000a0c
 8002854:	40014400 	.word	0x40014400

08002858 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b094      	sub	sp, #80	; 0x50
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800285e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]
 800286e:	615a      	str	r2, [r3, #20]
 8002870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002872:	463b      	mov	r3, r7
 8002874:	2234      	movs	r2, #52	; 0x34
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f016 ff91 	bl	80197a0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <MX_TIM17_Init+0xec>)
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <MX_TIM17_Init+0xf0>)
 8002882:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <MX_TIM17_Init+0xec>)
 8002886:	2200      	movs	r2, #0
 8002888:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <MX_TIM17_Init+0xec>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002890:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <MX_TIM17_Init+0xec>)
 8002892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002896:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002898:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <MX_TIM17_Init+0xec>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <MX_TIM17_Init+0xec>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a4:	4b27      	ldr	r3, [pc, #156]	; (8002944 <MX_TIM17_Init+0xec>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80028aa:	4826      	ldr	r0, [pc, #152]	; (8002944 <MX_TIM17_Init+0xec>)
 80028ac:	f008 ffe9 	bl	800b882 <HAL_TIM_Base_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80028b6:	f7ff f802 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80028ba:	4822      	ldr	r0, [pc, #136]	; (8002944 <MX_TIM17_Init+0xec>)
 80028bc:	f009 f838 	bl	800b930 <HAL_TIM_PWM_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80028c6:	f7fe fffa 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028ca:	2360      	movs	r3, #96	; 0x60
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028d6:	2300      	movs	r3, #0
 80028d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ea:	2200      	movs	r2, #0
 80028ec:	4619      	mov	r1, r3
 80028ee:	4815      	ldr	r0, [pc, #84]	; (8002944 <MX_TIM17_Init+0xec>)
 80028f0:	f009 fa0e 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80028fa:	f7fe ffe0 	bl	80018be <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002906:	2300      	movs	r3, #0
 8002908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002920:	463b      	mov	r3, r7
 8002922:	4619      	mov	r1, r3
 8002924:	4807      	ldr	r0, [pc, #28]	; (8002944 <MX_TIM17_Init+0xec>)
 8002926:	f00a f855 	bl	800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002930:	f7fe ffc5 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <MX_TIM17_Init+0xec>)
 8002936:	f000 f9ff 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 800293a:	bf00      	nop
 800293c:	3750      	adds	r7, #80	; 0x50
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24000a58 	.word	0x24000a58
 8002948:	40014800 	.word	0x40014800

0800294c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	; 0x38
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800296c:	463b      	mov	r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]
 800297a:	615a      	str	r2, [r3, #20]
 800297c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002980:	4a3b      	ldr	r2, [pc, #236]	; (8002a70 <MX_TIM23_Init+0x124>)
 8002982:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <MX_TIM23_Init+0x120>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002992:	f04f 32ff 	mov.w	r2, #4294967295
 8002996:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <MX_TIM23_Init+0x120>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b33      	ldr	r3, [pc, #204]	; (8002a6c <MX_TIM23_Init+0x120>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 80029a4:	4831      	ldr	r0, [pc, #196]	; (8002a6c <MX_TIM23_Init+0x120>)
 80029a6:	f009 f81a 	bl	800b9de <HAL_TIM_IC_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 80029b0:	f7fe ff85 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80029b4:	482d      	ldr	r0, [pc, #180]	; (8002a6c <MX_TIM23_Init+0x120>)
 80029b6:	f008 ffbb 	bl	800b930 <HAL_TIM_PWM_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 80029c0:	f7fe ff7d 	bl	80018be <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80029cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d0:	4619      	mov	r1, r3
 80029d2:	4826      	ldr	r0, [pc, #152]	; (8002a6c <MX_TIM23_Init+0x120>)
 80029d4:	f009 ff62 	bl	800c89c <HAL_TIMEx_MasterConfigSynchronization>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM23_Init+0x96>
  {
    Error_Handler();
 80029de:	f7fe ff6e 	bl	80018be <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80029e6:	2301      	movs	r3, #1
 80029e8:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2200      	movs	r2, #0
 80029f8:	4619      	mov	r1, r3
 80029fa:	481c      	ldr	r0, [pc, #112]	; (8002a6c <MX_TIM23_Init+0x120>)
 80029fc:	f009 f8ec 	bl	800bbd8 <HAL_TIM_IC_ConfigChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM23_Init+0xbe>
  {
    Error_Handler();
 8002a06:	f7fe ff5a 	bl	80018be <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a0a:	2360      	movs	r3, #96	; 0x60
 8002a0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a1a:	463b      	mov	r3, r7
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4812      	ldr	r0, [pc, #72]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002a22:	f009 f975 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM23_Init+0xe4>
  {
    Error_Handler();
 8002a2c:	f7fe ff47 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a30:	463b      	mov	r3, r7
 8002a32:	2208      	movs	r2, #8
 8002a34:	4619      	mov	r1, r3
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002a38:	f009 f96a 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM23_Init+0xfa>
  {
    Error_Handler();
 8002a42:	f7fe ff3c 	bl	80018be <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a46:	463b      	mov	r3, r7
 8002a48:	220c      	movs	r2, #12
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4807      	ldr	r0, [pc, #28]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002a4e:	f009 f95f 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM23_Init+0x110>
  {
    Error_Handler();
 8002a58:	f7fe ff31 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8002a5c:	4803      	ldr	r0, [pc, #12]	; (8002a6c <MX_TIM23_Init+0x120>)
 8002a5e:	f000 f96b 	bl	8002d38 <HAL_TIM_MspPostInit>

}
 8002a62:	bf00      	nop
 8002a64:	3738      	adds	r7, #56	; 0x38
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000aa4 	.word	0x24000aa4
 8002a70:	4000e000 	.word	0x4000e000

08002a74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a40      	ldr	r2, [pc, #256]	; (8002b84 <HAL_TIM_PWM_MspInit+0x110>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d10f      	bne.n	8002aa6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a86:	4b40      	ldr	r3, [pc, #256]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a8c:	4a3e      	ldr	r2, [pc, #248]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a96:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002aa4:	e067      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aae:	d10f      	bne.n	8002ad0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ab0:	4b35      	ldr	r3, [pc, #212]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002ab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab6:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]
}
 8002ace:	e052      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2d      	ldr	r2, [pc, #180]	; (8002b8c <HAL_TIM_PWM_MspInit+0x118>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d10f      	bne.n	8002afa <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae0:	4a29      	ldr	r2, [pc, #164]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aea:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
}
 8002af8:	e03d      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a24      	ldr	r2, [pc, #144]	; (8002b90 <HAL_TIM_PWM_MspInit+0x11c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d10f      	bne.n	8002b24 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]
}
 8002b22:	e028      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM12)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1a      	ldr	r2, [pc, #104]	; (8002b94 <HAL_TIM_PWM_MspInit+0x120>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10f      	bne.n	8002b4e <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b34:	4a14      	ldr	r2, [pc, #80]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
}
 8002b4c:	e013      	b.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM15)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <HAL_TIM_PWM_MspInit+0x124>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10e      	bne.n	8002b76 <HAL_TIM_PWM_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_TIM_PWM_MspInit+0x114>)
 8002b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
}
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40001800 	.word	0x40001800
 8002b98:	40014000 	.word	0x40014000

08002b9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1a      	ldr	r2, [pc, #104]	; (8002c24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12d      	bne.n	8002c1a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bc6:	f043 0302 	orr.w	r3, r3, #2
 8002bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002bce:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 8002bfa:	23c0      	movs	r3, #192	; 0xc0
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <HAL_TIM_Encoder_MspInit+0x90>)
 8002c16:	f005 f8a7 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	; 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40010400 	.word	0x40010400
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58020800 	.word	0x58020800

08002c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_TIM_Base_MspInit+0x68>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10f      	bne.n	8002c62 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM17)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_TIM_Base_MspInit+0x70>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d10e      	bne.n	8002c8a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <HAL_TIM_Base_MspInit+0x6c>)
 8002c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	40014800 	.word	0x40014800

08002ca4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	605a      	str	r2, [r3, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	60da      	str	r2, [r3, #12]
 8002cba:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM23)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_TIM_IC_MspInit+0x88>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d12d      	bne.n	8002d22 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002cc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ccc:	4a18      	ldr	r2, [pc, #96]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002cd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002cec:	f043 0320 	orr.w	r3, r3, #32
 8002cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_TIM_IC_MspInit+0x8c>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8002d02:	2301      	movs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002d12:	230d      	movs	r3, #13
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4805      	ldr	r0, [pc, #20]	; (8002d34 <HAL_TIM_IC_MspInit+0x90>)
 8002d1e:	f005 f823 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8002d22:	bf00      	nop
 8002d24:	3728      	adds	r7, #40	; 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	4000e000 	.word	0x4000e000
 8002d30:	58024400 	.word	0x58024400
 8002d34:	58021400 	.word	0x58021400

08002d38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	; 0x40
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4aa6      	ldr	r2, [pc, #664]	; (8002ff0 <HAL_TIM_MspPostInit+0x2b8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d120      	bne.n	8002d9c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d5a:	4ba6      	ldr	r3, [pc, #664]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d60:	4aa4      	ldr	r2, [pc, #656]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002d62:	f043 0310 	orr.w	r3, r3, #16
 8002d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6a:	4ba2      	ldr	r3, [pc, #648]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 8002d78:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d92:	4619      	mov	r1, r3
 8002d94:	4898      	ldr	r0, [pc, #608]	; (8002ff8 <HAL_TIM_MspPostInit+0x2c0>)
 8002d96:	f004 ffe7 	bl	8007d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8002d9a:	e125      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a96      	ldr	r2, [pc, #600]	; (8002ffc <HAL_TIM_MspPostInit+0x2c4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d13f      	bne.n	8002e26 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da6:	4b93      	ldr	r3, [pc, #588]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dac:	4a91      	ldr	r2, [pc, #580]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db6:	4b8f      	ldr	r3, [pc, #572]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc4:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dca:	4a8a      	ldr	r2, [pc, #552]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002dcc:	f043 0302 	orr.w	r3, r3, #2
 8002dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd4:	4b87      	ldr	r3, [pc, #540]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 8002de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002df4:	2302      	movs	r3, #2
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4880      	ldr	r0, [pc, #512]	; (8003000 <HAL_TIM_MspPostInit+0x2c8>)
 8002e00:	f004 ffb2 	bl	8007d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 8002e04:	2330      	movs	r3, #48	; 0x30
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e14:	2302      	movs	r3, #2
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4879      	ldr	r0, [pc, #484]	; (8003004 <HAL_TIM_MspPostInit+0x2cc>)
 8002e20:	f004 ffa2 	bl	8007d68 <HAL_GPIO_Init>
}
 8002e24:	e0e0      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM4)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a77      	ldr	r2, [pc, #476]	; (8003008 <HAL_TIM_MspPostInit+0x2d0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d120      	bne.n	8002e72 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e30:	4b70      	ldr	r3, [pc, #448]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e36:	4a6f      	ldr	r2, [pc, #444]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e40:	4b6c      	ldr	r3, [pc, #432]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 8002e4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e60:	2302      	movs	r3, #2
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4868      	ldr	r0, [pc, #416]	; (800300c <HAL_TIM_MspPostInit+0x2d4>)
 8002e6c:	f004 ff7c 	bl	8007d68 <HAL_GPIO_Init>
}
 8002e70:	e0ba      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM12)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a66      	ldr	r2, [pc, #408]	; (8003010 <HAL_TIM_MspPostInit+0x2d8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d120      	bne.n	8002ebe <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e82:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
 8002e98:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 8002e9a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002eac:	2302      	movs	r3, #2
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4853      	ldr	r0, [pc, #332]	; (8003004 <HAL_TIM_MspPostInit+0x2cc>)
 8002eb8:	f004 ff56 	bl	8007d68 <HAL_GPIO_Init>
}
 8002ebc:	e094      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM15)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a54      	ldr	r2, [pc, #336]	; (8003014 <HAL_TIM_MspPostInit+0x2dc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d11f      	bne.n	8002f08 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ece:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002ed0:	f043 0310 	orr.w	r3, r3, #16
 8002ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed8:	4b46      	ldr	r3, [pc, #280]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 8002ee6:	2370      	movs	r3, #112	; 0x70
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eea:	2302      	movs	r3, #2
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002efa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002efe:	4619      	mov	r1, r3
 8002f00:	483d      	ldr	r0, [pc, #244]	; (8002ff8 <HAL_TIM_MspPostInit+0x2c0>)
 8002f02:	f004 ff31 	bl	8007d68 <HAL_GPIO_Init>
}
 8002f06:	e06f      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM16)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a42      	ldr	r2, [pc, #264]	; (8003018 <HAL_TIM_MspPostInit+0x2e0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d120      	bne.n	8002f54 <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f18:	4a36      	ldr	r2, [pc, #216]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f22:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 8002f30:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002f42:	2301      	movs	r3, #1
 8002f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	482d      	ldr	r0, [pc, #180]	; (8003004 <HAL_TIM_MspPostInit+0x2cc>)
 8002f4e:	f004 ff0b 	bl	8007d68 <HAL_GPIO_Init>
}
 8002f52:	e049      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM17)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <HAL_TIM_MspPostInit+0x2e4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d120      	bne.n	8002fa0 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5e:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f64:	4a23      	ldr	r2, [pc, #140]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6e:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 8002f7c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f96:	4619      	mov	r1, r3
 8002f98:	481a      	ldr	r0, [pc, #104]	; (8003004 <HAL_TIM_MspPostInit+0x2cc>)
 8002f9a:	f004 fee5 	bl	8007d68 <HAL_GPIO_Init>
}
 8002f9e:	e023      	b.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM23)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <HAL_TIM_MspPostInit+0x2e8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d11e      	bne.n	8002fe8 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fb0:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_TIM_MspPostInit+0x2bc>)
 8002fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 8002fc8:	230e      	movs	r3, #14
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002fd8:	230d      	movs	r3, #13
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4810      	ldr	r0, [pc, #64]	; (8003024 <HAL_TIM_MspPostInit+0x2ec>)
 8002fe4:	f004 fec0 	bl	8007d68 <HAL_GPIO_Init>
}
 8002fe8:	bf00      	nop
 8002fea:	3740      	adds	r7, #64	; 0x40
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	58021000 	.word	0x58021000
 8002ffc:	40000400 	.word	0x40000400
 8003000:	58020800 	.word	0x58020800
 8003004:	58020400 	.word	0x58020400
 8003008:	40000800 	.word	0x40000800
 800300c:	58020c00 	.word	0x58020c00
 8003010:	40001800 	.word	0x40001800
 8003014:	40014000 	.word	0x40014000
 8003018:	40014400 	.word	0x40014400
 800301c:	40014800 	.word	0x40014800
 8003020:	4000e000 	.word	0x4000e000
 8003024:	58021400 	.word	0x58021400

08003028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 800302e:	4a23      	ldr	r2, [pc, #140]	; (80030bc <MX_USART1_UART_Init+0x94>)
 8003030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003048:	2200      	movs	r2, #0
 800304a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 800304e:	220c      	movs	r2, #12
 8003050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003054:	2200      	movs	r2, #0
 8003056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 800305a:	2200      	movs	r2, #0
 800305c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003060:	2200      	movs	r2, #0
 8003062:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 800306c:	2200      	movs	r2, #0
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003070:	4811      	ldr	r0, [pc, #68]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003072:	f009 fd4f 	bl	800cb14 <HAL_UART_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800307c:	f7fe fc1f 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	480d      	ldr	r0, [pc, #52]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003084:	f00a fdf0 	bl	800dc68 <HAL_UARTEx_SetTxFifoThreshold>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800308e:	f7fe fc16 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003092:	2100      	movs	r1, #0
 8003094:	4808      	ldr	r0, [pc, #32]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 8003096:	f00a fe25 	bl	800dce4 <HAL_UARTEx_SetRxFifoThreshold>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80030a0:	f7fe fc0d 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_USART1_UART_Init+0x90>)
 80030a6:	f00a fda6 	bl	800dbf6 <HAL_UARTEx_DisableFifoMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80030b0:	f7fe fc05 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	24000af0 	.word	0x24000af0
 80030bc:	40011000 	.word	0x40011000

080030c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030c4:	4b22      	ldr	r3, [pc, #136]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030c6:	4a23      	ldr	r2, [pc, #140]	; (8003154 <MX_USART2_UART_Init+0x94>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80030ca:	4b21      	ldr	r3, [pc, #132]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b1a      	ldr	r3, [pc, #104]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b17      	ldr	r3, [pc, #92]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <MX_USART2_UART_Init+0x90>)
 80030fe:	2200      	movs	r2, #0
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <MX_USART2_UART_Init+0x90>)
 8003104:	2200      	movs	r2, #0
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003108:	4811      	ldr	r0, [pc, #68]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800310a:	f009 fd03 	bl	800cb14 <HAL_UART_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003114:	f7fe fbd3 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003118:	2100      	movs	r1, #0
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800311c:	f00a fda4 	bl	800dc68 <HAL_UARTEx_SetTxFifoThreshold>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003126:	f7fe fbca 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800312a:	2100      	movs	r1, #0
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800312e:	f00a fdd9 	bl	800dce4 <HAL_UARTEx_SetRxFifoThreshold>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003138:	f7fe fbc1 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800313c:	4804      	ldr	r0, [pc, #16]	; (8003150 <MX_USART2_UART_Init+0x90>)
 800313e:	f00a fd5a 	bl	800dbf6 <HAL_UARTEx_DisableFifoMode>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003148:	f7fe fbb9 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	bd80      	pop	{r7, pc}
 8003150:	24000b80 	.word	0x24000b80
 8003154:	40004400 	.word	0x40004400

08003158 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b0b8      	sub	sp, #224	; 0xe0
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003170:	f107 0318 	add.w	r3, r7, #24
 8003174:	22b4      	movs	r2, #180	; 0xb4
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f016 fb11 	bl	80197a0 <memset>
  if(uartHandle->Instance==USART1)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a49      	ldr	r2, [pc, #292]	; (80032a8 <HAL_UART_MspInit+0x150>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d143      	bne.n	8003210 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003188:	2301      	movs	r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003192:	f107 0318 	add.w	r3, r7, #24
 8003196:	4618      	mov	r0, r3
 8003198:	f006 f8ae 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031a2:	f7fe fb8c 	bl	80018be <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031a6:	4b41      	ldr	r3, [pc, #260]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	4a3f      	ldr	r2, [pc, #252]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c4:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ca:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d4:	4b35      	ldr	r3, [pc, #212]	; (80032ac <HAL_UART_MspInit+0x154>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80031e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2300      	movs	r3, #0
 80031f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031fc:	2307      	movs	r3, #7
 80031fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003202:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003206:	4619      	mov	r1, r3
 8003208:	4829      	ldr	r0, [pc, #164]	; (80032b0 <HAL_UART_MspInit+0x158>)
 800320a:	f004 fdad 	bl	8007d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800320e:	e046      	b.n	800329e <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <HAL_UART_MspInit+0x15c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d141      	bne.n	800329e <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800321a:	2302      	movs	r3, #2
 800321c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003224:	f107 0318 	add.w	r3, r7, #24
 8003228:	4618      	mov	r0, r3
 800322a:	f006 f865 	bl	80092f8 <HAL_RCCEx_PeriphCLKConfig>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003234:	f7fe fb43 	bl	80018be <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_UART_MspInit+0x154>)
 800323a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800323e:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <HAL_UART_MspInit+0x154>)
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_UART_MspInit+0x154>)
 800324a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_UART_MspInit+0x154>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_UART_MspInit+0x154>)
 800325e:	f043 0308 	orr.w	r3, r3, #8
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_UART_MspInit+0x154>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003274:	2360      	movs	r3, #96	; 0x60
 8003276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800328c:	2307      	movs	r3, #7
 800328e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003292:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003296:	4619      	mov	r1, r3
 8003298:	4807      	ldr	r0, [pc, #28]	; (80032b8 <HAL_UART_MspInit+0x160>)
 800329a:	f004 fd65 	bl	8007d68 <HAL_GPIO_Init>
}
 800329e:	bf00      	nop
 80032a0:	37e0      	adds	r7, #224	; 0xe0
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40011000 	.word	0x40011000
 80032ac:	58024400 	.word	0x58024400
 80032b0:	58020000 	.word	0x58020000
 80032b4:	40004400 	.word	0x40004400
 80032b8:	58020c00 	.word	0x58020c00

080032bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032c0:	f7fe fe9a 	bl	8001ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c4:	480c      	ldr	r0, [pc, #48]	; (80032f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032c6:	490d      	ldr	r1, [pc, #52]	; (80032fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032c8:	4a0d      	ldr	r2, [pc, #52]	; (8003300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032dc:	4c0a      	ldr	r4, [pc, #40]	; (8003308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ea:	f016 f9fd 	bl	80196e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ee:	f7fe f9cb 	bl	8001688 <main>
  bx  lr
 80032f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80032f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032fc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8003300:	0801a030 	.word	0x0801a030
  ldr r2, =_sbss
 8003304:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8003308:	24001220 	.word	0x24001220

0800330c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC_IRQHandler>
	...

08003310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003316:	2003      	movs	r0, #3
 8003318:	f001 fff2 	bl	8005300 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800331c:	f005 fe16 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 8003320:	4602      	mov	r2, r0
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <HAL_Init+0x68>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	4913      	ldr	r1, [pc, #76]	; (800337c <HAL_Init+0x6c>)
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	fa22 f303 	lsr.w	r3, r2, r3
 8003338:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_Init+0x68>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_Init+0x6c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	4a0b      	ldr	r2, [pc, #44]	; (8003380 <HAL_Init+0x70>)
 8003352:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_Init+0x74>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800335a:	2000      	movs	r0, #0
 800335c:	f000 f814 	bl	8003388 <HAL_InitTick>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e002      	b.n	8003370 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800336a:	f7fe fd55 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	58024400 	.word	0x58024400
 800337c:	08019fb0 	.word	0x08019fb0
 8003380:	24000004 	.word	0x24000004
 8003384:	24000000 	.word	0x24000000

08003388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <HAL_InitTick+0x60>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e021      	b.n	80033e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_InitTick+0x64>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_InitTick+0x60>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	4619      	mov	r1, r3
 80033a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 ffd7 	bl	8005366 <HAL_SYSTICK_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e00e      	b.n	80033e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b0f      	cmp	r3, #15
 80033c6:	d80a      	bhi.n	80033de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c8:	2200      	movs	r2, #0
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f001 ffa1 	bl	8005316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_InitTick+0x68>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2400000c 	.word	0x2400000c
 80033ec:	24000000 	.word	0x24000000
 80033f0:	24000008 	.word	0x24000008

080033f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f8:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_IncTick+0x20>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_IncTick+0x24>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4413      	add	r3, r2
 8003404:	4a04      	ldr	r2, [pc, #16]	; (8003418 <HAL_IncTick+0x24>)
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	2400000c 	.word	0x2400000c
 8003418:	24000c10 	.word	0x24000c10

0800341c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return uwTick;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_GetTick+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	24000c10 	.word	0x24000c10

08003434 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003444:	4904      	ldr	r1, [pc, #16]	; (8003458 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	58000400 	.word	0x58000400

0800345c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	4904      	ldr	r1, [pc, #16]	; (8003484 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	58000400 	.word	0x58000400

08003488 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3360      	adds	r3, #96	; 0x60
 8003502:	461a      	mov	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <LL_ADC_SetOffset+0x60>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d10b      	bne.n	800352c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	4313      	orrs	r3, r2
 8003522:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800352a:	e00b      	b.n	8003544 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	431a      	orrs	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	58026000 	.word	0x58026000

08003554 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	461a      	mov	r2, r3
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	611a      	str	r2, [r3, #16]
}
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3360      	adds	r3, #96	; 0x60
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	601a      	str	r2, [r3, #0]
  }
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	58026000 	.word	0x58026000

080035f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a0c      	ldr	r2, [pc, #48]	; (8003638 <LL_ADC_SetOffsetSaturation+0x40>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d10e      	bne.n	800362a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3360      	adds	r3, #96	; 0x60
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	58026000 	.word	0x58026000

0800363c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4a0c      	ldr	r2, [pc, #48]	; (800367c <LL_ADC_SetOffsetSign+0x40>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10e      	bne.n	800366e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3360      	adds	r3, #96	; 0x60
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	58026000 	.word	0x58026000

08003680 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3360      	adds	r3, #96	; 0x60
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <LL_ADC_SetOffsetState+0x50>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80036b2:	e007      	b.n	80036c4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	431a      	orrs	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	58026000 	.word	0x58026000

080036d4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b087      	sub	sp, #28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3330      	adds	r3, #48	; 0x30
 800370a:	461a      	mov	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	4413      	add	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	211f      	movs	r1, #31
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	401a      	ands	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0e9b      	lsrs	r3, r3, #26
 8003732:	f003 011f 	and.w	r1, r3, #31
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 031f 	and.w	r3, r3, #31
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	3314      	adds	r3, #20
 8003788:	461a      	mov	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	0e5b      	lsrs	r3, r3, #25
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0d1b      	lsrs	r3, r3, #20
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	2107      	movs	r1, #7
 80037a6:	fa01 f303 	lsl.w	r3, r1, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	0d1b      	lsrs	r3, r3, #20
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	431a      	orrs	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <LL_ADC_SetChannelSingleDiff+0x78>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d115      	bne.n	8003810 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f0:	43db      	mvns	r3, r3
 80037f2:	401a      	ands	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0318 	and.w	r3, r3, #24
 80037fa:	4914      	ldr	r1, [pc, #80]	; (800384c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80037fc:	40d9      	lsrs	r1, r3
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	400b      	ands	r3, r1
 8003802:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003806:	431a      	orrs	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800380e:	e014      	b.n	800383a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0318 	and.w	r3, r3, #24
 8003826:	4909      	ldr	r1, [pc, #36]	; (800384c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003828:	40d9      	lsrs	r1, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	400b      	ands	r3, r1
 800382e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003832:	431a      	orrs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	58026000 	.word	0x58026000
 800384c:	000fffff 	.word	0x000fffff

08003850 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 031f 	and.w	r3, r3, #31
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003896:	4013      	ands	r3, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6093      	str	r3, [r2, #8]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	5fffffc0 	.word	0x5fffffc0

080038ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c0:	d101      	bne.n	80038c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	6fffffc0 	.word	0x6fffffc0

080038fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003910:	d101      	bne.n	8003916 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <LL_ADC_IsEnabled+0x18>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <LL_ADC_IsEnabled+0x1a>
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d101      	bne.n	8003962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b08      	cmp	r3, #8
 8003982:	d101      	bne.n	8003988 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e1ee      	b.n	8003d90 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fc ffa5 	bl	8000910 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff67 	bl	80038ac <LL_ADC_IsDeepPowerDownEnabled>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff4d 	bl	8003888 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff ff82 	bl	80038fc <LL_ADC_IsInternalRegulatorEnabled>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d114      	bne.n	8003a28 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff66 	bl	80038d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a08:	4b8e      	ldr	r3, [pc, #568]	; (8003c44 <HAL_ADC_Init+0x2ac>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	4a8e      	ldr	r2, [pc, #568]	; (8003c48 <HAL_ADC_Init+0x2b0>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	3301      	adds	r3, #1
 8003a18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a1a:	e002      	b.n	8003a22 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f9      	bne.n	8003a1c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff65 	bl	80038fc <LL_ADC_IsInternalRegulatorEnabled>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff76 	bl	800394a <LL_ADC_REG_IsConversionOngoing>
 8003a5e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f040 8188 	bne.w	8003d7e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 8184 	bne.w	8003d7e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff4a 	bl	8003924 <LL_ADC_IsEnabled>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d136      	bne.n	8003b04 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6c      	ldr	r2, [pc, #432]	; (8003c4c <HAL_ADC_Init+0x2b4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_ADC_Init+0x112>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6a      	ldr	r2, [pc, #424]	; (8003c50 <HAL_ADC_Init+0x2b8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_ADC_Init+0x130>
 8003aaa:	4868      	ldr	r0, [pc, #416]	; (8003c4c <HAL_ADC_Init+0x2b4>)
 8003aac:	f7ff ff3a 	bl	8003924 <LL_ADC_IsEnabled>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4867      	ldr	r0, [pc, #412]	; (8003c50 <HAL_ADC_Init+0x2b8>)
 8003ab4:	f7ff ff36 	bl	8003924 <LL_ADC_IsEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4323      	orrs	r3, r4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e008      	b.n	8003ada <HAL_ADC_Init+0x142>
 8003ac8:	4862      	ldr	r0, [pc, #392]	; (8003c54 <HAL_ADC_Init+0x2bc>)
 8003aca:	f7ff ff2b 	bl	8003924 <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d012      	beq.n	8003b04 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a5a      	ldr	r2, [pc, #360]	; (8003c4c <HAL_ADC_Init+0x2b4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_Init+0x15a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_ADC_Init+0x2b8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_Init+0x15e>
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <HAL_ADC_Init+0x2c0>)
 8003af4:	e000      	b.n	8003af8 <HAL_ADC_Init+0x160>
 8003af6:	4a59      	ldr	r2, [pc, #356]	; (8003c5c <HAL_ADC_Init+0x2c4>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f7ff fcc2 	bl	8003488 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a52      	ldr	r2, [pc, #328]	; (8003c54 <HAL_ADC_Init+0x2bc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d129      	bne.n	8003b62 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7e5b      	ldrb	r3, [r3, #25]
 8003b12:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b18:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003b1e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d013      	beq.n	8003b50 <HAL_ADC_Init+0x1b8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d00d      	beq.n	8003b4c <HAL_ADC_Init+0x1b4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b1c      	cmp	r3, #28
 8003b36:	d007      	beq.n	8003b48 <HAL_ADC_Init+0x1b0>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b18      	cmp	r3, #24
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_Init+0x1ac>
 8003b40:	2318      	movs	r3, #24
 8003b42:	e006      	b.n	8003b52 <HAL_ADC_Init+0x1ba>
 8003b44:	2300      	movs	r3, #0
 8003b46:	e004      	b.n	8003b52 <HAL_ADC_Init+0x1ba>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	e002      	b.n	8003b52 <HAL_ADC_Init+0x1ba>
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	e000      	b.n	8003b52 <HAL_ADC_Init+0x1ba>
 8003b50:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003b52:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b5a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e00e      	b.n	8003b80 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7e5b      	ldrb	r3, [r3, #25]
 8003b66:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b6c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b72:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b7a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d106      	bne.n	8003b98 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	045b      	lsls	r3, r3, #17
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_ADC_Init+0x2bc>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d115      	bne.n	8003bea <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_ADC_Init+0x2c8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	611a      	str	r2, [r3, #16]
 8003be8:	e009      	b.n	8003bfe <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <HAL_ADC_Init+0x2cc>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	69b9      	ldr	r1, [r7, #24]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fea1 	bl	800394a <LL_ADC_REG_IsConversionOngoing>
 8003c08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff feae 	bl	8003970 <LL_ADC_INJ_IsConversionOngoing>
 8003c14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f040 808e 	bne.w	8003d3a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 808a 	bne.w	8003d3a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <HAL_ADC_Init+0x2bc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d11b      	bne.n	8003c68 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	7e1b      	ldrb	r3, [r3, #24]
 8003c34:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c3c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e018      	b.n	8003c76 <HAL_ADC_Init+0x2de>
 8003c44:	24000000 	.word	0x24000000
 8003c48:	053e2d63 	.word	0x053e2d63
 8003c4c:	40022000 	.word	0x40022000
 8003c50:	40022100 	.word	0x40022100
 8003c54:	58026000 	.word	0x58026000
 8003c58:	40022300 	.word	0x40022300
 8003c5c:	58026300 	.word	0x58026300
 8003c60:	fff04007 	.word	0xfff04007
 8003c64:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	7e1b      	ldrb	r3, [r3, #24]
 8003c6c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_ADC_Init+0x400>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d137      	bne.n	8003d04 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a3f      	ldr	r2, [pc, #252]	; (8003d9c <HAL_ADC_Init+0x404>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d116      	bne.n	8003cd2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <HAL_ADC_Init+0x408>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	611a      	str	r2, [r3, #16]
 8003cd0:	e020      	b.n	8003d14 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_ADC_Init+0x40c>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ce0:	3a01      	subs	r2, #1
 8003ce2:	0411      	lsls	r1, r2, #16
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ce8:	4311      	orrs	r1, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	e007      	b.n	8003d14 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1b      	ldr	r2, [pc, #108]	; (8003d9c <HAL_ADC_Init+0x404>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d002      	beq.n	8003d3a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 ffbb 	bl	8004cb0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d10c      	bne.n	8003d5c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	f023 010f 	bic.w	r1, r3, #15
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
 8003d5a:	e007      	b.n	8003d6c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 020f 	bic.w	r2, r2, #15
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	f023 0303 	bic.w	r3, r3, #3
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003d7c:	e007      	b.n	8003d8e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d82:	f043 0210 	orr.w	r2, r3, #16
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	ffffbffc 	.word	0xffffbffc
 8003d9c:	58026000 	.word	0x58026000
 8003da0:	fc00f81f 	.word	0xfc00f81f
 8003da4:	fc00f81e 	.word	0xfc00f81e

08003da8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003db0:	2300      	movs	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <HAL_ADC_IRQHandler+0x240>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x30>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a86      	ldr	r2, [pc, #536]	; (8003fec <HAL_ADC_IRQHandler+0x244>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d101      	bne.n	8003ddc <HAL_ADC_IRQHandler+0x34>
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <HAL_ADC_IRQHandler+0x248>)
 8003dda:	e000      	b.n	8003dde <HAL_ADC_IRQHandler+0x36>
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_ADC_IRQHandler+0x24c>)
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fd36 	bl	8003850 <LL_ADC_GetMultimode>
 8003de4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d017      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x78>
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f001 f886 	bl	8004f24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0304 	and.w	r3, r3, #4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_ADC_IRQHandler+0x8c>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8083 	beq.w	8003f46 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d07d      	beq.n	8003f46 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff fc34 	bl	80036d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d062      	beq.n	8003f38 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <HAL_ADC_IRQHandler+0x244>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d002      	beq.n	8003e82 <HAL_ADC_IRQHandler+0xda>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	e000      	b.n	8003e84 <HAL_ADC_IRQHandler+0xdc>
 8003e82:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_ADC_IRQHandler+0x240>)
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d008      	beq.n	8003e9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d002      	beq.n	8003e9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	d104      	bne.n	8003ea8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	e00c      	b.n	8003ec2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4f      	ldr	r2, [pc, #316]	; (8003fec <HAL_ADC_IRQHandler+0x244>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d002      	beq.n	8003eb8 <HAL_ADC_IRQHandler+0x110>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e000      	b.n	8003eba <HAL_ADC_IRQHandler+0x112>
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_ADC_IRQHandler+0x240>)
 8003eba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d135      	bne.n	8003f38 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d12e      	bne.n	8003f38 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fd33 	bl	800394a <LL_ADC_REG_IsConversionOngoing>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d11a      	bne.n	8003f20 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 020c 	bic.w	r2, r2, #12
 8003ef8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d112      	bne.n	8003f38 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f16:	f043 0201 	orr.w	r2, r3, #1
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	661a      	str	r2, [r3, #96]	; 0x60
 8003f1e:	e00b      	b.n	8003f38 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	f043 0201 	orr.w	r2, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f96f 	bl	800421c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	220c      	movs	r2, #12
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f003 0320 	and.w	r3, r3, #32
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d004      	beq.n	8003f5a <HAL_ADC_IRQHandler+0x1b2>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10b      	bne.n	8003f72 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a0 	beq.w	80040a6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 809a 	beq.w	80040a6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fbdf 	bl	8003752 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f94:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fb9a 	bl	80036d4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fa0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <HAL_ADC_IRQHandler+0x244>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d002      	beq.n	8003fb2 <HAL_ADC_IRQHandler+0x20a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	e000      	b.n	8003fb4 <HAL_ADC_IRQHandler+0x20c>
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	; (8003fe8 <HAL_ADC_IRQHandler+0x240>)
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d008      	beq.n	8003fce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b06      	cmp	r3, #6
 8003fc6:	d002      	beq.n	8003fce <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b07      	cmp	r3, #7
 8003fcc:	d104      	bne.n	8003fd8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	e014      	b.n	8004002 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a03      	ldr	r2, [pc, #12]	; (8003fec <HAL_ADC_IRQHandler+0x244>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_ADC_IRQHandler+0x250>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	e008      	b.n	8003ffa <HAL_ADC_IRQHandler+0x252>
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40022100 	.word	0x40022100
 8003ff0:	40022300 	.word	0x40022300
 8003ff4:	58026300 	.word	0x58026300
 8003ff8:	4b84      	ldr	r3, [pc, #528]	; (800420c <HAL_ADC_IRQHandler+0x464>)
 8003ffa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d047      	beq.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <HAL_ADC_IRQHandler+0x27a>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d03f      	beq.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800401e:	2b00      	cmp	r3, #0
 8004020:	d13a      	bne.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d133      	bne.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d12e      	bne.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fc96 	bl	8003970 <LL_ADC_INJ_IsConversionOngoing>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11a      	bne.n	8004080 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004058:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d112      	bne.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
 800407e:	e00b      	b.n	8004098 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004090:	f043 0201 	orr.w	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 ff1b 	bl	8004ed4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2260      	movs	r2, #96	; 0x60
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d011      	beq.n	80040d4 <HAL_ADC_IRQHandler+0x32c>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00c      	beq.n	80040d4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8b2 	bl	8004230 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2280      	movs	r2, #128	; 0x80
 80040d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <HAL_ADC_IRQHandler+0x35c>
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00d      	beq.n	8004104 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 ff01 	bl	8004efc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004102:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <HAL_ADC_IRQHandler+0x38c>
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00d      	beq.n	8004134 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800411c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fef3 	bl	8004f10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d043      	beq.n	80041c6 <HAL_ADC_IRQHandler+0x41e>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d03e      	beq.n	80041c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004150:	2301      	movs	r3, #1
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
 8004154:	e021      	b.n	800419a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <HAL_ADC_IRQHandler+0x464>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_ADC_IRQHandler+0x3c8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a29      	ldr	r2, [pc, #164]	; (8004210 <HAL_ADC_IRQHandler+0x468>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_ADC_IRQHandler+0x3cc>
 8004170:	4b28      	ldr	r3, [pc, #160]	; (8004214 <HAL_ADC_IRQHandler+0x46c>)
 8004172:	e000      	b.n	8004176 <HAL_ADC_IRQHandler+0x3ce>
 8004174:	4b28      	ldr	r3, [pc, #160]	; (8004218 <HAL_ADC_IRQHandler+0x470>)
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fb78 	bl	800386c <LL_ADC_GetMultiDMATransfer>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004182:	2301      	movs	r3, #1
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
 8004186:	e008      	b.n	800419a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004196:	2301      	movs	r3, #1
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10e      	bne.n	80041be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b0:	f043 0202 	orr.w	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f843 	bl	8004244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2210      	movs	r2, #16
 80041c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d018      	beq.n	8004202 <HAL_ADC_IRQHandler+0x45a>
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d013      	beq.n	8004202 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fe73 	bl	8004ee8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004202:	bf00      	nop
 8004204:	3728      	adds	r7, #40	; 0x28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40022000 	.word	0x40022000
 8004210:	40022100 	.word	0x40022100
 8004214:	40022300 	.word	0x40022300
 8004218:	58026300 	.word	0x58026300

0800421c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b0b9      	sub	sp, #228	; 0xe4
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004272:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4aa9      	ldr	r2, [pc, #676]	; (8004520 <HAL_ADC_ConfigChannel+0x2c8>)
 800427a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d102      	bne.n	800428c <HAL_ADC_ConfigChannel+0x34>
 8004286:	2302      	movs	r3, #2
 8004288:	f000 bcfa 	b.w	8004c80 <HAL_ADC_ConfigChannel+0xa28>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fb56 	bl	800394a <LL_ADC_REG_IsConversionOngoing>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f040 84de 	bne.w	8004c62 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a9e      	ldr	r2, [pc, #632]	; (8004524 <HAL_ADC_ConfigChannel+0x2cc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d033      	beq.n	8004318 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x76>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0e9b      	lsrs	r3, r3, #26
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2201      	movs	r2, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	e01d      	b.n	800430a <HAL_ADC_ConfigChannel+0xb2>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042da:	fa93 f3a3 	rbit	r3, r3
 80042de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e004      	b.n	8004300 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80042f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042fa:	fab3 f383 	clz	r3, r3
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2201      	movs	r2, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	69d1      	ldr	r1, [r2, #28]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	430b      	orrs	r3, r1
 8004316:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6859      	ldr	r1, [r3, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	f7ff f9e8 	bl	80036fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fb0b 	bl	800394a <LL_ADC_REG_IsConversionOngoing>
 8004334:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fb17 	bl	8003970 <LL_ADC_INJ_IsConversionOngoing>
 8004342:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800434a:	2b00      	cmp	r3, #0
 800434c:	f040 8270 	bne.w	8004830 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004350:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004354:	2b00      	cmp	r3, #0
 8004356:	f040 826b 	bne.w	8004830 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6819      	ldr	r1, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	461a      	mov	r2, r3
 8004368:	f7ff fa06 	bl	8003778 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a6c      	ldr	r2, [pc, #432]	; (8004524 <HAL_ADC_ConfigChannel+0x2cc>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004390:	e032      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004392:	4b65      	ldr	r3, [pc, #404]	; (8004528 <HAL_ADC_ConfigChannel+0x2d0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800439a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439e:	d10b      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x160>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	e01d      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x19c>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10b      	bne.n	80043de <HAL_ADC_ConfigChannel+0x186>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695a      	ldr	r2, [r3, #20]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	089b      	lsrs	r3, r3, #2
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	e00a      	b.n	80043f4 <HAL_ADC_ConfigChannel+0x19c>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d048      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	6919      	ldr	r1, [r3, #16]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004410:	f7ff f86e 	bl	80034f0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a42      	ldr	r2, [pc, #264]	; (8004524 <HAL_ADC_ConfigChannel+0x2cc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d119      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	6919      	ldr	r1, [r3, #16]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	461a      	mov	r2, r3
 800442c:	f7ff f906 	bl	800363c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	6919      	ldr	r1, [r3, #16]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x1f0>
 8004442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004446:	e000      	b.n	800444a <HAL_ADC_ConfigChannel+0x1f2>
 8004448:	2300      	movs	r3, #0
 800444a:	461a      	mov	r2, r3
 800444c:	f7ff f8d4 	bl	80035f8 <LL_ADC_SetOffsetSaturation>
 8004450:	e1ee      	b.n	8004830 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6919      	ldr	r1, [r3, #16]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <HAL_ADC_ConfigChannel+0x212>
 8004464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004468:	e000      	b.n	800446c <HAL_ADC_ConfigChannel+0x214>
 800446a:	2300      	movs	r3, #0
 800446c:	461a      	mov	r2, r3
 800446e:	f7ff f8a1 	bl	80035b4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6919      	ldr	r1, [r3, #16]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	7e1b      	ldrb	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_ADC_ConfigChannel+0x230>
 8004482:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004486:	e000      	b.n	800448a <HAL_ADC_ConfigChannel+0x232>
 8004488:	2300      	movs	r3, #0
 800448a:	461a      	mov	r2, r3
 800448c:	f7ff f878 	bl	8003580 <LL_ADC_SetDataRightShift>
 8004490:	e1ce      	b.n	8004830 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a23      	ldr	r2, [pc, #140]	; (8004524 <HAL_ADC_ConfigChannel+0x2cc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	f040 8181 	bne.w	80047a0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff f855 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x272>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2100      	movs	r1, #0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff f84a 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80044c0:	4603      	mov	r3, r0
 80044c2:	0e9b      	lsrs	r3, r3, #26
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	e01e      	b.n	8004508 <HAL_ADC_ConfigChannel+0x2b0>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff f83f 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80044e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80044f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e004      	b.n	8004506 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80044fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004500:	fab3 f383 	clz	r3, r3
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <HAL_ADC_ConfigChannel+0x2d4>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	0e9b      	lsrs	r3, r3, #26
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	e01e      	b.n	800455e <HAL_ADC_ConfigChannel+0x306>
 8004520:	47ff0000 	.word	0x47ff0000
 8004524:	58026000 	.word	0x58026000
 8004528:	5c001000 	.word	0x5c001000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004538:	fa93 f3a3 	rbit	r3, r3
 800453c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004548:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e004      	b.n	800455e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004554:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004558:	fab3 f383 	clz	r3, r3
 800455c:	b2db      	uxtb	r3, r3
 800455e:	429a      	cmp	r2, r3
 8004560:	d106      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	2100      	movs	r1, #0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f888 	bl	8003680 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe ffec 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800457c:	4603      	mov	r3, r0
 800457e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10a      	bne.n	800459c <HAL_ADC_ConfigChannel+0x344>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe ffe1 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	0e9b      	lsrs	r3, r3, #26
 8004596:	f003 021f 	and.w	r2, r3, #31
 800459a:	e01e      	b.n	80045da <HAL_ADC_ConfigChannel+0x382>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe ffd6 	bl	8003554 <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80045ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80045c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80045ca:	2320      	movs	r3, #32
 80045cc:	e004      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80045ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x39a>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0e9b      	lsrs	r3, r3, #26
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	e018      	b.n	8004624 <HAL_ADC_ConfigChannel+0x3cc>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045fe:	fa93 f3a3 	rbit	r3, r3
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800460a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800460e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004616:	2320      	movs	r3, #32
 8004618:	e004      	b.n	8004624 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800461a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	429a      	cmp	r2, r3
 8004626:	d106      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2200      	movs	r2, #0
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f825 	bl	8003680 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2102      	movs	r1, #2
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe ff89 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004642:	4603      	mov	r3, r0
 8004644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x40a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2102      	movs	r1, #2
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe ff7e 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004658:	4603      	mov	r3, r0
 800465a:	0e9b      	lsrs	r3, r3, #26
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	e01e      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x448>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2102      	movs	r1, #2
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe ff73 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800466e:	4603      	mov	r3, r0
 8004670:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004688:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004690:	2320      	movs	r3, #32
 8004692:	e004      	b.n	800469e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d105      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x460>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	e014      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x48a>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80046c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80046cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e004      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80046d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d106      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2200      	movs	r2, #0
 80046ec:	2102      	movs	r1, #2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe ffc6 	bl	8003680 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2103      	movs	r1, #3
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fe ff2a 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004700:	4603      	mov	r3, r0
 8004702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x4c8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2103      	movs	r1, #3
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe ff1f 	bl	8003554 <LL_ADC_GetOffsetChannel>
 8004716:	4603      	mov	r3, r0
 8004718:	0e9b      	lsrs	r3, r3, #26
 800471a:	f003 021f 	and.w	r2, r3, #31
 800471e:	e017      	b.n	8004750 <HAL_ADC_ConfigChannel+0x4f8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2103      	movs	r1, #3
 8004726:	4618      	mov	r0, r3
 8004728:	f7fe ff14 	bl	8003554 <LL_ADC_GetOffsetChannel>
 800472c:	4603      	mov	r3, r0
 800472e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800473a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800473c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004742:	2320      	movs	r3, #32
 8004744:	e003      	b.n	800474e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004748:	fab3 f383 	clz	r3, r3
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004758:	2b00      	cmp	r3, #0
 800475a:	d105      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x510>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0e9b      	lsrs	r3, r3, #26
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	e011      	b.n	800478c <HAL_ADC_ConfigChannel+0x534>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800477a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004780:	2320      	movs	r3, #32
 8004782:	e003      	b.n	800478c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	429a      	cmp	r2, r3
 800478e:	d14f      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	2103      	movs	r1, #3
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe ff71 	bl	8003680 <LL_ADC_SetOffsetState>
 800479e:	e047      	b.n	8004830 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	069b      	lsls	r3, r3, #26
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d107      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	069b      	lsls	r3, r3, #26
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d107      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047e6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d107      	bne.n	800480c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800480a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	069b      	lsls	r3, r3, #26
 800481c:	429a      	cmp	r2, r3
 800481e:	d107      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800482e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff f875 	bl	8003924 <LL_ADC_IsEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 8219 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6819      	ldr	r1, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	461a      	mov	r2, r3
 8004850:	f7fe ffbe 	bl	80037d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4aa1      	ldr	r2, [pc, #644]	; (8004ae0 <HAL_ADC_ConfigChannel+0x888>)
 800485a:	4293      	cmp	r3, r2
 800485c:	f040 812e 	bne.w	8004abc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x630>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	3301      	adds	r3, #1
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2b09      	cmp	r3, #9
 800487e:	bf94      	ite	ls
 8004880:	2301      	movls	r3, #1
 8004882:	2300      	movhi	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	e019      	b.n	80048bc <HAL_ADC_ConfigChannel+0x664>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004898:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800489a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e003      	b.n	80048ac <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80048a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	f003 031f 	and.w	r3, r3, #31
 80048b2:	2b09      	cmp	r3, #9
 80048b4:	bf94      	ite	ls
 80048b6:	2301      	movls	r3, #1
 80048b8:	2300      	movhi	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d079      	beq.n	80049b4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x684>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	0e9b      	lsrs	r3, r3, #26
 80048d2:	3301      	adds	r3, #1
 80048d4:	069b      	lsls	r3, r3, #26
 80048d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048da:	e015      	b.n	8004908 <HAL_ADC_ConfigChannel+0x6b0>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80048ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80048ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e003      	b.n	8004900 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80048f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	069b      	lsls	r3, r3, #26
 8004904:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x6d0>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	0e9b      	lsrs	r3, r3, #26
 800491a:	3301      	adds	r3, #1
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	e017      	b.n	8004958 <HAL_ADC_ConfigChannel+0x700>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004930:	fa93 f3a3 	rbit	r3, r3
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e003      	b.n	800494c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004946:	fab3 f383 	clz	r3, r3
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3301      	adds	r3, #1
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	ea42 0103 	orr.w	r1, r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <HAL_ADC_ConfigChannel+0x726>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0e9b      	lsrs	r3, r3, #26
 800496e:	3301      	adds	r3, #1
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	051b      	lsls	r3, r3, #20
 800497c:	e018      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x758>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	fa93 f3a3 	rbit	r3, r3
 800498a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800498c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e003      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	3301      	adds	r3, #1
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049b0:	430b      	orrs	r3, r1
 80049b2:	e07e      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d107      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x778>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	0e9b      	lsrs	r3, r3, #26
 80049c6:	3301      	adds	r3, #1
 80049c8:	069b      	lsls	r3, r3, #26
 80049ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049ce:	e015      	b.n	80049fc <HAL_ADC_ConfigChannel+0x7a4>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d8:	fa93 f3a3 	rbit	r3, r3
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80049e8:	2320      	movs	r3, #32
 80049ea:	e003      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80049ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	069b      	lsls	r3, r3, #26
 80049f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d109      	bne.n	8004a1c <HAL_ADC_ConfigChannel+0x7c4>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2101      	movs	r1, #1
 8004a16:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1a:	e017      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x7f4>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa93 f3a3 	rbit	r3, r3
 8004a28:	61bb      	str	r3, [r7, #24]
  return result;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004a34:	2320      	movs	r3, #32
 8004a36:	e003      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	fab3 f383 	clz	r3, r3
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2101      	movs	r1, #1
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	ea42 0103 	orr.w	r1, r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10d      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x820>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	3301      	adds	r3, #1
 8004a64:	f003 021f 	and.w	r2, r3, #31
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3b1e      	subs	r3, #30
 8004a70:	051b      	lsls	r3, r3, #20
 8004a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a76:	e01b      	b.n	8004ab0 <HAL_ADC_ConfigChannel+0x858>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	60fb      	str	r3, [r7, #12]
  return result;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e003      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 021f 	and.w	r2, r3, #31
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3b1e      	subs	r3, #30
 8004aaa:	051b      	lsls	r3, r3, #20
 8004aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab0:	430b      	orrs	r3, r1
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	6892      	ldr	r2, [r2, #8]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	f7fe fe5e 	bl	8003778 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f280 80d7 	bge.w	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <HAL_ADC_ConfigChannel+0x88c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_ADC_ConfigChannel+0x882>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <HAL_ADC_ConfigChannel+0x890>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10a      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x898>
 8004ada:	4b04      	ldr	r3, [pc, #16]	; (8004aec <HAL_ADC_ConfigChannel+0x894>)
 8004adc:	e009      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x89a>
 8004ade:	bf00      	nop
 8004ae0:	47ff0000 	.word	0x47ff0000
 8004ae4:	40022000 	.word	0x40022000
 8004ae8:	40022100 	.word	0x40022100
 8004aec:	40022300 	.word	0x40022300
 8004af0:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_ADC_ConfigChannel+0xa30>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fcee 	bl	80034d4 <LL_ADC_GetCommonPathInternalCh>
 8004af8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a62      	ldr	r2, [pc, #392]	; (8004c8c <HAL_ADC_ConfigChannel+0xa34>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d004      	beq.n	8004b10 <HAL_ADC_ConfigChannel+0x8b8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a61      	ldr	r2, [pc, #388]	; (8004c90 <HAL_ADC_ConfigChannel+0xa38>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d10e      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x8d6>
 8004b10:	485e      	ldr	r0, [pc, #376]	; (8004c8c <HAL_ADC_ConfigChannel+0xa34>)
 8004b12:	f7fe ff07 	bl	8003924 <LL_ADC_IsEnabled>
 8004b16:	4604      	mov	r4, r0
 8004b18:	485d      	ldr	r0, [pc, #372]	; (8004c90 <HAL_ADC_ConfigChannel+0xa38>)
 8004b1a:	f7fe ff03 	bl	8003924 <LL_ADC_IsEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4323      	orrs	r3, r4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e008      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x8e8>
 8004b2e:	4859      	ldr	r0, [pc, #356]	; (8004c94 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b30:	f7fe fef8 	bl	8003924 <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8084 	beq.w	8004c4e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a53      	ldr	r2, [pc, #332]	; (8004c98 <HAL_ADC_ConfigChannel+0xa40>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d132      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x95e>
 8004b50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d12c      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a4c      	ldr	r2, [pc, #304]	; (8004c94 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	f040 8086 	bne.w	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a47      	ldr	r2, [pc, #284]	; (8004c8c <HAL_ADC_ConfigChannel+0xa34>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_ADC_ConfigChannel+0x924>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a46      	ldr	r2, [pc, #280]	; (8004c90 <HAL_ADC_ConfigChannel+0xa38>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x928>
 8004b7c:	4a47      	ldr	r2, [pc, #284]	; (8004c9c <HAL_ADC_ConfigChannel+0xa44>)
 8004b7e:	e000      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x92a>
 8004b80:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <HAL_ADC_ConfigChannel+0xa30>)
 8004b82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f7fe fc8e 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b92:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <HAL_ADC_ConfigChannel+0xa48>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	4a42      	ldr	r2, [pc, #264]	; (8004ca4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	099b      	lsrs	r3, r3, #6
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004ba6:	e002      	b.n	8004bae <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f9      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bb4:	e05e      	b.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3b      	ldr	r2, [pc, #236]	; (8004ca8 <HAL_ADC_ConfigChannel+0xa50>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d120      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x9aa>
 8004bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d11a      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d14e      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <HAL_ADC_ConfigChannel+0xa34>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_ADC_ConfigChannel+0x992>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_ADC_ConfigChannel+0xa38>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_ADC_ConfigChannel+0x996>
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <HAL_ADC_ConfigChannel+0xa44>)
 8004bec:	e000      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x998>
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <HAL_ADC_ConfigChannel+0xa30>)
 8004bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fc57 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c00:	e038      	b.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a29      	ldr	r2, [pc, #164]	; (8004cac <HAL_ADC_ConfigChannel+0xa54>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d133      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
 8004c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d12d      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d128      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a19      	ldr	r2, [pc, #100]	; (8004c8c <HAL_ADC_ConfigChannel+0xa34>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d004      	beq.n	8004c36 <HAL_ADC_ConfigChannel+0x9de>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a17      	ldr	r2, [pc, #92]	; (8004c90 <HAL_ADC_ConfigChannel+0xa38>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x9e2>
 8004c36:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_ADC_ConfigChannel+0xa44>)
 8004c38:	e000      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x9e4>
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <HAL_ADC_ConfigChannel+0xa30>)
 8004c3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe fc31 	bl	80034ae <LL_ADC_SetCommonPathInternalCh>
 8004c4c:	e012      	b.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	f043 0220 	orr.w	r2, r3, #32
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004c60:	e008      	b.n	8004c74 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c7c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	37e4      	adds	r7, #228	; 0xe4
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	58026300 	.word	0x58026300
 8004c8c:	40022000 	.word	0x40022000
 8004c90:	40022100 	.word	0x40022100
 8004c94:	58026000 	.word	0x58026000
 8004c98:	c7520000 	.word	0xc7520000
 8004c9c:	40022300 	.word	0x40022300
 8004ca0:	24000000 	.word	0x24000000
 8004ca4:	053e2d63 	.word	0x053e2d63
 8004ca8:	c3210000 	.word	0xc3210000
 8004cac:	cb840000 	.word	0xcb840000

08004cb0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	; (8004e6c <ADC_ConfigureBoostMode+0x1bc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d004      	beq.n	8004ccc <ADC_ConfigureBoostMode+0x1c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a6a      	ldr	r2, [pc, #424]	; (8004e70 <ADC_ConfigureBoostMode+0x1c0>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d109      	bne.n	8004ce0 <ADC_ConfigureBoostMode+0x30>
 8004ccc:	4b69      	ldr	r3, [pc, #420]	; (8004e74 <ADC_ConfigureBoostMode+0x1c4>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e008      	b.n	8004cf2 <ADC_ConfigureBoostMode+0x42>
 8004ce0:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <ADC_ConfigureBoostMode+0x1c8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01c      	beq.n	8004d30 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004cf6:	f004 faa3 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 8004cfa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d04:	d010      	beq.n	8004d28 <ADC_ConfigureBoostMode+0x78>
 8004d06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d0a:	d871      	bhi.n	8004df0 <ADC_ConfigureBoostMode+0x140>
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d10:	d002      	beq.n	8004d18 <ADC_ConfigureBoostMode+0x68>
 8004d12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d16:	d16b      	bne.n	8004df0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	60fb      	str	r3, [r7, #12]
        break;
 8004d26:	e066      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	089b      	lsrs	r3, r3, #2
 8004d2c:	60fb      	str	r3, [r7, #12]
        break;
 8004d2e:	e062      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d34:	f005 f9da 	bl	800a0ec <HAL_RCCEx_GetPeriphCLKFreq>
 8004d38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d42:	d051      	beq.n	8004de8 <ADC_ConfigureBoostMode+0x138>
 8004d44:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d48:	d854      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d4a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d4e:	d047      	beq.n	8004de0 <ADC_ConfigureBoostMode+0x130>
 8004d50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d54:	d84e      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d5a:	d03d      	beq.n	8004dd8 <ADC_ConfigureBoostMode+0x128>
 8004d5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d60:	d848      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d66:	d033      	beq.n	8004dd0 <ADC_ConfigureBoostMode+0x120>
 8004d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6c:	d842      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d72:	d029      	beq.n	8004dc8 <ADC_ConfigureBoostMode+0x118>
 8004d74:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d78:	d83c      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d7e:	d01a      	beq.n	8004db6 <ADC_ConfigureBoostMode+0x106>
 8004d80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d84:	d836      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d8a:	d014      	beq.n	8004db6 <ADC_ConfigureBoostMode+0x106>
 8004d8c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d90:	d830      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d00e      	beq.n	8004db6 <ADC_ConfigureBoostMode+0x106>
 8004d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9c:	d82a      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004d9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004da2:	d008      	beq.n	8004db6 <ADC_ConfigureBoostMode+0x106>
 8004da4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004da8:	d824      	bhi.n	8004df4 <ADC_ConfigureBoostMode+0x144>
 8004daa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dae:	d002      	beq.n	8004db6 <ADC_ConfigureBoostMode+0x106>
 8004db0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004db4:	d11e      	bne.n	8004df4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	0c9b      	lsrs	r3, r3, #18
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
        break;
 8004dc6:	e016      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
        break;
 8004dce:	e012      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	095b      	lsrs	r3, r3, #5
 8004dd4:	60fb      	str	r3, [r7, #12]
        break;
 8004dd6:	e00e      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	60fb      	str	r3, [r7, #12]
        break;
 8004dde:	e00a      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	09db      	lsrs	r3, r3, #7
 8004de4:	60fb      	str	r3, [r7, #12]
        break;
 8004de6:	e006      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	60fb      	str	r3, [r7, #12]
        break;
 8004dee:	e002      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
        break;
 8004df0:	bf00      	nop
 8004df2:	e000      	b.n	8004df6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004df4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <ADC_ConfigureBoostMode+0x1cc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d808      	bhi.n	8004e16 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e14:	e025      	b.n	8004e62 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <ADC_ConfigureBoostMode+0x1d0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d80a      	bhi.n	8004e34 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	e016      	b.n	8004e62 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <ADC_ConfigureBoostMode+0x1d4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d80a      	bhi.n	8004e52 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	609a      	str	r2, [r3, #8]
}
 8004e50:	e007      	b.n	8004e62 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e60:	609a      	str	r2, [r3, #8]
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40022100 	.word	0x40022100
 8004e74:	40022300 	.word	0x40022300
 8004e78:	58026300 	.word	0x58026300
 8004e7c:	005f5e10 	.word	0x005f5e10
 8004e80:	00bebc20 	.word	0x00bebc20
 8004e84:	017d7840 	.word	0x017d7840

08004e88 <LL_ADC_IsEnabled>:
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <LL_ADC_IsEnabled+0x18>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <LL_ADC_IsEnabled+0x1a>
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <LL_ADC_REG_IsConversionOngoing>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d101      	bne.n	8004ec6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b0a3      	sub	sp, #140	; 0x8c
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d101      	bne.n	8004f56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f52:	2302      	movs	r3, #2
 8004f54:	e0c1      	b.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f62:	2300      	movs	r3, #0
 8004f64:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a5e      	ldr	r2, [pc, #376]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d102      	bne.n	8004f76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f70:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e001      	b.n	8004f7a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e0a0      	b.n	80050da <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff ff87 	bl	8004eae <LL_ADC_REG_IsConversionOngoing>
 8004fa0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff ff80 	bl	8004eae <LL_ADC_REG_IsConversionOngoing>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f040 8081 	bne.w	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d17c      	bne.n	80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a48      	ldr	r2, [pc, #288]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d004      	beq.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a46      	ldr	r2, [pc, #280]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d101      	bne.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004fd2:	4b46      	ldr	r3, [pc, #280]	; (80050ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fd4:	e000      	b.n	8004fd8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004fd6:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fd8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d039      	beq.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004fe2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ff2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a39      	ldr	r2, [pc, #228]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10e      	bne.n	8005026 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005008:	4836      	ldr	r0, [pc, #216]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800500a:	f7ff ff3d 	bl	8004e88 <LL_ADC_IsEnabled>
 800500e:	4604      	mov	r4, r0
 8005010:	4835      	ldr	r0, [pc, #212]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005012:	f7ff ff39 	bl	8004e88 <LL_ADC_IsEnabled>
 8005016:	4603      	mov	r3, r0
 8005018:	4323      	orrs	r3, r4
 800501a:	2b00      	cmp	r3, #0
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	e008      	b.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005026:	4833      	ldr	r0, [pc, #204]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005028:	f7ff ff2e 	bl	8004e88 <LL_ADC_IsEnabled>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d047      	beq.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800503c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005042:	4013      	ands	r3, r2
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	6811      	ldr	r1, [r2, #0]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	6892      	ldr	r2, [r2, #8]
 800504c:	430a      	orrs	r2, r1
 800504e:	431a      	orrs	r2, r3
 8005050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005052:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005054:	e03a      	b.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800505e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005060:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10e      	bne.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005076:	481b      	ldr	r0, [pc, #108]	; (80050e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005078:	f7ff ff06 	bl	8004e88 <LL_ADC_IsEnabled>
 800507c:	4604      	mov	r4, r0
 800507e:	481a      	ldr	r0, [pc, #104]	; (80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005080:	f7ff ff02 	bl	8004e88 <LL_ADC_IsEnabled>
 8005084:	4603      	mov	r3, r0
 8005086:	4323      	orrs	r3, r4
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e008      	b.n	80050a6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005094:	4817      	ldr	r0, [pc, #92]	; (80050f4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005096:	f7ff fef7 	bl	8004e88 <LL_ADC_IsEnabled>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	bf0c      	ite	eq
 80050a0:	2301      	moveq	r3, #1
 80050a2:	2300      	movne	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d010      	beq.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050b6:	e009      	b.n	80050cc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050ca:	e000      	b.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050d6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80050da:	4618      	mov	r0, r3
 80050dc:	378c      	adds	r7, #140	; 0x8c
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd90      	pop	{r4, r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40022000 	.word	0x40022000
 80050e8:	40022100 	.word	0x40022100
 80050ec:	40022300 	.word	0x40022300
 80050f0:	58026300 	.word	0x58026300
 80050f4:	58026000 	.word	0x58026000
 80050f8:	fffff0e0 	.word	0xfffff0e0

080050fc <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e023      	b.n	8005156 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb fe00 	bl	8000d28 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800517c:	4013      	ands	r3, r2
 800517e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <__NVIC_SetPriorityGrouping+0x44>)
 800518a:	4313      	orrs	r3, r2
 800518c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800518e:	4a04      	ldr	r2, [pc, #16]	; (80051a0 <__NVIC_SetPriorityGrouping+0x40>)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	60d3      	str	r3, [r2, #12]
}
 8005194:	bf00      	nop
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	05fa0000 	.word	0x05fa0000

080051a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <__NVIC_GetPriorityGrouping+0x18>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	f003 0307 	and.w	r3, r3, #7
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	db0b      	blt.n	80051ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	f003 021f 	and.w	r2, r3, #31
 80051dc:	4907      	ldr	r1, [pc, #28]	; (80051fc <__NVIC_EnableIRQ+0x38>)
 80051de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	2001      	movs	r0, #1
 80051e6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	e000e100 	.word	0xe000e100

08005200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	6039      	str	r1, [r7, #0]
 800520a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800520c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005210:	2b00      	cmp	r3, #0
 8005212:	db0a      	blt.n	800522a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	b2da      	uxtb	r2, r3
 8005218:	490c      	ldr	r1, [pc, #48]	; (800524c <__NVIC_SetPriority+0x4c>)
 800521a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521e:	0112      	lsls	r2, r2, #4
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	440b      	add	r3, r1
 8005224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005228:	e00a      	b.n	8005240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4908      	ldr	r1, [pc, #32]	; (8005250 <__NVIC_SetPriority+0x50>)
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	3b04      	subs	r3, #4
 8005238:	0112      	lsls	r2, r2, #4
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	440b      	add	r3, r1
 800523e:	761a      	strb	r2, [r3, #24]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	e000e100 	.word	0xe000e100
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005254:	b480      	push	{r7}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f1c3 0307 	rsb	r3, r3, #7
 800526e:	2b04      	cmp	r3, #4
 8005270:	bf28      	it	cs
 8005272:	2304      	movcs	r3, #4
 8005274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3304      	adds	r3, #4
 800527a:	2b06      	cmp	r3, #6
 800527c:	d902      	bls.n	8005284 <NVIC_EncodePriority+0x30>
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3b03      	subs	r3, #3
 8005282:	e000      	b.n	8005286 <NVIC_EncodePriority+0x32>
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	f04f 32ff 	mov.w	r2, #4294967295
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	43da      	mvns	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	401a      	ands	r2, r3
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800529c:	f04f 31ff 	mov.w	r1, #4294967295
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	fa01 f303 	lsl.w	r3, r1, r3
 80052a6:	43d9      	mvns	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052ac:	4313      	orrs	r3, r2
         );
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052cc:	d301      	bcc.n	80052d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052ce:	2301      	movs	r3, #1
 80052d0:	e00f      	b.n	80052f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d2:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <SysTick_Config+0x40>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052da:	210f      	movs	r1, #15
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	f7ff ff8e 	bl	8005200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <SysTick_Config+0x40>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <SysTick_Config+0x40>)
 80052ec:	2207      	movs	r2, #7
 80052ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	e000e010 	.word	0xe000e010

08005300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff29 	bl	8005160 <__NVIC_SetPriorityGrouping>
}
 800530e:	bf00      	nop
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005324:	f7ff ff40 	bl	80051a8 <__NVIC_GetPriorityGrouping>
 8005328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6978      	ldr	r0, [r7, #20]
 8005330:	f7ff ff90 	bl	8005254 <NVIC_EncodePriority>
 8005334:	4602      	mov	r2, r0
 8005336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff ff5f 	bl	8005200 <__NVIC_SetPriority>
}
 8005342:	bf00      	nop
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	4603      	mov	r3, r0
 8005352:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005354:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff ff33 	bl	80051c4 <__NVIC_EnableIRQ>
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff ffa4 	bl	80052bc <SysTick_Config>
 8005374:	4603      	mov	r3, r0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005388:	f7fe f848 	bl	800341c <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e314      	b.n	80059c2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a66      	ldr	r2, [pc, #408]	; (8005538 <HAL_DMA_Init+0x1b8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d04a      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a65      	ldr	r2, [pc, #404]	; (800553c <HAL_DMA_Init+0x1bc>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d045      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a63      	ldr	r2, [pc, #396]	; (8005540 <HAL_DMA_Init+0x1c0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d040      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a62      	ldr	r2, [pc, #392]	; (8005544 <HAL_DMA_Init+0x1c4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d03b      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a60      	ldr	r2, [pc, #384]	; (8005548 <HAL_DMA_Init+0x1c8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d036      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5f      	ldr	r2, [pc, #380]	; (800554c <HAL_DMA_Init+0x1cc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d031      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5d      	ldr	r2, [pc, #372]	; (8005550 <HAL_DMA_Init+0x1d0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d02c      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a5c      	ldr	r2, [pc, #368]	; (8005554 <HAL_DMA_Init+0x1d4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d027      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a5a      	ldr	r2, [pc, #360]	; (8005558 <HAL_DMA_Init+0x1d8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d022      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a59      	ldr	r2, [pc, #356]	; (800555c <HAL_DMA_Init+0x1dc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d01d      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a57      	ldr	r2, [pc, #348]	; (8005560 <HAL_DMA_Init+0x1e0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d018      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a56      	ldr	r2, [pc, #344]	; (8005564 <HAL_DMA_Init+0x1e4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a54      	ldr	r2, [pc, #336]	; (8005568 <HAL_DMA_Init+0x1e8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00e      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a53      	ldr	r2, [pc, #332]	; (800556c <HAL_DMA_Init+0x1ec>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d009      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a51      	ldr	r2, [pc, #324]	; (8005570 <HAL_DMA_Init+0x1f0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d004      	beq.n	8005438 <HAL_DMA_Init+0xb8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a50      	ldr	r2, [pc, #320]	; (8005574 <HAL_DMA_Init+0x1f4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d101      	bne.n	800543c <HAL_DMA_Init+0xbc>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <HAL_DMA_Init+0xbe>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 813c 	beq.w	80056bc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a37      	ldr	r2, [pc, #220]	; (8005538 <HAL_DMA_Init+0x1b8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d04a      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a36      	ldr	r2, [pc, #216]	; (800553c <HAL_DMA_Init+0x1bc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d045      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a34      	ldr	r2, [pc, #208]	; (8005540 <HAL_DMA_Init+0x1c0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d040      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a33      	ldr	r2, [pc, #204]	; (8005544 <HAL_DMA_Init+0x1c4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d03b      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a31      	ldr	r2, [pc, #196]	; (8005548 <HAL_DMA_Init+0x1c8>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d036      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a30      	ldr	r2, [pc, #192]	; (800554c <HAL_DMA_Init+0x1cc>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d031      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2e      	ldr	r2, [pc, #184]	; (8005550 <HAL_DMA_Init+0x1d0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d02c      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <HAL_DMA_Init+0x1d4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d027      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <HAL_DMA_Init+0x1d8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d022      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a2a      	ldr	r2, [pc, #168]	; (800555c <HAL_DMA_Init+0x1dc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d01d      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a28      	ldr	r2, [pc, #160]	; (8005560 <HAL_DMA_Init+0x1e0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d018      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a27      	ldr	r2, [pc, #156]	; (8005564 <HAL_DMA_Init+0x1e4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a25      	ldr	r2, [pc, #148]	; (8005568 <HAL_DMA_Init+0x1e8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00e      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a24      	ldr	r2, [pc, #144]	; (800556c <HAL_DMA_Init+0x1ec>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a22      	ldr	r2, [pc, #136]	; (8005570 <HAL_DMA_Init+0x1f0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_DMA_Init+0x174>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a21      	ldr	r2, [pc, #132]	; (8005574 <HAL_DMA_Init+0x1f4>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d108      	bne.n	8005506 <HAL_DMA_Init+0x186>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e007      	b.n	8005516 <HAL_DMA_Init+0x196>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005516:	e02f      	b.n	8005578 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005518:	f7fd ff80 	bl	800341c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b05      	cmp	r3, #5
 8005524:	d928      	bls.n	8005578 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2203      	movs	r2, #3
 8005530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e244      	b.n	80059c2 <HAL_DMA_Init+0x642>
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1c8      	bne.n	8005518 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4b84      	ldr	r3, [pc, #528]	; (80057a4 <HAL_DMA_Init+0x424>)
 8005592:	4013      	ands	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800559e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d107      	bne.n	80055dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	4313      	orrs	r3, r2
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b28      	cmp	r3, #40	; 0x28
 80055e2:	d903      	bls.n	80055ec <HAL_DMA_Init+0x26c>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b2e      	cmp	r3, #46	; 0x2e
 80055ea:	d91f      	bls.n	800562c <HAL_DMA_Init+0x2ac>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b3e      	cmp	r3, #62	; 0x3e
 80055f2:	d903      	bls.n	80055fc <HAL_DMA_Init+0x27c>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b42      	cmp	r3, #66	; 0x42
 80055fa:	d917      	bls.n	800562c <HAL_DMA_Init+0x2ac>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b46      	cmp	r3, #70	; 0x46
 8005602:	d903      	bls.n	800560c <HAL_DMA_Init+0x28c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b48      	cmp	r3, #72	; 0x48
 800560a:	d90f      	bls.n	800562c <HAL_DMA_Init+0x2ac>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b4e      	cmp	r3, #78	; 0x4e
 8005612:	d903      	bls.n	800561c <HAL_DMA_Init+0x29c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b52      	cmp	r3, #82	; 0x52
 800561a:	d907      	bls.n	800562c <HAL_DMA_Init+0x2ac>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b73      	cmp	r3, #115	; 0x73
 8005622:	d905      	bls.n	8005630 <HAL_DMA_Init+0x2b0>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b77      	cmp	r3, #119	; 0x77
 800562a:	d801      	bhi.n	8005630 <HAL_DMA_Init+0x2b0>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_DMA_Init+0x2b2>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800563c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0307 	bic.w	r3, r3, #7
 8005654:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b04      	cmp	r3, #4
 8005666:	d117      	bne.n	8005698 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 f9b6 	bl	80069ec <DMA_CheckFifoParam>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2240      	movs	r2, #64	; 0x40
 800568a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e194      	b.n	80059c2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f001 f8f1 	bl	8006888 <DMA_CalcBaseAndBitshift>
 80056a6:	4603      	mov	r3, r0
 80056a8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	223f      	movs	r2, #63	; 0x3f
 80056b4:	409a      	lsls	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	609a      	str	r2, [r3, #8]
 80056ba:	e0ca      	b.n	8005852 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a39      	ldr	r2, [pc, #228]	; (80057a8 <HAL_DMA_Init+0x428>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d022      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a38      	ldr	r2, [pc, #224]	; (80057ac <HAL_DMA_Init+0x42c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d01d      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a36      	ldr	r2, [pc, #216]	; (80057b0 <HAL_DMA_Init+0x430>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d018      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a35      	ldr	r2, [pc, #212]	; (80057b4 <HAL_DMA_Init+0x434>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a33      	ldr	r2, [pc, #204]	; (80057b8 <HAL_DMA_Init+0x438>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00e      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a32      	ldr	r2, [pc, #200]	; (80057bc <HAL_DMA_Init+0x43c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d009      	beq.n	800570c <HAL_DMA_Init+0x38c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a30      	ldr	r2, [pc, #192]	; (80057c0 <HAL_DMA_Init+0x440>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d004      	beq.n	800570c <HAL_DMA_Init+0x38c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2f      	ldr	r2, [pc, #188]	; (80057c4 <HAL_DMA_Init+0x444>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d101      	bne.n	8005710 <HAL_DMA_Init+0x390>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_DMA_Init+0x392>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8094 	beq.w	8005840 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <HAL_DMA_Init+0x428>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d021      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a21      	ldr	r2, [pc, #132]	; (80057ac <HAL_DMA_Init+0x42c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01c      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1f      	ldr	r2, [pc, #124]	; (80057b0 <HAL_DMA_Init+0x430>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d017      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_DMA_Init+0x434>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d012      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <HAL_DMA_Init+0x438>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00d      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <HAL_DMA_Init+0x43c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d008      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <HAL_DMA_Init+0x440>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <HAL_DMA_Init+0x3e6>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_DMA_Init+0x444>)
 8005764:	4293      	cmp	r3, r2
 8005766:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <HAL_DMA_Init+0x448>)
 8005784:	4013      	ands	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b40      	cmp	r3, #64	; 0x40
 800578e:	d01d      	beq.n	80057cc <HAL_DMA_Init+0x44c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d102      	bne.n	800579e <HAL_DMA_Init+0x41e>
 8005798:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800579c:	e017      	b.n	80057ce <HAL_DMA_Init+0x44e>
 800579e:	2300      	movs	r3, #0
 80057a0:	e015      	b.n	80057ce <HAL_DMA_Init+0x44e>
 80057a2:	bf00      	nop
 80057a4:	fe10803f 	.word	0xfe10803f
 80057a8:	58025408 	.word	0x58025408
 80057ac:	5802541c 	.word	0x5802541c
 80057b0:	58025430 	.word	0x58025430
 80057b4:	58025444 	.word	0x58025444
 80057b8:	58025458 	.word	0x58025458
 80057bc:	5802546c 	.word	0x5802546c
 80057c0:	58025480 	.word	0x58025480
 80057c4:	58025494 	.word	0x58025494
 80057c8:	fffe000f 	.word	0xfffe000f
 80057cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68d2      	ldr	r2, [r2, #12]
 80057d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	4b6e      	ldr	r3, [pc, #440]	; (80059cc <HAL_DMA_Init+0x64c>)
 8005814:	4413      	add	r3, r2
 8005816:	4a6e      	ldr	r2, [pc, #440]	; (80059d0 <HAL_DMA_Init+0x650>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	091b      	lsrs	r3, r3, #4
 800581e:	009a      	lsls	r2, r3, #2
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f001 f82f 	bl	8006888 <DMA_CalcBaseAndBitshift>
 800582a:	4603      	mov	r3, r0
 800582c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005832:	f003 031f 	and.w	r3, r3, #31
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	e008      	b.n	8005852 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2240      	movs	r2, #64	; 0x40
 8005844:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2203      	movs	r2, #3
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e0b7      	b.n	80059c2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a5f      	ldr	r2, [pc, #380]	; (80059d4 <HAL_DMA_Init+0x654>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d072      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a5d      	ldr	r2, [pc, #372]	; (80059d8 <HAL_DMA_Init+0x658>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d06d      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a5c      	ldr	r2, [pc, #368]	; (80059dc <HAL_DMA_Init+0x65c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d068      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a5a      	ldr	r2, [pc, #360]	; (80059e0 <HAL_DMA_Init+0x660>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d063      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a59      	ldr	r2, [pc, #356]	; (80059e4 <HAL_DMA_Init+0x664>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d05e      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a57      	ldr	r2, [pc, #348]	; (80059e8 <HAL_DMA_Init+0x668>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d059      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a56      	ldr	r2, [pc, #344]	; (80059ec <HAL_DMA_Init+0x66c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d054      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a54      	ldr	r2, [pc, #336]	; (80059f0 <HAL_DMA_Init+0x670>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d04f      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a53      	ldr	r2, [pc, #332]	; (80059f4 <HAL_DMA_Init+0x674>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d04a      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a51      	ldr	r2, [pc, #324]	; (80059f8 <HAL_DMA_Init+0x678>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d045      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a50      	ldr	r2, [pc, #320]	; (80059fc <HAL_DMA_Init+0x67c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d040      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a4e      	ldr	r2, [pc, #312]	; (8005a00 <HAL_DMA_Init+0x680>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d03b      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a4d      	ldr	r2, [pc, #308]	; (8005a04 <HAL_DMA_Init+0x684>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d036      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <HAL_DMA_Init+0x688>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d031      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a4a      	ldr	r2, [pc, #296]	; (8005a0c <HAL_DMA_Init+0x68c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d02c      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a48      	ldr	r2, [pc, #288]	; (8005a10 <HAL_DMA_Init+0x690>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d027      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a47      	ldr	r2, [pc, #284]	; (8005a14 <HAL_DMA_Init+0x694>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d022      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a45      	ldr	r2, [pc, #276]	; (8005a18 <HAL_DMA_Init+0x698>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01d      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a44      	ldr	r2, [pc, #272]	; (8005a1c <HAL_DMA_Init+0x69c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d018      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a42      	ldr	r2, [pc, #264]	; (8005a20 <HAL_DMA_Init+0x6a0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a41      	ldr	r2, [pc, #260]	; (8005a24 <HAL_DMA_Init+0x6a4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <HAL_DMA_Init+0x6a8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a3e      	ldr	r2, [pc, #248]	; (8005a2c <HAL_DMA_Init+0x6ac>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_DMA_Init+0x5c2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a3c      	ldr	r2, [pc, #240]	; (8005a30 <HAL_DMA_Init+0x6b0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_DMA_Init+0x5c6>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_DMA_Init+0x5c8>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d032      	beq.n	80059b2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 f8c9 	bl	8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d102      	bne.n	8005960 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005974:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d010      	beq.n	80059a0 <HAL_DMA_Init+0x620>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b08      	cmp	r3, #8
 8005984:	d80c      	bhi.n	80059a0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 f946 	bl	8006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e008      	b.n	80059b2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	a7fdabf8 	.word	0xa7fdabf8
 80059d0:	cccccccd 	.word	0xcccccccd
 80059d4:	40020010 	.word	0x40020010
 80059d8:	40020028 	.word	0x40020028
 80059dc:	40020040 	.word	0x40020040
 80059e0:	40020058 	.word	0x40020058
 80059e4:	40020070 	.word	0x40020070
 80059e8:	40020088 	.word	0x40020088
 80059ec:	400200a0 	.word	0x400200a0
 80059f0:	400200b8 	.word	0x400200b8
 80059f4:	40020410 	.word	0x40020410
 80059f8:	40020428 	.word	0x40020428
 80059fc:	40020440 	.word	0x40020440
 8005a00:	40020458 	.word	0x40020458
 8005a04:	40020470 	.word	0x40020470
 8005a08:	40020488 	.word	0x40020488
 8005a0c:	400204a0 	.word	0x400204a0
 8005a10:	400204b8 	.word	0x400204b8
 8005a14:	58025408 	.word	0x58025408
 8005a18:	5802541c 	.word	0x5802541c
 8005a1c:	58025430 	.word	0x58025430
 8005a20:	58025444 	.word	0x58025444
 8005a24:	58025458 	.word	0x58025458
 8005a28:	5802546c 	.word	0x5802546c
 8005a2c:	58025480 	.word	0x58025480
 8005a30:	58025494 	.word	0x58025494

08005a34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a40:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <HAL_DMA_IRQHandler+0x1ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a67      	ldr	r2, [pc, #412]	; (8005be4 <HAL_DMA_IRQHandler+0x1b0>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0a9b      	lsrs	r3, r3, #10
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a52:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5f      	ldr	r2, [pc, #380]	; (8005be8 <HAL_DMA_IRQHandler+0x1b4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5d      	ldr	r2, [pc, #372]	; (8005bec <HAL_DMA_IRQHandler+0x1b8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5c      	ldr	r2, [pc, #368]	; (8005bf0 <HAL_DMA_IRQHandler+0x1bc>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5a      	ldr	r2, [pc, #360]	; (8005bf4 <HAL_DMA_IRQHandler+0x1c0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a59      	ldr	r2, [pc, #356]	; (8005bf8 <HAL_DMA_IRQHandler+0x1c4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a57      	ldr	r2, [pc, #348]	; (8005bfc <HAL_DMA_IRQHandler+0x1c8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a56      	ldr	r2, [pc, #344]	; (8005c00 <HAL_DMA_IRQHandler+0x1cc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a54      	ldr	r2, [pc, #336]	; (8005c04 <HAL_DMA_IRQHandler+0x1d0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a53      	ldr	r2, [pc, #332]	; (8005c08 <HAL_DMA_IRQHandler+0x1d4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a51      	ldr	r2, [pc, #324]	; (8005c0c <HAL_DMA_IRQHandler+0x1d8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a50      	ldr	r2, [pc, #320]	; (8005c10 <HAL_DMA_IRQHandler+0x1dc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a4e      	ldr	r2, [pc, #312]	; (8005c14 <HAL_DMA_IRQHandler+0x1e0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a4d      	ldr	r2, [pc, #308]	; (8005c18 <HAL_DMA_IRQHandler+0x1e4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a4b      	ldr	r2, [pc, #300]	; (8005c1c <HAL_DMA_IRQHandler+0x1e8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4a      	ldr	r2, [pc, #296]	; (8005c20 <HAL_DMA_IRQHandler+0x1ec>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xd2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a48      	ldr	r2, [pc, #288]	; (8005c24 <HAL_DMA_IRQHandler+0x1f0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <HAL_DMA_IRQHandler+0xd6>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_DMA_IRQHandler+0xd8>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 842b 	beq.w	8006368 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 80a2 	beq.w	8005c6c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a2e      	ldr	r2, [pc, #184]	; (8005be8 <HAL_DMA_IRQHandler+0x1b4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04a      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <HAL_DMA_IRQHandler+0x1b8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d045      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2b      	ldr	r2, [pc, #172]	; (8005bf0 <HAL_DMA_IRQHandler+0x1bc>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d040      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2a      	ldr	r2, [pc, #168]	; (8005bf4 <HAL_DMA_IRQHandler+0x1c0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d03b      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a28      	ldr	r2, [pc, #160]	; (8005bf8 <HAL_DMA_IRQHandler+0x1c4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d036      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a27      	ldr	r2, [pc, #156]	; (8005bfc <HAL_DMA_IRQHandler+0x1c8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d031      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a25      	ldr	r2, [pc, #148]	; (8005c00 <HAL_DMA_IRQHandler+0x1cc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02c      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a24      	ldr	r2, [pc, #144]	; (8005c04 <HAL_DMA_IRQHandler+0x1d0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d027      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a22      	ldr	r2, [pc, #136]	; (8005c08 <HAL_DMA_IRQHandler+0x1d4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <HAL_DMA_IRQHandler+0x1d8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a1f      	ldr	r2, [pc, #124]	; (8005c10 <HAL_DMA_IRQHandler+0x1dc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_DMA_IRQHandler+0x1e0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_DMA_IRQHandler+0x1e4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <HAL_DMA_IRQHandler+0x1e8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_DMA_IRQHandler+0x1ec>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x194>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_DMA_IRQHandler+0x1f0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d12f      	bne.n	8005c28 <HAL_DMA_IRQHandler+0x1f4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e02e      	b.n	8005c3c <HAL_DMA_IRQHandler+0x208>
 8005bde:	bf00      	nop
 8005be0:	24000000 	.word	0x24000000
 8005be4:	1b4e81b5 	.word	0x1b4e81b5
 8005be8:	40020010 	.word	0x40020010
 8005bec:	40020028 	.word	0x40020028
 8005bf0:	40020040 	.word	0x40020040
 8005bf4:	40020058 	.word	0x40020058
 8005bf8:	40020070 	.word	0x40020070
 8005bfc:	40020088 	.word	0x40020088
 8005c00:	400200a0 	.word	0x400200a0
 8005c04:	400200b8 	.word	0x400200b8
 8005c08:	40020410 	.word	0x40020410
 8005c0c:	40020428 	.word	0x40020428
 8005c10:	40020440 	.word	0x40020440
 8005c14:	40020458 	.word	0x40020458
 8005c18:	40020470 	.word	0x40020470
 8005c1c:	40020488 	.word	0x40020488
 8005c20:	400204a0 	.word	0x400204a0
 8005c24:	400204b8 	.word	0x400204b8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2208      	movs	r2, #8
 8005c5a:	409a      	lsls	r2, r3
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	f043 0201 	orr.w	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c70:	f003 031f 	and.w	r3, r3, #31
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d06e      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a69      	ldr	r2, [pc, #420]	; (8005e2c <HAL_DMA_IRQHandler+0x3f8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04a      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a67      	ldr	r2, [pc, #412]	; (8005e30 <HAL_DMA_IRQHandler+0x3fc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d045      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a66      	ldr	r2, [pc, #408]	; (8005e34 <HAL_DMA_IRQHandler+0x400>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d040      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a64      	ldr	r2, [pc, #400]	; (8005e38 <HAL_DMA_IRQHandler+0x404>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d03b      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a63      	ldr	r2, [pc, #396]	; (8005e3c <HAL_DMA_IRQHandler+0x408>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d036      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a61      	ldr	r2, [pc, #388]	; (8005e40 <HAL_DMA_IRQHandler+0x40c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d031      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a60      	ldr	r2, [pc, #384]	; (8005e44 <HAL_DMA_IRQHandler+0x410>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d02c      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a5e      	ldr	r2, [pc, #376]	; (8005e48 <HAL_DMA_IRQHandler+0x414>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d027      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a5d      	ldr	r2, [pc, #372]	; (8005e4c <HAL_DMA_IRQHandler+0x418>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d022      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5b      	ldr	r2, [pc, #364]	; (8005e50 <HAL_DMA_IRQHandler+0x41c>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d01d      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5a      	ldr	r2, [pc, #360]	; (8005e54 <HAL_DMA_IRQHandler+0x420>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d018      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a58      	ldr	r2, [pc, #352]	; (8005e58 <HAL_DMA_IRQHandler+0x424>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a57      	ldr	r2, [pc, #348]	; (8005e5c <HAL_DMA_IRQHandler+0x428>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00e      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a55      	ldr	r2, [pc, #340]	; (8005e60 <HAL_DMA_IRQHandler+0x42c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d009      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a54      	ldr	r2, [pc, #336]	; (8005e64 <HAL_DMA_IRQHandler+0x430>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x2ee>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a52      	ldr	r2, [pc, #328]	; (8005e68 <HAL_DMA_IRQHandler+0x434>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10a      	bne.n	8005d38 <HAL_DMA_IRQHandler+0x304>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf14      	ite	ne
 8005d30:	2301      	movne	r3, #1
 8005d32:	2300      	moveq	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	e003      	b.n	8005d40 <HAL_DMA_IRQHandler+0x30c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d58:	f043 0202 	orr.w	r2, r3, #2
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2204      	movs	r2, #4
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 808f 	beq.w	8005e94 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2c      	ldr	r2, [pc, #176]	; (8005e2c <HAL_DMA_IRQHandler+0x3f8>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d04a      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2a      	ldr	r2, [pc, #168]	; (8005e30 <HAL_DMA_IRQHandler+0x3fc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d045      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a29      	ldr	r2, [pc, #164]	; (8005e34 <HAL_DMA_IRQHandler+0x400>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d040      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a27      	ldr	r2, [pc, #156]	; (8005e38 <HAL_DMA_IRQHandler+0x404>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d03b      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <HAL_DMA_IRQHandler+0x408>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d036      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a24      	ldr	r2, [pc, #144]	; (8005e40 <HAL_DMA_IRQHandler+0x40c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d031      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <HAL_DMA_IRQHandler+0x410>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d02c      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <HAL_DMA_IRQHandler+0x414>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d027      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a20      	ldr	r2, [pc, #128]	; (8005e4c <HAL_DMA_IRQHandler+0x418>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_DMA_IRQHandler+0x41c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01d      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <HAL_DMA_IRQHandler+0x420>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_DMA_IRQHandler+0x424>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_DMA_IRQHandler+0x428>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_DMA_IRQHandler+0x42c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <HAL_DMA_IRQHandler+0x430>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_DMA_IRQHandler+0x3e2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_DMA_IRQHandler+0x434>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d12a      	bne.n	8005e6c <HAL_DMA_IRQHandler+0x438>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e023      	b.n	8005e74 <HAL_DMA_IRQHandler+0x440>
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2300      	movs	r3, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	2204      	movs	r2, #4
 8005e82:	409a      	lsls	r2, r3
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	2210      	movs	r2, #16
 8005e9e:	409a      	lsls	r2, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a6 	beq.w	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a85      	ldr	r2, [pc, #532]	; (80060c4 <HAL_DMA_IRQHandler+0x690>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d04a      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a83      	ldr	r2, [pc, #524]	; (80060c8 <HAL_DMA_IRQHandler+0x694>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d045      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a82      	ldr	r2, [pc, #520]	; (80060cc <HAL_DMA_IRQHandler+0x698>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d040      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a80      	ldr	r2, [pc, #512]	; (80060d0 <HAL_DMA_IRQHandler+0x69c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d03b      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a7f      	ldr	r2, [pc, #508]	; (80060d4 <HAL_DMA_IRQHandler+0x6a0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d036      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a7d      	ldr	r2, [pc, #500]	; (80060d8 <HAL_DMA_IRQHandler+0x6a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d031      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7c      	ldr	r2, [pc, #496]	; (80060dc <HAL_DMA_IRQHandler+0x6a8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d02c      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a7a      	ldr	r2, [pc, #488]	; (80060e0 <HAL_DMA_IRQHandler+0x6ac>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d027      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a79      	ldr	r2, [pc, #484]	; (80060e4 <HAL_DMA_IRQHandler+0x6b0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d022      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a77      	ldr	r2, [pc, #476]	; (80060e8 <HAL_DMA_IRQHandler+0x6b4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d01d      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a76      	ldr	r2, [pc, #472]	; (80060ec <HAL_DMA_IRQHandler+0x6b8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d018      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a74      	ldr	r2, [pc, #464]	; (80060f0 <HAL_DMA_IRQHandler+0x6bc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d013      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a73      	ldr	r2, [pc, #460]	; (80060f4 <HAL_DMA_IRQHandler+0x6c0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00e      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a71      	ldr	r2, [pc, #452]	; (80060f8 <HAL_DMA_IRQHandler+0x6c4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a70      	ldr	r2, [pc, #448]	; (80060fc <HAL_DMA_IRQHandler+0x6c8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d004      	beq.n	8005f4a <HAL_DMA_IRQHandler+0x516>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a6e      	ldr	r2, [pc, #440]	; (8006100 <HAL_DMA_IRQHandler+0x6cc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10a      	bne.n	8005f60 <HAL_DMA_IRQHandler+0x52c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bf14      	ite	ne
 8005f58:	2301      	movne	r3, #1
 8005f5a:	2300      	moveq	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e009      	b.n	8005f74 <HAL_DMA_IRQHandler+0x540>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d03e      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	2210      	movs	r2, #16
 8005f82:	409a      	lsls	r2, r3
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d018      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d108      	bne.n	8005fb6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d024      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
 8005fb4:	e01f      	b.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d01b      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	4798      	blx	r3
 8005fc6:	e016      	b.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0208 	bic.w	r2, r2, #8
 8005fe4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2220      	movs	r2, #32
 8006000:	409a      	lsls	r2, r3
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 8110 	beq.w	800622c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <HAL_DMA_IRQHandler+0x690>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_DMA_IRQHandler+0x694>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a29      	ldr	r2, [pc, #164]	; (80060cc <HAL_DMA_IRQHandler+0x698>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <HAL_DMA_IRQHandler+0x69c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a26      	ldr	r2, [pc, #152]	; (80060d4 <HAL_DMA_IRQHandler+0x6a0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a25      	ldr	r2, [pc, #148]	; (80060d8 <HAL_DMA_IRQHandler+0x6a4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_DMA_IRQHandler+0x6a8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_DMA_IRQHandler+0x6ac>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a20      	ldr	r2, [pc, #128]	; (80060e4 <HAL_DMA_IRQHandler+0x6b0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_DMA_IRQHandler+0x6b4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1d      	ldr	r2, [pc, #116]	; (80060ec <HAL_DMA_IRQHandler+0x6b8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_DMA_IRQHandler+0x6bc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1a      	ldr	r2, [pc, #104]	; (80060f4 <HAL_DMA_IRQHandler+0x6c0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <HAL_DMA_IRQHandler+0x6c4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a17      	ldr	r2, [pc, #92]	; (80060fc <HAL_DMA_IRQHandler+0x6c8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_IRQHandler+0x678>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_DMA_IRQHandler+0x6cc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d12b      	bne.n	8006104 <HAL_DMA_IRQHandler+0x6d0>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	e02a      	b.n	8006118 <HAL_DMA_IRQHandler+0x6e4>
 80060c2:	bf00      	nop
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	bf14      	ite	ne
 8006112:	2301      	movne	r3, #1
 8006114:	2300      	moveq	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8087 	beq.w	800622c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2220      	movs	r2, #32
 8006128:	409a      	lsls	r2, r3
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b04      	cmp	r3, #4
 8006138:	d139      	bne.n	80061ae <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0216 	bic.w	r2, r2, #22
 8006148:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006158:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d103      	bne.n	800616a <HAL_DMA_IRQHandler+0x736>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0208 	bic.w	r2, r2, #8
 8006178:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	223f      	movs	r2, #63	; 0x3f
 8006184:	409a      	lsls	r2, r3
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 834a 	beq.w	8006838 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
          }
          return;
 80061ac:	e344      	b.n	8006838 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d018      	beq.n	80061ee <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02c      	beq.n	800622c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
 80061da:	e027      	b.n	800622c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d023      	beq.n	800622c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	e01e      	b.n	800622c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0210 	bic.w	r2, r2, #16
 800620a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8306 	beq.w	8006842 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8088 	beq.w	8006354 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2204      	movs	r2, #4
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7a      	ldr	r2, [pc, #488]	; (800643c <HAL_DMA_IRQHandler+0xa08>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04a      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a79      	ldr	r2, [pc, #484]	; (8006440 <HAL_DMA_IRQHandler+0xa0c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d045      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a77      	ldr	r2, [pc, #476]	; (8006444 <HAL_DMA_IRQHandler+0xa10>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d040      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a76      	ldr	r2, [pc, #472]	; (8006448 <HAL_DMA_IRQHandler+0xa14>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d03b      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a74      	ldr	r2, [pc, #464]	; (800644c <HAL_DMA_IRQHandler+0xa18>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d036      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a73      	ldr	r2, [pc, #460]	; (8006450 <HAL_DMA_IRQHandler+0xa1c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d031      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a71      	ldr	r2, [pc, #452]	; (8006454 <HAL_DMA_IRQHandler+0xa20>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d02c      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a70      	ldr	r2, [pc, #448]	; (8006458 <HAL_DMA_IRQHandler+0xa24>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d027      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6e      	ldr	r2, [pc, #440]	; (800645c <HAL_DMA_IRQHandler+0xa28>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6d      	ldr	r2, [pc, #436]	; (8006460 <HAL_DMA_IRQHandler+0xa2c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d01d      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a6b      	ldr	r2, [pc, #428]	; (8006464 <HAL_DMA_IRQHandler+0xa30>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6a      	ldr	r2, [pc, #424]	; (8006468 <HAL_DMA_IRQHandler+0xa34>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a68      	ldr	r2, [pc, #416]	; (800646c <HAL_DMA_IRQHandler+0xa38>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a67      	ldr	r2, [pc, #412]	; (8006470 <HAL_DMA_IRQHandler+0xa3c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a65      	ldr	r2, [pc, #404]	; (8006474 <HAL_DMA_IRQHandler+0xa40>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_DMA_IRQHandler+0x8b8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a64      	ldr	r2, [pc, #400]	; (8006478 <HAL_DMA_IRQHandler+0xa44>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d108      	bne.n	80062fe <HAL_DMA_IRQHandler+0x8ca>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0201 	bic.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	e007      	b.n	800630e <HAL_DMA_IRQHandler+0x8da>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	429a      	cmp	r2, r3
 8006318:	d307      	bcc.n	800632a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f2      	bne.n	800630e <HAL_DMA_IRQHandler+0x8da>
 8006328:	e000      	b.n	800632c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800632a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2203      	movs	r2, #3
 800633e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006342:	e003      	b.n	800634c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8272 	beq.w	8006842 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	e26c      	b.n	8006842 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a43      	ldr	r2, [pc, #268]	; (800647c <HAL_DMA_IRQHandler+0xa48>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d022      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a42      	ldr	r2, [pc, #264]	; (8006480 <HAL_DMA_IRQHandler+0xa4c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d01d      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a40      	ldr	r2, [pc, #256]	; (8006484 <HAL_DMA_IRQHandler+0xa50>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d018      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a3f      	ldr	r2, [pc, #252]	; (8006488 <HAL_DMA_IRQHandler+0xa54>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a3d      	ldr	r2, [pc, #244]	; (800648c <HAL_DMA_IRQHandler+0xa58>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00e      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <HAL_DMA_IRQHandler+0xa5c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <HAL_DMA_IRQHandler+0xa60>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_DMA_IRQHandler+0x984>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a39      	ldr	r2, [pc, #228]	; (8006498 <HAL_DMA_IRQHandler+0xa64>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d101      	bne.n	80063bc <HAL_DMA_IRQHandler+0x988>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <HAL_DMA_IRQHandler+0x98a>
 80063bc:	2300      	movs	r3, #0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 823f 	beq.w	8006842 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2204      	movs	r2, #4
 80063d6:	409a      	lsls	r2, r3
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 80cd 	beq.w	800657c <HAL_DMA_IRQHandler+0xb48>
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 80c7 	beq.w	800657c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2204      	movs	r2, #4
 80063f8:	409a      	lsls	r2, r3
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d049      	beq.n	800649c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	2b00      	cmp	r3, #0
 8006418:	f000 8210 	beq.w	800683c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006424:	e20a      	b.n	800683c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8206 	beq.w	800683c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006438:	e200      	b.n	800683c <HAL_DMA_IRQHandler+0xe08>
 800643a:	bf00      	nop
 800643c:	40020010 	.word	0x40020010
 8006440:	40020028 	.word	0x40020028
 8006444:	40020040 	.word	0x40020040
 8006448:	40020058 	.word	0x40020058
 800644c:	40020070 	.word	0x40020070
 8006450:	40020088 	.word	0x40020088
 8006454:	400200a0 	.word	0x400200a0
 8006458:	400200b8 	.word	0x400200b8
 800645c:	40020410 	.word	0x40020410
 8006460:	40020428 	.word	0x40020428
 8006464:	40020440 	.word	0x40020440
 8006468:	40020458 	.word	0x40020458
 800646c:	40020470 	.word	0x40020470
 8006470:	40020488 	.word	0x40020488
 8006474:	400204a0 	.word	0x400204a0
 8006478:	400204b8 	.word	0x400204b8
 800647c:	58025408 	.word	0x58025408
 8006480:	5802541c 	.word	0x5802541c
 8006484:	58025430 	.word	0x58025430
 8006488:	58025444 	.word	0x58025444
 800648c:	58025458 	.word	0x58025458
 8006490:	5802546c 	.word	0x5802546c
 8006494:	58025480 	.word	0x58025480
 8006498:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f003 0320 	and.w	r3, r3, #32
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d160      	bne.n	8006568 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a7f      	ldr	r2, [pc, #508]	; (80066a8 <HAL_DMA_IRQHandler+0xc74>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d04a      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a7d      	ldr	r2, [pc, #500]	; (80066ac <HAL_DMA_IRQHandler+0xc78>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d045      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a7c      	ldr	r2, [pc, #496]	; (80066b0 <HAL_DMA_IRQHandler+0xc7c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d040      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a7a      	ldr	r2, [pc, #488]	; (80066b4 <HAL_DMA_IRQHandler+0xc80>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d03b      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a79      	ldr	r2, [pc, #484]	; (80066b8 <HAL_DMA_IRQHandler+0xc84>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d036      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a77      	ldr	r2, [pc, #476]	; (80066bc <HAL_DMA_IRQHandler+0xc88>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d031      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a76      	ldr	r2, [pc, #472]	; (80066c0 <HAL_DMA_IRQHandler+0xc8c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d02c      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a74      	ldr	r2, [pc, #464]	; (80066c4 <HAL_DMA_IRQHandler+0xc90>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d027      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a73      	ldr	r2, [pc, #460]	; (80066c8 <HAL_DMA_IRQHandler+0xc94>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a71      	ldr	r2, [pc, #452]	; (80066cc <HAL_DMA_IRQHandler+0xc98>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01d      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a70      	ldr	r2, [pc, #448]	; (80066d0 <HAL_DMA_IRQHandler+0xc9c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a6e      	ldr	r2, [pc, #440]	; (80066d4 <HAL_DMA_IRQHandler+0xca0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a6d      	ldr	r2, [pc, #436]	; (80066d8 <HAL_DMA_IRQHandler+0xca4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a6b      	ldr	r2, [pc, #428]	; (80066dc <HAL_DMA_IRQHandler+0xca8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a6a      	ldr	r2, [pc, #424]	; (80066e0 <HAL_DMA_IRQHandler+0xcac>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_DMA_IRQHandler+0xb12>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a68      	ldr	r2, [pc, #416]	; (80066e4 <HAL_DMA_IRQHandler+0xcb0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <HAL_DMA_IRQHandler+0xb24>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0208 	bic.w	r2, r2, #8
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e007      	b.n	8006568 <HAL_DMA_IRQHandler+0xb34>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 8165 	beq.w	800683c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800657a:	e15f      	b.n	800683c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2202      	movs	r2, #2
 8006586:	409a      	lsls	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	4013      	ands	r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 80c5 	beq.w	800671c <HAL_DMA_IRQHandler+0xce8>
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80bf 	beq.w	800671c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	2202      	movs	r2, #2
 80065a8:	409a      	lsls	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d018      	beq.n	80065ea <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 813a 	beq.w	8006840 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065d4:	e134      	b.n	8006840 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 8130 	beq.w	8006840 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e8:	e12a      	b.n	8006840 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8089 	bne.w	8006708 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a2b      	ldr	r2, [pc, #172]	; (80066a8 <HAL_DMA_IRQHandler+0xc74>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d04a      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a29      	ldr	r2, [pc, #164]	; (80066ac <HAL_DMA_IRQHandler+0xc78>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d045      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a28      	ldr	r2, [pc, #160]	; (80066b0 <HAL_DMA_IRQHandler+0xc7c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d040      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a26      	ldr	r2, [pc, #152]	; (80066b4 <HAL_DMA_IRQHandler+0xc80>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d03b      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a25      	ldr	r2, [pc, #148]	; (80066b8 <HAL_DMA_IRQHandler+0xc84>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d036      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a23      	ldr	r2, [pc, #140]	; (80066bc <HAL_DMA_IRQHandler+0xc88>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d031      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a22      	ldr	r2, [pc, #136]	; (80066c0 <HAL_DMA_IRQHandler+0xc8c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d02c      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <HAL_DMA_IRQHandler+0xc90>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d027      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1f      	ldr	r2, [pc, #124]	; (80066c8 <HAL_DMA_IRQHandler+0xc94>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d022      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1d      	ldr	r2, [pc, #116]	; (80066cc <HAL_DMA_IRQHandler+0xc98>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d01d      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_DMA_IRQHandler+0xc9c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d018      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a1a      	ldr	r2, [pc, #104]	; (80066d4 <HAL_DMA_IRQHandler+0xca0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <HAL_DMA_IRQHandler+0xca4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_DMA_IRQHandler+0xca8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a16      	ldr	r2, [pc, #88]	; (80066e0 <HAL_DMA_IRQHandler+0xcac>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_DMA_IRQHandler+0xc62>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <HAL_DMA_IRQHandler+0xcb0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d128      	bne.n	80066e8 <HAL_DMA_IRQHandler+0xcb4>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0214 	bic.w	r2, r2, #20
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e027      	b.n	80066f8 <HAL_DMA_IRQHandler+0xcc4>
 80066a8:	40020010 	.word	0x40020010
 80066ac:	40020028 	.word	0x40020028
 80066b0:	40020040 	.word	0x40020040
 80066b4:	40020058 	.word	0x40020058
 80066b8:	40020070 	.word	0x40020070
 80066bc:	40020088 	.word	0x40020088
 80066c0:	400200a0 	.word	0x400200a0
 80066c4:	400200b8 	.word	0x400200b8
 80066c8:	40020410 	.word	0x40020410
 80066cc:	40020428 	.word	0x40020428
 80066d0:	40020440 	.word	0x40020440
 80066d4:	40020458 	.word	0x40020458
 80066d8:	40020470 	.word	0x40020470
 80066dc:	40020488 	.word	0x40020488
 80066e0:	400204a0 	.word	0x400204a0
 80066e4:	400204b8 	.word	0x400204b8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 020a 	bic.w	r2, r2, #10
 80066f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8097 	beq.w	8006840 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800671a:	e091      	b.n	8006840 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2208      	movs	r2, #8
 8006726:	409a      	lsls	r2, r3
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 8088 	beq.w	8006842 <HAL_DMA_IRQHandler+0xe0e>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8082 	beq.w	8006842 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a41      	ldr	r2, [pc, #260]	; (8006848 <HAL_DMA_IRQHandler+0xe14>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d04a      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a3f      	ldr	r2, [pc, #252]	; (800684c <HAL_DMA_IRQHandler+0xe18>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d045      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a3e      	ldr	r2, [pc, #248]	; (8006850 <HAL_DMA_IRQHandler+0xe1c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d040      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a3c      	ldr	r2, [pc, #240]	; (8006854 <HAL_DMA_IRQHandler+0xe20>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d03b      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a3b      	ldr	r2, [pc, #236]	; (8006858 <HAL_DMA_IRQHandler+0xe24>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d036      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a39      	ldr	r2, [pc, #228]	; (800685c <HAL_DMA_IRQHandler+0xe28>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d031      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a38      	ldr	r2, [pc, #224]	; (8006860 <HAL_DMA_IRQHandler+0xe2c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d02c      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a36      	ldr	r2, [pc, #216]	; (8006864 <HAL_DMA_IRQHandler+0xe30>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d027      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a35      	ldr	r2, [pc, #212]	; (8006868 <HAL_DMA_IRQHandler+0xe34>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d022      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a33      	ldr	r2, [pc, #204]	; (800686c <HAL_DMA_IRQHandler+0xe38>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d01d      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a32      	ldr	r2, [pc, #200]	; (8006870 <HAL_DMA_IRQHandler+0xe3c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d018      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a30      	ldr	r2, [pc, #192]	; (8006874 <HAL_DMA_IRQHandler+0xe40>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d013      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a2f      	ldr	r2, [pc, #188]	; (8006878 <HAL_DMA_IRQHandler+0xe44>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d00e      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a2d      	ldr	r2, [pc, #180]	; (800687c <HAL_DMA_IRQHandler+0xe48>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d009      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a2c      	ldr	r2, [pc, #176]	; (8006880 <HAL_DMA_IRQHandler+0xe4c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d004      	beq.n	80067de <HAL_DMA_IRQHandler+0xdaa>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a2a      	ldr	r2, [pc, #168]	; (8006884 <HAL_DMA_IRQHandler+0xe50>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d108      	bne.n	80067f0 <HAL_DMA_IRQHandler+0xdbc>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 021c 	bic.w	r2, r2, #28
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e007      	b.n	8006800 <HAL_DMA_IRQHandler+0xdcc>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 020e 	bic.w	r2, r2, #14
 80067fe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	2201      	movs	r2, #1
 800680a:	409a      	lsls	r2, r3
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
 8006836:	e004      	b.n	8006842 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006838:	bf00      	nop
 800683a:	e002      	b.n	8006842 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006840:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40020010 	.word	0x40020010
 800684c:	40020028 	.word	0x40020028
 8006850:	40020040 	.word	0x40020040
 8006854:	40020058 	.word	0x40020058
 8006858:	40020070 	.word	0x40020070
 800685c:	40020088 	.word	0x40020088
 8006860:	400200a0 	.word	0x400200a0
 8006864:	400200b8 	.word	0x400200b8
 8006868:	40020410 	.word	0x40020410
 800686c:	40020428 	.word	0x40020428
 8006870:	40020440 	.word	0x40020440
 8006874:	40020458 	.word	0x40020458
 8006878:	40020470 	.word	0x40020470
 800687c:	40020488 	.word	0x40020488
 8006880:	400204a0 	.word	0x400204a0
 8006884:	400204b8 	.word	0x400204b8

08006888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a42      	ldr	r2, [pc, #264]	; (80069a0 <DMA_CalcBaseAndBitshift+0x118>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d04a      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a41      	ldr	r2, [pc, #260]	; (80069a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d045      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <DMA_CalcBaseAndBitshift+0x120>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d040      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a3e      	ldr	r2, [pc, #248]	; (80069ac <DMA_CalcBaseAndBitshift+0x124>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d03b      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <DMA_CalcBaseAndBitshift+0x128>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d036      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d031      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a39      	ldr	r2, [pc, #228]	; (80069b8 <DMA_CalcBaseAndBitshift+0x130>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d02c      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a38      	ldr	r2, [pc, #224]	; (80069bc <DMA_CalcBaseAndBitshift+0x134>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d027      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a36      	ldr	r2, [pc, #216]	; (80069c0 <DMA_CalcBaseAndBitshift+0x138>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d022      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a35      	ldr	r2, [pc, #212]	; (80069c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d01d      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a33      	ldr	r2, [pc, #204]	; (80069c8 <DMA_CalcBaseAndBitshift+0x140>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d018      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a32      	ldr	r2, [pc, #200]	; (80069cc <DMA_CalcBaseAndBitshift+0x144>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <DMA_CalcBaseAndBitshift+0x148>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00e      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d009      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <DMA_CalcBaseAndBitshift+0x150>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d004      	beq.n	8006930 <DMA_CalcBaseAndBitshift+0xa8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2c      	ldr	r2, [pc, #176]	; (80069dc <DMA_CalcBaseAndBitshift+0x154>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d101      	bne.n	8006934 <DMA_CalcBaseAndBitshift+0xac>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <DMA_CalcBaseAndBitshift+0xae>
 8006934:	2300      	movs	r3, #0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d024      	beq.n	8006984 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	3b10      	subs	r3, #16
 8006942:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <DMA_CalcBaseAndBitshift+0x158>)
 8006944:	fba2 2303 	umull	r2, r3, r2, r3
 8006948:	091b      	lsrs	r3, r3, #4
 800694a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006954:	5cd3      	ldrb	r3, [r2, r3]
 8006956:	461a      	mov	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d908      	bls.n	8006974 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	4b1f      	ldr	r3, [pc, #124]	; (80069e8 <DMA_CalcBaseAndBitshift+0x160>)
 800696a:	4013      	ands	r3, r2
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	; 0x58
 8006972:	e00d      	b.n	8006990 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	4b1b      	ldr	r3, [pc, #108]	; (80069e8 <DMA_CalcBaseAndBitshift+0x160>)
 800697c:	4013      	ands	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6593      	str	r3, [r2, #88]	; 0x58
 8006982:	e005      	b.n	8006990 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	40020010 	.word	0x40020010
 80069a4:	40020028 	.word	0x40020028
 80069a8:	40020040 	.word	0x40020040
 80069ac:	40020058 	.word	0x40020058
 80069b0:	40020070 	.word	0x40020070
 80069b4:	40020088 	.word	0x40020088
 80069b8:	400200a0 	.word	0x400200a0
 80069bc:	400200b8 	.word	0x400200b8
 80069c0:	40020410 	.word	0x40020410
 80069c4:	40020428 	.word	0x40020428
 80069c8:	40020440 	.word	0x40020440
 80069cc:	40020458 	.word	0x40020458
 80069d0:	40020470 	.word	0x40020470
 80069d4:	40020488 	.word	0x40020488
 80069d8:	400204a0 	.word	0x400204a0
 80069dc:	400204b8 	.word	0x400204b8
 80069e0:	aaaaaaab 	.word	0xaaaaaaab
 80069e4:	08019fc0 	.word	0x08019fc0
 80069e8:	fffffc00 	.word	0xfffffc00

080069ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d120      	bne.n	8006a42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d858      	bhi.n	8006aba <DMA_CheckFifoParam+0xce>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <DMA_CheckFifoParam+0x24>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a33 	.word	0x08006a33
 8006a18:	08006a21 	.word	0x08006a21
 8006a1c:	08006abb 	.word	0x08006abb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d048      	beq.n	8006abe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a30:	e045      	b.n	8006abe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a3a:	d142      	bne.n	8006ac2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a40:	e03f      	b.n	8006ac2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4a:	d123      	bne.n	8006a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d838      	bhi.n	8006ac6 <DMA_CheckFifoParam+0xda>
 8006a54:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <DMA_CheckFifoParam+0x70>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a73 	.word	0x08006a73
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08006a85 	.word	0x08006a85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
        break;
 8006a70:	e030      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d025      	beq.n	8006aca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a82:	e022      	b.n	8006aca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a8c:	d11f      	bne.n	8006ace <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a92:	e01c      	b.n	8006ace <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d902      	bls.n	8006aa2 <DMA_CheckFifoParam+0xb6>
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d003      	beq.n	8006aa8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006aa0:	e018      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
        break;
 8006aa6:	e015      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00e      	beq.n	8006ad2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab8:	e00b      	b.n	8006ad2 <DMA_CheckFifoParam+0xe6>
        break;
 8006aba:	bf00      	nop
 8006abc:	e00a      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e008      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e006      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <DMA_CheckFifoParam+0xe8>
    break;
 8006ad2:	bf00      	nop
    }
  }

  return status;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a38      	ldr	r2, [pc, #224]	; (8006bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d022      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a36      	ldr	r2, [pc, #216]	; (8006bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01d      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a35      	ldr	r2, [pc, #212]	; (8006be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d018      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a33      	ldr	r2, [pc, #204]	; (8006be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a32      	ldr	r2, [pc, #200]	; (8006be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00e      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a30      	ldr	r2, [pc, #192]	; (8006bec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a2f      	ldr	r2, [pc, #188]	; (8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2d      	ldr	r2, [pc, #180]	; (8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d101      	bne.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b42:	2301      	movs	r3, #1
 8006b44:	e000      	b.n	8006b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b46:	2300      	movs	r3, #0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d01a      	beq.n	8006b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	3b08      	subs	r3, #8
 8006b54:	4a28      	ldr	r2, [pc, #160]	; (8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b56:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5a:	091b      	lsrs	r3, r3, #4
 8006b5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	461a      	mov	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a24      	ldr	r2, [pc, #144]	; (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f003 031f 	and.w	r3, r3, #31
 8006b78:	2201      	movs	r2, #1
 8006b7a:	409a      	lsls	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b80:	e024      	b.n	8006bcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3b10      	subs	r3, #16
 8006b8a:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	091b      	lsrs	r3, r3, #4
 8006b92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4a1c      	ldr	r2, [pc, #112]	; (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d806      	bhi.n	8006baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d902      	bls.n	8006baa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bbc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	409a      	lsls	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	58025408 	.word	0x58025408
 8006bdc:	5802541c 	.word	0x5802541c
 8006be0:	58025430 	.word	0x58025430
 8006be4:	58025444 	.word	0x58025444
 8006be8:	58025458 	.word	0x58025458
 8006bec:	5802546c 	.word	0x5802546c
 8006bf0:	58025480 	.word	0x58025480
 8006bf4:	58025494 	.word	0x58025494
 8006bf8:	cccccccd 	.word	0xcccccccd
 8006bfc:	16009600 	.word	0x16009600
 8006c00:	58025880 	.word	0x58025880
 8006c04:	aaaaaaab 	.word	0xaaaaaaab
 8006c08:	400204b8 	.word	0x400204b8
 8006c0c:	4002040f 	.word	0x4002040f
 8006c10:	10008200 	.word	0x10008200
 8006c14:	40020880 	.word	0x40020880

08006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d04a      	beq.n	8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d847      	bhi.n	8006cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a25      	ldr	r2, [pc, #148]	; (8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d022      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a24      	ldr	r2, [pc, #144]	; (8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d01d      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a22      	ldr	r2, [pc, #136]	; (8006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d018      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a21      	ldr	r2, [pc, #132]	; (8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00e      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d004      	beq.n	8006c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1b      	ldr	r2, [pc, #108]	; (8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d101      	bne.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e000      	b.n	8006c8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4b17      	ldr	r3, [pc, #92]	; (8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	461a      	mov	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ca0:	671a      	str	r2, [r3, #112]	; 0x70
 8006ca2:	e009      	b.n	8006cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	461a      	mov	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cb6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	58025408 	.word	0x58025408
 8006cd4:	5802541c 	.word	0x5802541c
 8006cd8:	58025430 	.word	0x58025430
 8006cdc:	58025444 	.word	0x58025444
 8006ce0:	58025458 	.word	0x58025458
 8006ce4:	5802546c 	.word	0x5802546c
 8006ce8:	58025480 	.word	0x58025480
 8006cec:	58025494 	.word	0x58025494
 8006cf0:	1600963f 	.word	0x1600963f
 8006cf4:	58025940 	.word	0x58025940
 8006cf8:	1000823f 	.word	0x1000823f
 8006cfc:	40020940 	.word	0x40020940

08006d00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0cf      	b.n	8006eb2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2223      	movs	r2, #35	; 0x23
 8006d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fa f89d 	bl	8000e64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d2a:	4b64      	ldr	r3, [pc, #400]	; (8006ebc <HAL_ETH_Init+0x1bc>)
 8006d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d30:	4a62      	ldr	r2, [pc, #392]	; (8006ebc <HAL_ETH_Init+0x1bc>)
 8006d32:	f043 0302 	orr.w	r3, r3, #2
 8006d36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d3a:	4b60      	ldr	r3, [pc, #384]	; (8006ebc <HAL_ETH_Init+0x1bc>)
 8006d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7a1b      	ldrb	r3, [r3, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006d50:	2000      	movs	r0, #0
 8006d52:	f7fc fb6f 	bl	8003434 <HAL_SYSCFG_ETHInterfaceSelect>
 8006d56:	e003      	b.n	8006d60 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006d58:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006d5c:	f7fc fb6a 	bl	8003434 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006d60:	4b57      	ldr	r3, [pc, #348]	; (8006ec0 <HAL_ETH_Init+0x1c0>)
 8006d62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d7c:	f7fc fb4e 	bl	800341c <HAL_GetTick>
 8006d80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006d82:	e011      	b.n	8006da8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006d84:	f7fc fb4a 	bl	800341c <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006d92:	d909      	bls.n	8006da8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2204      	movs	r2, #4
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	22e0      	movs	r2, #224	; 0xe0
 8006da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e084      	b.n	8006eb2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e4      	bne.n	8006d84 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f886 	bl	8006ecc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006dc0:	f002 fa3e 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	4a3f      	ldr	r2, [pc, #252]	; (8006ec4 <HAL_ETH_Init+0x1c4>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	0c9a      	lsrs	r2, r3, #18
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3a01      	subs	r2, #1
 8006dd4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fa71 	bl	80072c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006dea:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006df6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dfa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d009      	beq.n	8006e1e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	22e0      	movs	r2, #224	; 0xe0
 8006e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e049      	b.n	8006eb2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006e2a:	4b27      	ldr	r3, [pc, #156]	; (8006ec8 <HAL_ETH_Init+0x1c8>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6952      	ldr	r2, [r2, #20]
 8006e32:	0051      	lsls	r1, r2, #1
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e3e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fad9 	bl	80073fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fb1f 	bl	800748c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	3305      	adds	r3, #5
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	4619      	mov	r1, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	3303      	adds	r3, #3
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	061a      	lsls	r2, r3, #24
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	3302      	adds	r3, #2
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	3301      	adds	r3, #1
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006e8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006e9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006e9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	58000400 	.word	0x58000400
 8006ec4:	431bde83 	.word	0x431bde83
 8006ec8:	ffff8001 	.word	0xffff8001

08006ecc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006ee6:	f002 f9ab 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 8006eea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	4a1e      	ldr	r2, [pc, #120]	; (8006f68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d908      	bls.n	8006f06 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	4a1d      	ldr	r2, [pc, #116]	; (8006f6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d804      	bhi.n	8006f06 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e027      	b.n	8006f56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d908      	bls.n	8006f20 <HAL_ETH_SetMDIOClockRange+0x54>
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d204      	bcs.n	8006f20 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	e01a      	b.n	8006f56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d303      	bcc.n	8006f30 <HAL_ETH_SetMDIOClockRange+0x64>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a12      	ldr	r2, [pc, #72]	; (8006f74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d911      	bls.n	8006f54 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a10      	ldr	r2, [pc, #64]	; (8006f74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d908      	bls.n	8006f4a <HAL_ETH_SetMDIOClockRange+0x7e>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4a0f      	ldr	r2, [pc, #60]	; (8006f78 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d804      	bhi.n	8006f4a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e005      	b.n	8006f56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	e000      	b.n	8006f56 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006f54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	01312cff 	.word	0x01312cff
 8006f6c:	02160ebf 	.word	0x02160ebf
 8006f70:	03938700 	.word	0x03938700
 8006f74:	05f5e0ff 	.word	0x05f5e0ff
 8006f78:	08f0d17f 	.word	0x08f0d17f

08006f7c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006f8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	791b      	ldrb	r3, [r3, #4]
 8006f94:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006f96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	7b1b      	ldrb	r3, [r3, #12]
 8006f9c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006f9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	7b5b      	ldrb	r3, [r3, #13]
 8006fa4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	7b9b      	ldrb	r3, [r3, #14]
 8006fac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006fae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	7bdb      	ldrb	r3, [r3, #15]
 8006fb4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006fb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	7c12      	ldrb	r2, [r2, #16]
 8006fbc:	2a00      	cmp	r2, #0
 8006fbe:	d102      	bne.n	8006fc6 <ETH_SetMACConfig+0x4a>
 8006fc0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006fc4:	e000      	b.n	8006fc8 <ETH_SetMACConfig+0x4c>
 8006fc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006fc8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	7c52      	ldrb	r2, [r2, #17]
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	d102      	bne.n	8006fd8 <ETH_SetMACConfig+0x5c>
 8006fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fd6:	e000      	b.n	8006fda <ETH_SetMACConfig+0x5e>
 8006fd8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	7c9b      	ldrb	r3, [r3, #18]
 8006fe0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006fe2:	431a      	orrs	r2, r3
               macconf->Speed |
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006fe8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006fee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	7f1b      	ldrb	r3, [r3, #28]
 8006ff4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006ff6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	7f5b      	ldrb	r3, [r3, #29]
 8006ffc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006ffe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	7f92      	ldrb	r2, [r2, #30]
 8007004:	2a00      	cmp	r2, #0
 8007006:	d102      	bne.n	800700e <ETH_SetMACConfig+0x92>
 8007008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800700c:	e000      	b.n	8007010 <ETH_SetMACConfig+0x94>
 800700e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007010:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	7fdb      	ldrb	r3, [r3, #31]
 8007016:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007018:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007020:	2a00      	cmp	r2, #0
 8007022:	d102      	bne.n	800702a <ETH_SetMACConfig+0xae>
 8007024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007028:	e000      	b.n	800702c <ETH_SetMACConfig+0xb0>
 800702a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800702c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007032:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800703a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800703c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	4b56      	ldr	r3, [pc, #344]	; (80071a8 <ETH_SetMACConfig+0x22c>)
 800704e:	4013      	ands	r3, r2
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6812      	ldr	r2, [r2, #0]
 8007054:	68f9      	ldr	r1, [r7, #12]
 8007056:	430b      	orrs	r3, r1
 8007058:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007066:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007068:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007070:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007072:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800707a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800707c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007084:	2a00      	cmp	r2, #0
 8007086:	d102      	bne.n	800708e <ETH_SetMACConfig+0x112>
 8007088:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800708c:	e000      	b.n	8007090 <ETH_SetMACConfig+0x114>
 800708e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007090:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	4b42      	ldr	r3, [pc, #264]	; (80071ac <ETH_SetMACConfig+0x230>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6812      	ldr	r2, [r2, #0]
 80070a8:	68f9      	ldr	r1, [r7, #12]
 80070aa:	430b      	orrs	r3, r1
 80070ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <ETH_SetMACConfig+0x234>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	68f9      	ldr	r1, [r7, #12]
 80070ce:	430b      	orrs	r3, r1
 80070d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80070d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80070de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	d101      	bne.n	80070ee <ETH_SetMACConfig+0x172>
 80070ea:	2280      	movs	r2, #128	; 0x80
 80070ec:	e000      	b.n	80070f0 <ETH_SetMACConfig+0x174>
 80070ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80070f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007102:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007106:	4013      	ands	r3, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	68f9      	ldr	r1, [r7, #12]
 800710e:	430b      	orrs	r3, r1
 8007110:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007118:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007120:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	f023 0103 	bic.w	r1, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	430a      	orrs	r2, r1
 800713a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007146:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007162:	2a00      	cmp	r2, #0
 8007164:	d101      	bne.n	800716a <ETH_SetMACConfig+0x1ee>
 8007166:	2240      	movs	r2, #64	; 0x40
 8007168:	e000      	b.n	800716c <ETH_SetMACConfig+0x1f0>
 800716a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800716c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007174:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007176:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800717e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800718c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	430a      	orrs	r2, r1
 8007198:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	00048083 	.word	0x00048083
 80071ac:	c0f88000 	.word	0xc0f88000
 80071b0:	fffffef0 	.word	0xfffffef0

080071b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b38      	ldr	r3, [pc, #224]	; (80072ac <ETH_SetDMAConfig+0xf8>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	6811      	ldr	r1, [r2, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	791b      	ldrb	r3, [r3, #4]
 80071e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80071e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	7b1b      	ldrb	r3, [r3, #12]
 80071ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b2c      	ldr	r3, [pc, #176]	; (80072b0 <ETH_SetDMAConfig+0xfc>)
 80071fe:	4013      	ands	r3, r2
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	68f9      	ldr	r1, [r7, #12]
 8007206:	430b      	orrs	r3, r1
 8007208:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800720c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	7b5b      	ldrb	r3, [r3, #13]
 8007212:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007224:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007228:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <ETH_SetDMAConfig+0x100>)
 800722a:	4013      	ands	r3, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	430b      	orrs	r3, r1
 8007234:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007238:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007246:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	7f5b      	ldrb	r3, [r3, #29]
 800724c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800725e:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <ETH_SetDMAConfig+0x104>)
 8007260:	4013      	ands	r3, r2
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6812      	ldr	r2, [r2, #0]
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	430b      	orrs	r3, r1
 800726a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800726e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	7f1b      	ldrb	r3, [r3, #28]
 8007276:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007288:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800728c:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <ETH_SetDMAConfig+0x108>)
 800728e:	4013      	ands	r3, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	68f9      	ldr	r1, [r7, #12]
 8007296:	430b      	orrs	r3, r1
 8007298:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800729c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	ffff87fd 	.word	0xffff87fd
 80072b0:	ffff2ffe 	.word	0xffff2ffe
 80072b4:	fffec000 	.word	0xfffec000
 80072b8:	ffc0efef 	.word	0xffc0efef
 80072bc:	7fc0ffff 	.word	0x7fc0ffff

080072c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b0a4      	sub	sp, #144	; 0x90
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80072ce:	2300      	movs	r3, #0
 80072d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80072d2:	2300      	movs	r3, #0
 80072d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80072de:	2301      	movs	r3, #1
 80072e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80072fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007300:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007302:	2300      	movs	r3, #0
 8007304:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007308:	2300      	movs	r3, #0
 800730a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800730c:	2300      	movs	r3, #0
 800730e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007312:	2300      	movs	r3, #0
 8007314:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007318:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007324:	2300      	movs	r3, #0
 8007326:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800733a:	2300      	movs	r3, #0
 800733c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800733e:	2300      	movs	r3, #0
 8007340:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007342:	2300      	movs	r3, #0
 8007344:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007346:	2300      	movs	r3, #0
 8007348:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007358:	2320      	movs	r3, #32
 800735a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800736a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007374:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800737c:	2302      	movs	r3, #2
 800737e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007388:	2300      	movs	r3, #0
 800738a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800738e:	2300      	movs	r3, #0
 8007390:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007394:	2301      	movs	r3, #1
 8007396:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800739a:	2300      	movs	r3, #0
 800739c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800739e:	2301      	movs	r3, #1
 80073a0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80073a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f7ff fde6 	bl	8006f7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80073b4:	2301      	movs	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80073ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80073d0:	2300      	movs	r3, #0
 80073d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80073d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80073d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80073e0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80073e6:	f107 0308 	add.w	r3, r7, #8
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff fee1 	bl	80071b4 <ETH_SetDMAConfig>
}
 80073f2:	bf00      	nop
 80073f4:	3790      	adds	r7, #144	; 0x90
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007402:	2300      	movs	r3, #0
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e01d      	b.n	8007444 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68d9      	ldr	r1, [r3, #12]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	440b      	add	r3, r1
 8007418:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007432:	68b9      	ldr	r1, [r7, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	3206      	adds	r2, #6
 800743a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d9de      	bls.n	8007408 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007458:	461a      	mov	r2, r3
 800745a:	2303      	movs	r3, #3
 800745c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68da      	ldr	r2, [r3, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800746c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800747c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007494:	2300      	movs	r3, #0
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e023      	b.n	80074e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6919      	ldr	r1, [r3, #16]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4613      	mov	r3, r2
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	4413      	add	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	440b      	add	r3, r1
 80074aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2200      	movs	r2, #0
 80074b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	3212      	adds	r2, #18
 80074d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d9d8      	bls.n	800749a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800750e:	461a      	mov	r2, r3
 8007510:	2303      	movs	r3, #3
 8007512:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007536:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b098      	sub	sp, #96	; 0x60
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007550:	4a84      	ldr	r2, [pc, #528]	; (8007764 <HAL_FDCAN_Init+0x21c>)
 8007552:	f107 030c 	add.w	r3, r7, #12
 8007556:	4611      	mov	r1, r2
 8007558:	224c      	movs	r2, #76	; 0x4c
 800755a:	4618      	mov	r0, r3
 800755c:	f012 f8f8 	bl	8019750 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e1c6      	b.n	80078f8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a7e      	ldr	r2, [pc, #504]	; (8007768 <HAL_FDCAN_Init+0x220>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d106      	bne.n	8007582 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800757c:	461a      	mov	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7f9 fdfa 	bl	8001190 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0210 	bic.w	r2, r2, #16
 80075aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075ac:	f7fb ff36 	bl	800341c <HAL_GetTick>
 80075b0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80075b2:	e014      	b.n	80075de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80075b4:	f7fb ff32 	bl	800341c <HAL_GetTick>
 80075b8:	4602      	mov	r2, r0
 80075ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	2b0a      	cmp	r3, #10
 80075c0:	d90d      	bls.n	80075de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075c8:	f043 0201 	orr.w	r2, r3, #1
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2203      	movs	r2, #3
 80075d6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e18c      	b.n	80078f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d0e3      	beq.n	80075b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0201 	orr.w	r2, r2, #1
 80075fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075fc:	f7fb ff0e 	bl	800341c <HAL_GetTick>
 8007600:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007602:	e014      	b.n	800762e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007604:	f7fb ff0a 	bl	800341c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b0a      	cmp	r3, #10
 8007610:	d90d      	bls.n	800762e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007618:	f043 0201 	orr.w	r2, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2203      	movs	r2, #3
 8007626:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e164      	b.n	80078f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0e3      	beq.n	8007604 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0202 	orr.w	r2, r2, #2
 800764a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7c1b      	ldrb	r3, [r3, #16]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d108      	bne.n	8007666 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007662:	619a      	str	r2, [r3, #24]
 8007664:	e007      	b.n	8007676 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007674:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7c5b      	ldrb	r3, [r3, #17]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d108      	bne.n	8007690 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800768c:	619a      	str	r2, [r3, #24]
 800768e:	e007      	b.n	80076a0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800769e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	7c9b      	ldrb	r3, [r3, #18]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d108      	bne.n	80076ba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076b6:	619a      	str	r2, [r3, #24]
 80076b8:	e007      	b.n	80076ca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076c8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699a      	ldr	r2, [r3, #24]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80076ee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0210 	bic.w	r2, r2, #16
 80076fe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d108      	bne.n	800771a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0204 	orr.w	r2, r2, #4
 8007716:	619a      	str	r2, [r3, #24]
 8007718:	e030      	b.n	800777c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02c      	beq.n	800777c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d020      	beq.n	800776c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699a      	ldr	r2, [r3, #24]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007738:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f042 0210 	orr.w	r2, r2, #16
 8007748:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d114      	bne.n	800777c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699a      	ldr	r2, [r3, #24]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f042 0220 	orr.w	r2, r2, #32
 8007760:	619a      	str	r2, [r3, #24]
 8007762:	e00b      	b.n	800777c <HAL_FDCAN_Init+0x234>
 8007764:	08019a4c 	.word	0x08019a4c
 8007768:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0220 	orr.w	r2, r2, #32
 800777a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	3b01      	subs	r3, #1
 8007782:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	3b01      	subs	r3, #1
 800778a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800778c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007794:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	3b01      	subs	r3, #1
 800779e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b0:	d115      	bne.n	80077de <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	3b01      	subs	r3, #1
 80077be:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077c0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	3b01      	subs	r3, #1
 80077c8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80077ca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	3b01      	subs	r3, #1
 80077d4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80077da:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077dc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007804:	4413      	add	r3, r2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d011      	beq.n	800782e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007812:	f023 0107 	bic.w	r1, r3, #7
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	3360      	adds	r3, #96	; 0x60
 800781e:	443b      	add	r3, r7
 8007820:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d011      	beq.n	800785a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800783e:	f023 0107 	bic.w	r1, r3, #7
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	3360      	adds	r3, #96	; 0x60
 800784a:	443b      	add	r3, r7
 800784c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785e:	2b00      	cmp	r3, #0
 8007860:	d012      	beq.n	8007888 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800786a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	3360      	adds	r3, #96	; 0x60
 8007876:	443b      	add	r3, r7
 8007878:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800787c:	011a      	lsls	r2, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	2b00      	cmp	r3, #0
 800788e:	d012      	beq.n	80078b6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007898:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3360      	adds	r3, #96	; 0x60
 80078a4:	443b      	add	r3, r7
 80078a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078aa:	021a      	lsls	r2, r3, #8
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a11      	ldr	r2, [pc, #68]	; (8007900 <HAL_FDCAN_Init+0x3b8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d107      	bne.n	80078d0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f022 0203 	bic.w	r2, r2, #3
 80078ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f80b 	bl	8007904 <FDCAN_CalcultateRamBlockAddresses>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80078f4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3760      	adds	r7, #96	; 0x60
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	4000a000 	.word	0x4000a000

08007904 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800791a:	4ba7      	ldr	r3, [pc, #668]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800791c:	4013      	ands	r3, r2
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	0091      	lsls	r1, r2, #2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	430b      	orrs	r3, r1
 8007928:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007934:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	041a      	lsls	r2, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	4413      	add	r3, r2
 8007950:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800795a:	4b97      	ldr	r3, [pc, #604]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800795c:	4013      	ands	r3, r2
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	0091      	lsls	r1, r2, #2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	430b      	orrs	r3, r1
 8007968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007974:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	041a      	lsls	r2, r3, #16
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	4413      	add	r3, r2
 8007992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800799c:	4b86      	ldr	r3, [pc, #536]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800799e:	4013      	ands	r3, r2
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	0091      	lsls	r1, r2, #2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	430b      	orrs	r3, r1
 80079aa:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079b6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	041a      	lsls	r2, r3, #16
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079d2:	fb02 f303 	mul.w	r3, r2, r3
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079e4:	4b74      	ldr	r3, [pc, #464]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	0091      	lsls	r1, r2, #2
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	430b      	orrs	r3, r1
 80079f2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079fe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a06:	041a      	lsls	r2, r3, #16
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a1a:	fb02 f303 	mul.w	r3, r2, r3
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4413      	add	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a2c:	4b62      	ldr	r3, [pc, #392]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	0091      	lsls	r1, r2, #2
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a58:	4b57      	ldr	r3, [pc, #348]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	0091      	lsls	r1, r2, #2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	430b      	orrs	r3, r1
 8007a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a72:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	041a      	lsls	r2, r3, #16
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	4413      	add	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a9a:	4b47      	ldr	r3, [pc, #284]	; (8007bb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	0091      	lsls	r1, r2, #2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ab4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abc:	041a      	lsls	r2, r3, #16
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ad0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad8:	061a      	lsls	r2, r3, #24
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ae8:	4b34      	ldr	r3, [pc, #208]	; (8007bbc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007aea:	4413      	add	r3, r2
 8007aec:	009a      	lsls	r2, r3, #2
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	441a      	add	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b36:	fb01 f303 	mul.w	r3, r1, r3
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b4a:	6879      	ldr	r1, [r7, #4]
 8007b4c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	441a      	add	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b7e:	fb01 f303 	mul.w	r3, r1, r3
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bae:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d915      	bls.n	8007be0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007bb4:	e006      	b.n	8007bc4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007bb6:	bf00      	nop
 8007bb8:	ffff0003 	.word	0xffff0003
 8007bbc:	10002b00 	.word	0x10002b00
 8007bc0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bca:	f043 0220 	orr.w	r2, r3, #32
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e010      	b.n	8007c02 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e005      	b.n	8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d3f3      	bcc.n	8007be8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop

08007c10 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e033      	b.n	8007c8a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 fb88 	bl	800134c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f854 	bl	8007cf0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f822 	bl	8007c92 <FMAC_Reset>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10c      	bne.n	8007c6e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c58:	f043 0210 	orr.w	r2, r3, #16
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	22a0      	movs	r2, #160	; 0xa0
 8007c64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	73fb      	strb	r3, [r7, #15]
 8007c6c:	e008      	b.n	8007c80 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c9a:	f7fb fbbf 	bl	800341c <HAL_GetTick>
 8007c9e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007cae:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007cb0:	e00f      	b.n	8007cd2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007cb2:	f7fb fbb3 	bl	800341c <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007cc0:	d907      	bls.n	8007cd2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e00a      	b.n	8007ce8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e8      	bne.n	8007cb2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f807 	bl	8007d0c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f81b 	bl	8007d3a <FMAC_ResetOutputStateAndDataPointers>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d76:	4b86      	ldr	r3, [pc, #536]	; (8007f90 <HAL_GPIO_Init+0x228>)
 8007d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d7a:	e18c      	b.n	8008096 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	2101      	movs	r1, #1
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	fa01 f303 	lsl.w	r3, r1, r3
 8007d88:	4013      	ands	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 817e 	beq.w	8008090 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f003 0303 	and.w	r3, r3, #3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d005      	beq.n	8007dac <HAL_GPIO_Init+0x44>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d130      	bne.n	8007e0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	2203      	movs	r2, #3
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007de2:	2201      	movs	r2, #1
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dea:	43db      	mvns	r3, r3
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	4013      	ands	r3, r2
 8007df0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	091b      	lsrs	r3, r3, #4
 8007df8:	f003 0201 	and.w	r2, r3, #1
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	69ba      	ldr	r2, [r7, #24]
 8007e0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d017      	beq.n	8007e4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	2203      	movs	r2, #3
 8007e26:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f003 0303 	and.w	r3, r3, #3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d123      	bne.n	8007e9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	08da      	lsrs	r2, r3, #3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3208      	adds	r2, #8
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	220f      	movs	r2, #15
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	43db      	mvns	r3, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4013      	ands	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	08da      	lsrs	r2, r3, #3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3208      	adds	r2, #8
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f003 0203 	and.w	r2, r3, #3
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 80d8 	beq.w	8008090 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ee0:	4b2c      	ldr	r3, [pc, #176]	; (8007f94 <HAL_GPIO_Init+0x22c>)
 8007ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ee6:	4a2b      	ldr	r2, [pc, #172]	; (8007f94 <HAL_GPIO_Init+0x22c>)
 8007ee8:	f043 0302 	orr.w	r3, r3, #2
 8007eec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007ef0:	4b28      	ldr	r3, [pc, #160]	; (8007f94 <HAL_GPIO_Init+0x22c>)
 8007ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ef6:	f003 0302 	and.w	r3, r3, #2
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007efe:	4a26      	ldr	r2, [pc, #152]	; (8007f98 <HAL_GPIO_Init+0x230>)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	089b      	lsrs	r3, r3, #2
 8007f04:	3302      	adds	r3, #2
 8007f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	220f      	movs	r2, #15
 8007f16:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1a:	43db      	mvns	r3, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a1d      	ldr	r2, [pc, #116]	; (8007f9c <HAL_GPIO_Init+0x234>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d04a      	beq.n	8007fc0 <HAL_GPIO_Init+0x258>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_GPIO_Init+0x238>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d02b      	beq.n	8007f8a <HAL_GPIO_Init+0x222>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1b      	ldr	r2, [pc, #108]	; (8007fa4 <HAL_GPIO_Init+0x23c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d025      	beq.n	8007f86 <HAL_GPIO_Init+0x21e>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <HAL_GPIO_Init+0x240>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d01f      	beq.n	8007f82 <HAL_GPIO_Init+0x21a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a19      	ldr	r2, [pc, #100]	; (8007fac <HAL_GPIO_Init+0x244>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d019      	beq.n	8007f7e <HAL_GPIO_Init+0x216>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <HAL_GPIO_Init+0x248>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d013      	beq.n	8007f7a <HAL_GPIO_Init+0x212>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a17      	ldr	r2, [pc, #92]	; (8007fb4 <HAL_GPIO_Init+0x24c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00d      	beq.n	8007f76 <HAL_GPIO_Init+0x20e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a16      	ldr	r2, [pc, #88]	; (8007fb8 <HAL_GPIO_Init+0x250>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <HAL_GPIO_Init+0x20a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	; (8007fbc <HAL_GPIO_Init+0x254>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d101      	bne.n	8007f6e <HAL_GPIO_Init+0x206>
 8007f6a:	2309      	movs	r3, #9
 8007f6c:	e029      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f6e:	230a      	movs	r3, #10
 8007f70:	e027      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f72:	2307      	movs	r3, #7
 8007f74:	e025      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f76:	2306      	movs	r3, #6
 8007f78:	e023      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f7a:	2305      	movs	r3, #5
 8007f7c:	e021      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f7e:	2304      	movs	r3, #4
 8007f80:	e01f      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f82:	2303      	movs	r3, #3
 8007f84:	e01d      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e01b      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e019      	b.n	8007fc2 <HAL_GPIO_Init+0x25a>
 8007f8e:	bf00      	nop
 8007f90:	58000080 	.word	0x58000080
 8007f94:	58024400 	.word	0x58024400
 8007f98:	58000400 	.word	0x58000400
 8007f9c:	58020000 	.word	0x58020000
 8007fa0:	58020400 	.word	0x58020400
 8007fa4:	58020800 	.word	0x58020800
 8007fa8:	58020c00 	.word	0x58020c00
 8007fac:	58021000 	.word	0x58021000
 8007fb0:	58021400 	.word	0x58021400
 8007fb4:	58021800 	.word	0x58021800
 8007fb8:	58021c00 	.word	0x58021c00
 8007fbc:	58022400 	.word	0x58022400
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	f002 0203 	and.w	r2, r2, #3
 8007fc8:	0092      	lsls	r2, r2, #2
 8007fca:	4093      	lsls	r3, r2
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fd2:	4938      	ldr	r1, [pc, #224]	; (80080b4 <HAL_GPIO_Init+0x34c>)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	089b      	lsrs	r3, r3, #2
 8007fd8:	3302      	adds	r3, #2
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	43db      	mvns	r3, r3
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800800e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	43db      	mvns	r3, r3
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	4013      	ands	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	4313      	orrs	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	43db      	mvns	r3, r3
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	4013      	ands	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	69ba      	ldr	r2, [r7, #24]
 8008064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	43db      	mvns	r3, r3
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	4013      	ands	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	69ba      	ldr	r2, [r7, #24]
 800808e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	3301      	adds	r3, #1
 8008094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	fa22 f303 	lsr.w	r3, r2, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f47f ae6b 	bne.w	8007d7c <HAL_GPIO_Init+0x14>
  }
}
 80080a6:	bf00      	nop
 80080a8:	bf00      	nop
 80080aa:	3724      	adds	r7, #36	; 0x24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	58000400 	.word	0x58000400

080080b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	4603      	mov	r3, r0
 80080c0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080d6:	88fb      	ldrh	r3, [r7, #6]
 80080d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	4618      	mov	r0, r3
 80080e0:	f006 ffda 	bl	800f098 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80080e4:	bf00      	nop
 80080e6:	3708      	adds	r7, #8
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e097      	b.n	800822e <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d106      	bne.n	800811e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7f9 f9bb 	bl	8001494 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d004      	beq.n	8008140 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813e:	d103      	bne.n	8008148 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 031e 	bic.w	r3, r3, #30
 8008146:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008150:	4293      	cmp	r3, r2
 8008152:	d003      	beq.n	800815c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4b38      	ldr	r3, [pc, #224]	; (8008238 <HAL_LPTIM_Init+0x14c>)
 8008158:	4013      	ands	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4b37      	ldr	r3, [pc, #220]	; (800823c <HAL_LPTIM_Init+0x150>)
 8008160:	4013      	ands	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800816c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008172:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008178:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800817e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d107      	bne.n	800819e <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008196:	4313      	orrs	r3, r2
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d004      	beq.n	80081b0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081ae:	d107      	bne.n	80081c0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80081b8:	4313      	orrs	r3, r2
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00a      	beq.n	80081e2 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80081d4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80081da:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a14      	ldr	r2, [pc, #80]	; (8008240 <HAL_LPTIM_Init+0x154>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d004      	beq.n	80081fe <HAL_LPTIM_Init+0x112>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a12      	ldr	r2, [pc, #72]	; (8008244 <HAL_LPTIM_Init+0x158>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d108      	bne.n	8008210 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	625a      	str	r2, [r3, #36]	; 0x24
 800820e:	e009      	b.n	8008224 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <HAL_LPTIM_Init+0x15c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d104      	bne.n	8008224 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008222:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	ffff1f3f 	.word	0xffff1f3f
 800823c:	ff19f1fe 	.word	0xff19f1fe
 8008240:	40002400 	.word	0x40002400
 8008244:	58002400 	.word	0x58002400
 8008248:	58002800 	.word	0x58002800

0800824c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b01      	cmp	r3, #1
 8008260:	d10d      	bne.n	800827e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b01      	cmp	r3, #1
 800826e:	d106      	bne.n	800827e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2201      	movs	r2, #1
 8008276:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f882 	bl	8008382 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b02      	cmp	r3, #2
 800828a:	d10d      	bne.n	80082a8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b02      	cmp	r3, #2
 8008298:	d106      	bne.n	80082a8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2202      	movs	r2, #2
 80082a0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f877 	bl	8008396 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d10d      	bne.n	80082d2 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d106      	bne.n	80082d2 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2204      	movs	r2, #4
 80082ca:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f86c 	bl	80083aa <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d10d      	bne.n	80082fc <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 0308 	and.w	r3, r3, #8
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d106      	bne.n	80082fc <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2208      	movs	r2, #8
 80082f4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f861 	bl	80083be <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0310 	and.w	r3, r3, #16
 8008306:	2b10      	cmp	r3, #16
 8008308:	d10d      	bne.n	8008326 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0310 	and.w	r3, r3, #16
 8008314:	2b10      	cmp	r3, #16
 8008316:	d106      	bne.n	8008326 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2210      	movs	r2, #16
 800831e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f856 	bl	80083d2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d10d      	bne.n	8008350 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	d106      	bne.n	8008350 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2220      	movs	r2, #32
 8008348:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f84b 	bl	80083e6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d10d      	bne.n	800837a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d106      	bne.n	800837a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f840 	bl	80083fa <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
	...

08008410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008418:	4b19      	ldr	r3, [pc, #100]	; (8008480 <HAL_PWREx_ConfigSupply+0x70>)
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b04      	cmp	r3, #4
 8008422:	d00a      	beq.n	800843a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008424:	4b16      	ldr	r3, [pc, #88]	; (8008480 <HAL_PWREx_ConfigSupply+0x70>)
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d001      	beq.n	8008436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e01f      	b.n	8008476 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e01d      	b.n	8008476 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800843a:	4b11      	ldr	r3, [pc, #68]	; (8008480 <HAL_PWREx_ConfigSupply+0x70>)
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	f023 0207 	bic.w	r2, r3, #7
 8008442:	490f      	ldr	r1, [pc, #60]	; (8008480 <HAL_PWREx_ConfigSupply+0x70>)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4313      	orrs	r3, r2
 8008448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800844a:	f7fa ffe7 	bl	800341c <HAL_GetTick>
 800844e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008450:	e009      	b.n	8008466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008452:	f7fa ffe3 	bl	800341c <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008460:	d901      	bls.n	8008466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e007      	b.n	8008476 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008466:	4b06      	ldr	r3, [pc, #24]	; (8008480 <HAL_PWREx_ConfigSupply+0x70>)
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800846e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008472:	d1ee      	bne.n	8008452 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	58024800 	.word	0x58024800

08008484 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	; 0x30
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e39d      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 8087 	beq.w	80085b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084a4:	4b88      	ldr	r3, [pc, #544]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084ae:	4b86      	ldr	r3, [pc, #536]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80084b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80084b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b6:	2b10      	cmp	r3, #16
 80084b8:	d007      	beq.n	80084ca <HAL_RCC_OscConfig+0x46>
 80084ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084bc:	2b18      	cmp	r3, #24
 80084be:	d110      	bne.n	80084e2 <HAL_RCC_OscConfig+0x5e>
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d10b      	bne.n	80084e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084ca:	4b7f      	ldr	r3, [pc, #508]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d06c      	beq.n	80085b0 <HAL_RCC_OscConfig+0x12c>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d168      	bne.n	80085b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e377      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084ea:	d106      	bne.n	80084fa <HAL_RCC_OscConfig+0x76>
 80084ec:	4b76      	ldr	r3, [pc, #472]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a75      	ldr	r2, [pc, #468]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80084f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	e02e      	b.n	8008558 <HAL_RCC_OscConfig+0xd4>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10c      	bne.n	800851c <HAL_RCC_OscConfig+0x98>
 8008502:	4b71      	ldr	r3, [pc, #452]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a70      	ldr	r2, [pc, #448]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	4b6e      	ldr	r3, [pc, #440]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a6d      	ldr	r2, [pc, #436]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008514:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	e01d      	b.n	8008558 <HAL_RCC_OscConfig+0xd4>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008524:	d10c      	bne.n	8008540 <HAL_RCC_OscConfig+0xbc>
 8008526:	4b68      	ldr	r3, [pc, #416]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a67      	ldr	r2, [pc, #412]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800852c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008530:	6013      	str	r3, [r2, #0]
 8008532:	4b65      	ldr	r3, [pc, #404]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a64      	ldr	r2, [pc, #400]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853c:	6013      	str	r3, [r2, #0]
 800853e:	e00b      	b.n	8008558 <HAL_RCC_OscConfig+0xd4>
 8008540:	4b61      	ldr	r3, [pc, #388]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a60      	ldr	r2, [pc, #384]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854a:	6013      	str	r3, [r2, #0]
 800854c:	4b5e      	ldr	r3, [pc, #376]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a5d      	ldr	r2, [pc, #372]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d013      	beq.n	8008588 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fa ff5c 	bl	800341c <HAL_GetTick>
 8008564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008568:	f7fa ff58 	bl	800341c <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b64      	cmp	r3, #100	; 0x64
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e32b      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800857a:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f0      	beq.n	8008568 <HAL_RCC_OscConfig+0xe4>
 8008586:	e014      	b.n	80085b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008588:	f7fa ff48 	bl	800341c <HAL_GetTick>
 800858c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800858e:	e008      	b.n	80085a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008590:	f7fa ff44 	bl	800341c <HAL_GetTick>
 8008594:	4602      	mov	r2, r0
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	2b64      	cmp	r3, #100	; 0x64
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e317      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80085a2:	4b49      	ldr	r3, [pc, #292]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1f0      	bne.n	8008590 <HAL_RCC_OscConfig+0x10c>
 80085ae:	e000      	b.n	80085b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 808c 	beq.w	80086d8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085c0:	4b41      	ldr	r3, [pc, #260]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80085ca:	4b3f      	ldr	r3, [pc, #252]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <HAL_RCC_OscConfig+0x162>
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	2b18      	cmp	r3, #24
 80085da:	d137      	bne.n	800864c <HAL_RCC_OscConfig+0x1c8>
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d132      	bne.n	800864c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085e6:	4b38      	ldr	r3, [pc, #224]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0304 	and.w	r3, r3, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d005      	beq.n	80085fe <HAL_RCC_OscConfig+0x17a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e2e9      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085fe:	4b32      	ldr	r3, [pc, #200]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f023 0219 	bic.w	r2, r3, #25
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	492f      	ldr	r1, [pc, #188]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800860c:	4313      	orrs	r3, r2
 800860e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008610:	f7fa ff04 	bl	800341c <HAL_GetTick>
 8008614:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008618:	f7fa ff00 	bl	800341c <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b02      	cmp	r3, #2
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e2d3      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800862a:	4b27      	ldr	r3, [pc, #156]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008636:	4b24      	ldr	r3, [pc, #144]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	061b      	lsls	r3, r3, #24
 8008644:	4920      	ldr	r1, [pc, #128]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008646:	4313      	orrs	r3, r2
 8008648:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800864a:	e045      	b.n	80086d8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d026      	beq.n	80086a2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f023 0219 	bic.w	r2, r3, #25
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	4919      	ldr	r1, [pc, #100]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008662:	4313      	orrs	r3, r2
 8008664:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008666:	f7fa fed9 	bl	800341c <HAL_GetTick>
 800866a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800866c:	e008      	b.n	8008680 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800866e:	f7fa fed5 	bl	800341c <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e2a8      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f0      	beq.n	800866e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	490b      	ldr	r1, [pc, #44]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 800869c:	4313      	orrs	r3, r2
 800869e:	604b      	str	r3, [r1, #4]
 80086a0:	e01a      	b.n	80086d8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <HAL_RCC_OscConfig+0x244>)
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ae:	f7fa feb5 	bl	800341c <HAL_GetTick>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086b4:	e00a      	b.n	80086cc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086b6:	f7fa feb1 	bl	800341c <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d903      	bls.n	80086cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e284      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
 80086c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80086cc:	4b96      	ldr	r3, [pc, #600]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1ee      	bne.n	80086b6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d06a      	beq.n	80087ba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086e4:	4b90      	ldr	r3, [pc, #576]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80086ee:	4b8e      	ldr	r3, [pc, #568]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80086f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d007      	beq.n	800870a <HAL_RCC_OscConfig+0x286>
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b18      	cmp	r3, #24
 80086fe:	d11b      	bne.n	8008738 <HAL_RCC_OscConfig+0x2b4>
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	2b01      	cmp	r3, #1
 8008708:	d116      	bne.n	8008738 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800870a:	4b87      	ldr	r3, [pc, #540]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008712:	2b00      	cmp	r3, #0
 8008714:	d005      	beq.n	8008722 <HAL_RCC_OscConfig+0x29e>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	2b80      	cmp	r3, #128	; 0x80
 800871c:	d001      	beq.n	8008722 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e257      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008722:	4b81      	ldr	r3, [pc, #516]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	497d      	ldr	r1, [pc, #500]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008732:	4313      	orrs	r3, r2
 8008734:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008736:	e040      	b.n	80087ba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d023      	beq.n	8008788 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008740:	4b79      	ldr	r3, [pc, #484]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a78      	ldr	r2, [pc, #480]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800874c:	f7fa fe66 	bl	800341c <HAL_GetTick>
 8008750:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008752:	e008      	b.n	8008766 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008754:	f7fa fe62 	bl	800341c <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e235      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008766:	4b70      	ldr	r3, [pc, #448]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008772:	4b6d      	ldr	r3, [pc, #436]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	061b      	lsls	r3, r3, #24
 8008780:	4969      	ldr	r1, [pc, #420]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008782:	4313      	orrs	r3, r2
 8008784:	60cb      	str	r3, [r1, #12]
 8008786:	e018      	b.n	80087ba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008788:	4b67      	ldr	r3, [pc, #412]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a66      	ldr	r2, [pc, #408]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800878e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008794:	f7fa fe42 	bl	800341c <HAL_GetTick>
 8008798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800879c:	f7fa fe3e 	bl	800341c <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e211      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087ae:	4b5e      	ldr	r3, [pc, #376]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f0      	bne.n	800879c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d036      	beq.n	8008834 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d019      	beq.n	8008802 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ce:	4b56      	ldr	r3, [pc, #344]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80087d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d2:	4a55      	ldr	r2, [pc, #340]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087da:	f7fa fe1f 	bl	800341c <HAL_GetTick>
 80087de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087e0:	e008      	b.n	80087f4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e2:	f7fa fe1b 	bl	800341c <HAL_GetTick>
 80087e6:	4602      	mov	r2, r0
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d901      	bls.n	80087f4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e1ee      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087f4:	4b4c      	ldr	r3, [pc, #304]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80087f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f8:	f003 0302 	and.w	r3, r3, #2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d0f0      	beq.n	80087e2 <HAL_RCC_OscConfig+0x35e>
 8008800:	e018      	b.n	8008834 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008802:	4b49      	ldr	r3, [pc, #292]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008806:	4a48      	ldr	r2, [pc, #288]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880e:	f7fa fe05 	bl	800341c <HAL_GetTick>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008814:	e008      	b.n	8008828 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008816:	f7fa fe01 	bl	800341c <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e1d4      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008828:	4b3f      	ldr	r3, [pc, #252]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800882a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882c:	f003 0302 	and.w	r3, r3, #2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1f0      	bne.n	8008816 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b00      	cmp	r3, #0
 800883e:	d036      	beq.n	80088ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d019      	beq.n	800887c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008848:	4b37      	ldr	r3, [pc, #220]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a36      	ldr	r2, [pc, #216]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800884e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008852:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008854:	f7fa fde2 	bl	800341c <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800885c:	f7fa fdde 	bl	800341c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e1b1      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800886e:	4b2e      	ldr	r3, [pc, #184]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0f0      	beq.n	800885c <HAL_RCC_OscConfig+0x3d8>
 800887a:	e018      	b.n	80088ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800887c:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a29      	ldr	r2, [pc, #164]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008886:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008888:	f7fa fdc8 	bl	800341c <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800888e:	e008      	b.n	80088a2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008890:	f7fa fdc4 	bl	800341c <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d901      	bls.n	80088a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e197      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088a2:	4b21      	ldr	r3, [pc, #132]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1f0      	bne.n	8008890 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f000 8086 	beq.w	80089c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088bc:	4b1b      	ldr	r3, [pc, #108]	; (800892c <HAL_RCC_OscConfig+0x4a8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_RCC_OscConfig+0x4a8>)
 80088c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088c8:	f7fa fda8 	bl	800341c <HAL_GetTick>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088ce:	e008      	b.n	80088e2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088d0:	f7fa fda4 	bl	800341c <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b64      	cmp	r3, #100	; 0x64
 80088dc:	d901      	bls.n	80088e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e177      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088e2:	4b12      	ldr	r3, [pc, #72]	; (800892c <HAL_RCC_OscConfig+0x4a8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0f0      	beq.n	80088d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d106      	bne.n	8008904 <HAL_RCC_OscConfig+0x480>
 80088f6:	4b0c      	ldr	r3, [pc, #48]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a0b      	ldr	r2, [pc, #44]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 80088fc:	f043 0301 	orr.w	r3, r3, #1
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
 8008902:	e032      	b.n	800896a <HAL_RCC_OscConfig+0x4e6>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d111      	bne.n	8008930 <HAL_RCC_OscConfig+0x4ac>
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800890e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008910:	4a05      	ldr	r2, [pc, #20]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	6713      	str	r3, [r2, #112]	; 0x70
 8008918:	4b03      	ldr	r3, [pc, #12]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	4a02      	ldr	r2, [pc, #8]	; (8008928 <HAL_RCC_OscConfig+0x4a4>)
 800891e:	f023 0304 	bic.w	r3, r3, #4
 8008922:	6713      	str	r3, [r2, #112]	; 0x70
 8008924:	e021      	b.n	800896a <HAL_RCC_OscConfig+0x4e6>
 8008926:	bf00      	nop
 8008928:	58024400 	.word	0x58024400
 800892c:	58024800 	.word	0x58024800
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	2b05      	cmp	r3, #5
 8008936:	d10c      	bne.n	8008952 <HAL_RCC_OscConfig+0x4ce>
 8008938:	4b83      	ldr	r3, [pc, #524]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893c:	4a82      	ldr	r2, [pc, #520]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 800893e:	f043 0304 	orr.w	r3, r3, #4
 8008942:	6713      	str	r3, [r2, #112]	; 0x70
 8008944:	4b80      	ldr	r3, [pc, #512]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008948:	4a7f      	ldr	r2, [pc, #508]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	6713      	str	r3, [r2, #112]	; 0x70
 8008950:	e00b      	b.n	800896a <HAL_RCC_OscConfig+0x4e6>
 8008952:	4b7d      	ldr	r3, [pc, #500]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	4a7c      	ldr	r2, [pc, #496]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008958:	f023 0301 	bic.w	r3, r3, #1
 800895c:	6713      	str	r3, [r2, #112]	; 0x70
 800895e:	4b7a      	ldr	r3, [pc, #488]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008962:	4a79      	ldr	r2, [pc, #484]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008964:	f023 0304 	bic.w	r3, r3, #4
 8008968:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d015      	beq.n	800899e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008972:	f7fa fd53 	bl	800341c <HAL_GetTick>
 8008976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008978:	e00a      	b.n	8008990 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800897a:	f7fa fd4f 	bl	800341c <HAL_GetTick>
 800897e:	4602      	mov	r2, r0
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	f241 3288 	movw	r2, #5000	; 0x1388
 8008988:	4293      	cmp	r3, r2
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e120      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008990:	4b6d      	ldr	r3, [pc, #436]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0ee      	beq.n	800897a <HAL_RCC_OscConfig+0x4f6>
 800899c:	e014      	b.n	80089c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800899e:	f7fa fd3d 	bl	800341c <HAL_GetTick>
 80089a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089a4:	e00a      	b.n	80089bc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089a6:	f7fa fd39 	bl	800341c <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e10a      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089bc:	4b62      	ldr	r3, [pc, #392]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1ee      	bne.n	80089a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 80ff 	beq.w	8008bd0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089d2:	4b5d      	ldr	r3, [pc, #372]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089da:	2b18      	cmp	r3, #24
 80089dc:	f000 80ba 	beq.w	8008b54 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b02      	cmp	r3, #2
 80089e6:	f040 8095 	bne.w	8008b14 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ea:	4b57      	ldr	r3, [pc, #348]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a56      	ldr	r2, [pc, #344]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 80089f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f6:	f7fa fd11 	bl	800341c <HAL_GetTick>
 80089fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089fc:	e008      	b.n	8008a10 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fe:	f7fa fd0d 	bl	800341c <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d901      	bls.n	8008a10 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e0e0      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a10:	4b4d      	ldr	r3, [pc, #308]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f0      	bne.n	80089fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a1c:	4b4a      	ldr	r3, [pc, #296]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a20:	4b4a      	ldr	r3, [pc, #296]	; (8008b4c <HAL_RCC_OscConfig+0x6c8>)
 8008a22:	4013      	ands	r3, r2
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008a2c:	0112      	lsls	r2, r2, #4
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	4945      	ldr	r1, [pc, #276]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	628b      	str	r3, [r1, #40]	; 0x28
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a44:	3b01      	subs	r3, #1
 8008a46:	025b      	lsls	r3, r3, #9
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	3b01      	subs	r3, #1
 8008a52:	041b      	lsls	r3, r3, #16
 8008a54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	061b      	lsls	r3, r3, #24
 8008a62:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a66:	4938      	ldr	r1, [pc, #224]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008a6c:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	4a35      	ldr	r2, [pc, #212]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a78:	4b33      	ldr	r3, [pc, #204]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a7c:	4b34      	ldr	r3, [pc, #208]	; (8008b50 <HAL_RCC_OscConfig+0x6cc>)
 8008a7e:	4013      	ands	r3, r2
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a84:	00d2      	lsls	r2, r2, #3
 8008a86:	4930      	ldr	r1, [pc, #192]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a8c:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	f023 020c 	bic.w	r2, r3, #12
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a98:	492b      	ldr	r1, [pc, #172]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a9e:	4b2a      	ldr	r3, [pc, #168]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa2:	f023 0202 	bic.w	r2, r3, #2
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	4927      	ldr	r1, [pc, #156]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ab0:	4b25      	ldr	r3, [pc, #148]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	4a24      	ldr	r2, [pc, #144]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008abc:	4b22      	ldr	r3, [pc, #136]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008ac8:	4b1f      	ldr	r3, [pc, #124]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a1e      	ldr	r2, [pc, #120]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a18      	ldr	r2, [pc, #96]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aec:	f7fa fc96 	bl	800341c <HAL_GetTick>
 8008af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008af2:	e008      	b.n	8008b06 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af4:	f7fa fc92 	bl	800341c <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d901      	bls.n	8008b06 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e065      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b06:	4b10      	ldr	r3, [pc, #64]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCC_OscConfig+0x670>
 8008b12:	e05d      	b.n	8008bd0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b14:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a0b      	ldr	r2, [pc, #44]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fa fc7c 	bl	800341c <HAL_GetTick>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b28:	f7fa fc78 	bl	800341c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e04b      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b3a:	4b03      	ldr	r3, [pc, #12]	; (8008b48 <HAL_RCC_OscConfig+0x6c4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x6a4>
 8008b46:	e043      	b.n	8008bd0 <HAL_RCC_OscConfig+0x74c>
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	fffffc0c 	.word	0xfffffc0c
 8008b50:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b54:	4b21      	ldr	r3, [pc, #132]	; (8008bdc <HAL_RCC_OscConfig+0x758>)
 8008b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b5a:	4b20      	ldr	r3, [pc, #128]	; (8008bdc <HAL_RCC_OscConfig+0x758>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d031      	beq.n	8008bcc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	f003 0203 	and.w	r2, r3, #3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d12a      	bne.n	8008bcc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d122      	bne.n	8008bcc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d11a      	bne.n	8008bcc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	0a5b      	lsrs	r3, r3, #9
 8008b9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d111      	bne.n	8008bcc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	0c1b      	lsrs	r3, r3, #16
 8008bac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d108      	bne.n	8008bcc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d001      	beq.n	8008bd0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3730      	adds	r7, #48	; 0x30
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	58024400 	.word	0x58024400

08008be0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e19c      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008bf4:	4b8a      	ldr	r3, [pc, #552]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d910      	bls.n	8008c24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c02:	4b87      	ldr	r3, [pc, #540]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f023 020f 	bic.w	r2, r3, #15
 8008c0a:	4985      	ldr	r1, [pc, #532]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c12:	4b83      	ldr	r3, [pc, #524]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d001      	beq.n	8008c24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e184      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	4b7b      	ldr	r3, [pc, #492]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d908      	bls.n	8008c52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c40:	4b78      	ldr	r3, [pc, #480]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	4975      	ldr	r1, [pc, #468]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d010      	beq.n	8008c80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	695a      	ldr	r2, [r3, #20]
 8008c62:	4b70      	ldr	r3, [pc, #448]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d908      	bls.n	8008c80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c6e:	4b6d      	ldr	r3, [pc, #436]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	496a      	ldr	r1, [pc, #424]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0310 	and.w	r3, r3, #16
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d010      	beq.n	8008cae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	699a      	ldr	r2, [r3, #24]
 8008c90:	4b64      	ldr	r3, [pc, #400]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d908      	bls.n	8008cae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c9c:	4b61      	ldr	r3, [pc, #388]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	495e      	ldr	r1, [pc, #376]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008caa:	4313      	orrs	r3, r2
 8008cac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d010      	beq.n	8008cdc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	4b59      	ldr	r3, [pc, #356]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d908      	bls.n	8008cdc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008cca:	4b56      	ldr	r3, [pc, #344]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	4953      	ldr	r1, [pc, #332]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	4b4d      	ldr	r3, [pc, #308]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f003 030f 	and.w	r3, r3, #15
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d908      	bls.n	8008d0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cf8:	4b4a      	ldr	r3, [pc, #296]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	f023 020f 	bic.w	r2, r3, #15
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	4947      	ldr	r1, [pc, #284]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d06:	4313      	orrs	r3, r2
 8008d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d055      	beq.n	8008dc2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d16:	4b43      	ldr	r3, [pc, #268]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	4940      	ldr	r1, [pc, #256]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d24:	4313      	orrs	r3, r2
 8008d26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d30:	4b3c      	ldr	r3, [pc, #240]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d121      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e0f6      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d107      	bne.n	8008d58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d48:	4b36      	ldr	r3, [pc, #216]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d115      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e0ea      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d107      	bne.n	8008d70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d60:	4b30      	ldr	r3, [pc, #192]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e0de      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d70:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d101      	bne.n	8008d80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e0d6      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	f023 0207 	bic.w	r2, r3, #7
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4925      	ldr	r1, [pc, #148]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d92:	f7fa fb43 	bl	800341c <HAL_GetTick>
 8008d96:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d98:	e00a      	b.n	8008db0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d9a:	f7fa fb3f 	bl	800341c <HAL_GetTick>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e0be      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db0:	4b1c      	ldr	r3, [pc, #112]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d1eb      	bne.n	8008d9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	4b14      	ldr	r3, [pc, #80]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d208      	bcs.n	8008df0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f023 020f 	bic.w	r2, r3, #15
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	490e      	ldr	r1, [pc, #56]	; (8008e24 <HAL_RCC_ClockConfig+0x244>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008df0:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d214      	bcs.n	8008e28 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dfe:	4b08      	ldr	r3, [pc, #32]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f023 020f 	bic.w	r2, r3, #15
 8008e06:	4906      	ldr	r1, [pc, #24]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e0e:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <HAL_RCC_ClockConfig+0x240>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d005      	beq.n	8008e28 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e086      	b.n	8008f2e <HAL_RCC_ClockConfig+0x34e>
 8008e20:	52002000 	.word	0x52002000
 8008e24:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d010      	beq.n	8008e56 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d208      	bcs.n	8008e56 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e44:	4b3c      	ldr	r3, [pc, #240]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	4939      	ldr	r1, [pc, #228]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d010      	beq.n	8008e84 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	695a      	ldr	r2, [r3, #20]
 8008e66:	4b34      	ldr	r3, [pc, #208]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d208      	bcs.n	8008e84 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e72:	4b31      	ldr	r3, [pc, #196]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	492e      	ldr	r1, [pc, #184]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d010      	beq.n	8008eb2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	4b28      	ldr	r3, [pc, #160]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d208      	bcs.n	8008eb2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ea0:	4b25      	ldr	r3, [pc, #148]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008ea2:	69db      	ldr	r3, [r3, #28]
 8008ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	4922      	ldr	r1, [pc, #136]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d010      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	69da      	ldr	r2, [r3, #28]
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d208      	bcs.n	8008ee0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ece:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	4917      	ldr	r1, [pc, #92]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ee0:	f000 f834 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	4912      	ldr	r1, [pc, #72]	; (8008f3c <HAL_RCC_ClockConfig+0x35c>)
 8008ef2:	5ccb      	ldrb	r3, [r1, r3]
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8008efc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008efe:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <HAL_RCC_ClockConfig+0x358>)
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	f003 030f 	and.w	r3, r3, #15
 8008f06:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <HAL_RCC_ClockConfig+0x35c>)
 8008f08:	5cd3      	ldrb	r3, [r2, r3]
 8008f0a:	f003 031f 	and.w	r3, r3, #31
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	fa22 f303 	lsr.w	r3, r2, r3
 8008f14:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <HAL_RCC_ClockConfig+0x360>)
 8008f16:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f18:	4a0a      	ldr	r2, [pc, #40]	; (8008f44 <HAL_RCC_ClockConfig+0x364>)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <HAL_RCC_ClockConfig+0x368>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fa fa30 	bl	8003388 <HAL_InitTick>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	08019fb0 	.word	0x08019fb0
 8008f40:	24000004 	.word	0x24000004
 8008f44:	24000000 	.word	0x24000000
 8008f48:	24000008 	.word	0x24000008

08008f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b089      	sub	sp, #36	; 0x24
 8008f50:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f52:	4bb3      	ldr	r3, [pc, #716]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f5a:	2b18      	cmp	r3, #24
 8008f5c:	f200 8155 	bhi.w	800920a <HAL_RCC_GetSysClockFreq+0x2be>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008fcd 	.word	0x08008fcd
 8008f6c:	0800920b 	.word	0x0800920b
 8008f70:	0800920b 	.word	0x0800920b
 8008f74:	0800920b 	.word	0x0800920b
 8008f78:	0800920b 	.word	0x0800920b
 8008f7c:	0800920b 	.word	0x0800920b
 8008f80:	0800920b 	.word	0x0800920b
 8008f84:	0800920b 	.word	0x0800920b
 8008f88:	08008ff3 	.word	0x08008ff3
 8008f8c:	0800920b 	.word	0x0800920b
 8008f90:	0800920b 	.word	0x0800920b
 8008f94:	0800920b 	.word	0x0800920b
 8008f98:	0800920b 	.word	0x0800920b
 8008f9c:	0800920b 	.word	0x0800920b
 8008fa0:	0800920b 	.word	0x0800920b
 8008fa4:	0800920b 	.word	0x0800920b
 8008fa8:	08008ff9 	.word	0x08008ff9
 8008fac:	0800920b 	.word	0x0800920b
 8008fb0:	0800920b 	.word	0x0800920b
 8008fb4:	0800920b 	.word	0x0800920b
 8008fb8:	0800920b 	.word	0x0800920b
 8008fbc:	0800920b 	.word	0x0800920b
 8008fc0:	0800920b 	.word	0x0800920b
 8008fc4:	0800920b 	.word	0x0800920b
 8008fc8:	08008fff 	.word	0x08008fff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fcc:	4b94      	ldr	r3, [pc, #592]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0320 	and.w	r3, r3, #32
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d009      	beq.n	8008fec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fd8:	4b91      	ldr	r3, [pc, #580]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	08db      	lsrs	r3, r3, #3
 8008fde:	f003 0303 	and.w	r3, r3, #3
 8008fe2:	4a90      	ldr	r2, [pc, #576]	; (8009224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008fea:	e111      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008fec:	4b8d      	ldr	r3, [pc, #564]	; (8009224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fee:	61bb      	str	r3, [r7, #24]
    break;
 8008ff0:	e10e      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008ff2:	4b8d      	ldr	r3, [pc, #564]	; (8009228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ff4:	61bb      	str	r3, [r7, #24]
    break;
 8008ff6:	e10b      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ff8:	4b8c      	ldr	r3, [pc, #560]	; (800922c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ffa:	61bb      	str	r3, [r7, #24]
    break;
 8008ffc:	e108      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ffe:	4b88      	ldr	r3, [pc, #544]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009008:	4b85      	ldr	r3, [pc, #532]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900c:	091b      	lsrs	r3, r3, #4
 800900e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009012:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009014:	4b82      	ldr	r3, [pc, #520]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800901e:	4b80      	ldr	r3, [pc, #512]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	fb02 f303 	mul.w	r3, r2, r3
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80e1 	beq.w	8009204 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b02      	cmp	r3, #2
 8009046:	f000 8083 	beq.w	8009150 <HAL_RCC_GetSysClockFreq+0x204>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b02      	cmp	r3, #2
 800904e:	f200 80a1 	bhi.w	8009194 <HAL_RCC_GetSysClockFreq+0x248>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_RCC_GetSysClockFreq+0x114>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d056      	beq.n	800910c <HAL_RCC_GetSysClockFreq+0x1c0>
 800905e:	e099      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009060:	4b6f      	ldr	r3, [pc, #444]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d02d      	beq.n	80090c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800906c:	4b6c      	ldr	r3, [pc, #432]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	08db      	lsrs	r3, r3, #3
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	4a6b      	ldr	r2, [pc, #428]	; (8009224 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009078:	fa22 f303 	lsr.w	r3, r2, r3
 800907c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b62      	ldr	r3, [pc, #392]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80090c6:	e087      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009234 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b51      	ldr	r3, [pc, #324]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800910a:	e065      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009238 <HAL_RCC_GetSysClockFreq+0x2ec>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b40      	ldr	r3, [pc, #256]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009132:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009230 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914e:	e043      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800923c <HAL_RCC_GetSysClockFreq+0x2f0>
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b2f      	ldr	r3, [pc, #188]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a02 	vldr	s12, [r7, #8]
 8009176:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009230 <HAL_RCC_GetSysClockFreq+0x2e4>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009192:	e021      	b.n	80091d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009238 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a6:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009230 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80091d8:	4b11      	ldr	r3, [pc, #68]	; (8009220 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091dc:	0a5b      	lsrs	r3, r3, #9
 80091de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e2:	3301      	adds	r3, #1
 80091e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	ee07 3a90 	vmov	s15, r3
 80091ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80091f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091fc:	ee17 3a90 	vmov	r3, s15
 8009200:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009202:	e005      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	61bb      	str	r3, [r7, #24]
    break;
 8009208:	e002      	b.n	8009210 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800920c:	61bb      	str	r3, [r7, #24]
    break;
 800920e:	bf00      	nop
  }

  return sysclockfreq;
 8009210:	69bb      	ldr	r3, [r7, #24]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3724      	adds	r7, #36	; 0x24
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	58024400 	.word	0x58024400
 8009224:	03d09000 	.word	0x03d09000
 8009228:	003d0900 	.word	0x003d0900
 800922c:	007a1200 	.word	0x007a1200
 8009230:	46000000 	.word	0x46000000
 8009234:	4c742400 	.word	0x4c742400
 8009238:	4a742400 	.word	0x4a742400
 800923c:	4af42400 	.word	0x4af42400

08009240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009246:	f7ff fe81 	bl	8008f4c <HAL_RCC_GetSysClockFreq>
 800924a:	4602      	mov	r2, r0
 800924c:	4b10      	ldr	r3, [pc, #64]	; (8009290 <HAL_RCC_GetHCLKFreq+0x50>)
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	490f      	ldr	r1, [pc, #60]	; (8009294 <HAL_RCC_GetHCLKFreq+0x54>)
 8009258:	5ccb      	ldrb	r3, [r1, r3]
 800925a:	f003 031f 	and.w	r3, r3, #31
 800925e:	fa22 f303 	lsr.w	r3, r2, r3
 8009262:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009264:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <HAL_RCC_GetHCLKFreq+0x50>)
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	f003 030f 	and.w	r3, r3, #15
 800926c:	4a09      	ldr	r2, [pc, #36]	; (8009294 <HAL_RCC_GetHCLKFreq+0x54>)
 800926e:	5cd3      	ldrb	r3, [r2, r3]
 8009270:	f003 031f 	and.w	r3, r3, #31
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	fa22 f303 	lsr.w	r3, r2, r3
 800927a:	4a07      	ldr	r2, [pc, #28]	; (8009298 <HAL_RCC_GetHCLKFreq+0x58>)
 800927c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800927e:	4a07      	ldr	r2, [pc, #28]	; (800929c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009284:	4b04      	ldr	r3, [pc, #16]	; (8009298 <HAL_RCC_GetHCLKFreq+0x58>)
 8009286:	681b      	ldr	r3, [r3, #0]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	58024400 	.word	0x58024400
 8009294:	08019fb0 	.word	0x08019fb0
 8009298:	24000004 	.word	0x24000004
 800929c:	24000000 	.word	0x24000000

080092a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092a4:	f7ff ffcc 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 80092a8:	4602      	mov	r2, r0
 80092aa:	4b06      	ldr	r3, [pc, #24]	; (80092c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	091b      	lsrs	r3, r3, #4
 80092b0:	f003 0307 	and.w	r3, r3, #7
 80092b4:	4904      	ldr	r1, [pc, #16]	; (80092c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092b6:	5ccb      	ldrb	r3, [r1, r3]
 80092b8:	f003 031f 	and.w	r3, r3, #31
 80092bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	58024400 	.word	0x58024400
 80092c8:	08019fb0 	.word	0x08019fb0

080092cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092d0:	f7ff ffb6 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 80092d4:	4602      	mov	r2, r0
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	0a1b      	lsrs	r3, r3, #8
 80092dc:	f003 0307 	and.w	r3, r3, #7
 80092e0:	4904      	ldr	r1, [pc, #16]	; (80092f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80092e2:	5ccb      	ldrb	r3, [r1, r3]
 80092e4:	f003 031f 	and.w	r3, r3, #31
 80092e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	58024400 	.word	0x58024400
 80092f4:	08019fb0 	.word	0x08019fb0

080092f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009300:	2300      	movs	r3, #0
 8009302:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009304:	2300      	movs	r3, #0
 8009306:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d03f      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800931c:	d02a      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800931e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009322:	d824      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009328:	d018      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800932a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800932e:	d81e      	bhi.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d003      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009338:	d007      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800933a:	e018      	b.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800933c:	4ba4      	ldr	r3, [pc, #656]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	4aa3      	ldr	r2, [pc, #652]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009348:	e015      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	3304      	adds	r3, #4
 800934e:	2102      	movs	r1, #2
 8009350:	4618      	mov	r0, r3
 8009352:	f001 ff01 	bl	800b158 <RCCEx_PLL2_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800935a:	e00c      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3324      	adds	r3, #36	; 0x24
 8009360:	2102      	movs	r1, #2
 8009362:	4618      	mov	r0, r3
 8009364:	f001 ffaa 	bl	800b2bc <RCCEx_PLL3_Config>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800936c:	e003      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800936e:	2301      	movs	r3, #1
 8009370:	75fb      	strb	r3, [r7, #23]
      break;
 8009372:	e000      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d109      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800937c:	4b94      	ldr	r3, [pc, #592]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009388:	4991      	ldr	r1, [pc, #580]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800938a:	4313      	orrs	r3, r2
 800938c:	650b      	str	r3, [r1, #80]	; 0x50
 800938e:	e001      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939c:	2b00      	cmp	r3, #0
 800939e:	d03d      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d826      	bhi.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80093a8:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80093aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ae:	bf00      	nop
 80093b0:	080093c5 	.word	0x080093c5
 80093b4:	080093d3 	.word	0x080093d3
 80093b8:	080093e5 	.word	0x080093e5
 80093bc:	080093fd 	.word	0x080093fd
 80093c0:	080093fd 	.word	0x080093fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c4:	4b82      	ldr	r3, [pc, #520]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a81      	ldr	r2, [pc, #516]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80093ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093d0:	e015      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3304      	adds	r3, #4
 80093d6:	2100      	movs	r1, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 febd 	bl	800b158 <RCCEx_PLL2_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093e2:	e00c      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3324      	adds	r3, #36	; 0x24
 80093e8:	2100      	movs	r1, #0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 ff66 	bl	800b2bc <RCCEx_PLL3_Config>
 80093f0:	4603      	mov	r3, r0
 80093f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093f4:	e003      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	75fb      	strb	r3, [r7, #23]
      break;
 80093fa:	e000      	b.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80093fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d109      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009404:	4b72      	ldr	r3, [pc, #456]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009408:	f023 0207 	bic.w	r2, r3, #7
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009410:	496f      	ldr	r1, [pc, #444]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009412:	4313      	orrs	r3, r2
 8009414:	650b      	str	r3, [r1, #80]	; 0x50
 8009416:	e001      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009424:	2b00      	cmp	r3, #0
 8009426:	d051      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800942e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009432:	d036      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009434:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009438:	d830      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800943a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800943e:	d032      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009444:	d82a      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009446:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800944a:	d02e      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800944c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009450:	d824      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009452:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009456:	d018      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800945c:	d81e      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009466:	d007      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009468:	e018      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800946a:	4b59      	ldr	r3, [pc, #356]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	4a58      	ldr	r2, [pc, #352]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009476:	e019      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	2100      	movs	r1, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f001 fe6a 	bl	800b158 <RCCEx_PLL2_Config>
 8009484:	4603      	mov	r3, r0
 8009486:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009488:	e010      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3324      	adds	r3, #36	; 0x24
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f001 ff13 	bl	800b2bc <RCCEx_PLL3_Config>
 8009496:	4603      	mov	r3, r0
 8009498:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800949a:	e007      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10a      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094b2:	4b47      	ldr	r3, [pc, #284]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094c0:	4943      	ldr	r1, [pc, #268]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	658b      	str	r3, [r1, #88]	; 0x58
 80094c6:	e001      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d051      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094de:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80094e2:	d036      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80094e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80094e8:	d830      	bhi.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80094ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094ee:	d032      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80094f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094f4:	d82a      	bhi.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x254>
 80094f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80094fa:	d02e      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x262>
 80094fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009500:	d824      	bhi.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009506:	d018      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800950c:	d81e      	bhi.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009516:	d007      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009518:	e018      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800951a:	4b2d      	ldr	r3, [pc, #180]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	4a2c      	ldr	r2, [pc, #176]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009526:	e019      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3304      	adds	r3, #4
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f001 fe12 	bl	800b158 <RCCEx_PLL2_Config>
 8009534:	4603      	mov	r3, r0
 8009536:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009538:	e010      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3324      	adds	r3, #36	; 0x24
 800953e:	2100      	movs	r1, #0
 8009540:	4618      	mov	r0, r3
 8009542:	f001 febb 	bl	800b2bc <RCCEx_PLL3_Config>
 8009546:	4603      	mov	r3, r0
 8009548:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800954a:	e007      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	75fb      	strb	r3, [r7, #23]
      break;
 8009550:	e004      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009552:	bf00      	nop
 8009554:	e002      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009556:	bf00      	nop
 8009558:	e000      	b.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800955a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009562:	4b1b      	ldr	r3, [pc, #108]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009566:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009570:	4917      	ldr	r1, [pc, #92]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009572:	4313      	orrs	r3, r2
 8009574:	658b      	str	r3, [r1, #88]	; 0x58
 8009576:	e001      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d035      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958c:	2b30      	cmp	r3, #48	; 0x30
 800958e:	d01c      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009590:	2b30      	cmp	r3, #48	; 0x30
 8009592:	d817      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009594:	2b20      	cmp	r3, #32
 8009596:	d00c      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009598:	2b20      	cmp	r3, #32
 800959a:	d813      	bhi.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d019      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d10f      	bne.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a4:	4b0a      	ldr	r3, [pc, #40]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	4a09      	ldr	r2, [pc, #36]	; (80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80095aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80095b0:	e011      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3304      	adds	r3, #4
 80095b6:	2102      	movs	r1, #2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f001 fdcd 	bl	800b158 <RCCEx_PLL2_Config>
 80095be:	4603      	mov	r3, r0
 80095c0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80095c2:	e008      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	75fb      	strb	r3, [r7, #23]
      break;
 80095c8:	e005      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80095ca:	bf00      	nop
 80095cc:	e003      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400
      break;
 80095d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80095dc:	4ba3      	ldr	r3, [pc, #652]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e8:	49a0      	ldr	r1, [pc, #640]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095ee:	e001      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f0:	7dfb      	ldrb	r3, [r7, #23]
 80095f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d047      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009604:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009608:	d030      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800960a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800960e:	d82a      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009614:	d02c      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800961a:	d824      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800961c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009620:	d018      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009626:	d81e      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800962c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009630:	d007      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009632:	e018      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009634:	4b8d      	ldr	r3, [pc, #564]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	4a8c      	ldr	r2, [pc, #560]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800963a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800963e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009640:	e017      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3304      	adds	r3, #4
 8009646:	2100      	movs	r1, #0
 8009648:	4618      	mov	r0, r3
 800964a:	f001 fd85 	bl	800b158 <RCCEx_PLL2_Config>
 800964e:	4603      	mov	r3, r0
 8009650:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009652:	e00e      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f001 fe2e 	bl	800b2bc <RCCEx_PLL3_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009664:	e005      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
      break;
 800966a:	e002      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800966c:	bf00      	nop
 800966e:	e000      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009672:	7dfb      	ldrb	r3, [r7, #23]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009678:	4b7c      	ldr	r3, [pc, #496]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800967a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009684:	4979      	ldr	r1, [pc, #484]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009686:	4313      	orrs	r3, r2
 8009688:	650b      	str	r3, [r1, #80]	; 0x50
 800968a:	e001      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d049      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096a4:	d02e      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80096a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80096aa:	d828      	bhi.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096b0:	d02a      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80096b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80096b6:	d822      	bhi.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096bc:	d026      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x414>
 80096be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80096c2:	d81c      	bhi.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096c8:	d010      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80096ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ce:	d816      	bhi.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x406>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01d      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80096d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d8:	d111      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3304      	adds	r3, #4
 80096de:	2101      	movs	r1, #1
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 fd39 	bl	800b158 <RCCEx_PLL2_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80096ea:	e012      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3324      	adds	r3, #36	; 0x24
 80096f0:	2101      	movs	r1, #1
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 fde2 	bl	800b2bc <RCCEx_PLL3_Config>
 80096f8:	4603      	mov	r3, r0
 80096fa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80096fc:	e009      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	75fb      	strb	r3, [r7, #23]
      break;
 8009702:	e006      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009704:	bf00      	nop
 8009706:	e004      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009708:	bf00      	nop
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009718:	4b54      	ldr	r3, [pc, #336]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009724:	4951      	ldr	r1, [pc, #324]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009726:	4313      	orrs	r3, r2
 8009728:	650b      	str	r3, [r1, #80]	; 0x50
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d04b      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009746:	d02e      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800974c:	d828      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800974e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009752:	d02a      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009758:	d822      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800975a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800975e:	d026      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009760:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009764:	d81c      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800976a:	d010      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800976c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009770:	d816      	bhi.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01d      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800977a:	d111      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	2101      	movs	r1, #1
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fce8 	bl	800b158 <RCCEx_PLL2_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800978c:	e012      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	3324      	adds	r3, #36	; 0x24
 8009792:	2101      	movs	r1, #1
 8009794:	4618      	mov	r0, r3
 8009796:	f001 fd91 	bl	800b2bc <RCCEx_PLL3_Config>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800979e:	e009      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	75fb      	strb	r3, [r7, #23]
      break;
 80097a4:	e006      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097a6:	bf00      	nop
 80097a8:	e004      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097aa:	bf00      	nop
 80097ac:	e002      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097ae:	bf00      	nop
 80097b0:	e000      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80097b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10a      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80097ba:	4b2c      	ldr	r3, [pc, #176]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097c8:	4928      	ldr	r1, [pc, #160]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	658b      	str	r3, [r1, #88]	; 0x58
 80097ce:	e001      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d02f      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e8:	d00e      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80097ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ee:	d814      	bhi.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d015      	beq.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80097f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097f8:	d10f      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fa:	4b1c      	ldr	r3, [pc, #112]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80097fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fe:	4a1b      	ldr	r2, [pc, #108]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009806:	e00c      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	2101      	movs	r1, #1
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fca2 	bl	800b158 <RCCEx_PLL2_Config>
 8009814:	4603      	mov	r3, r0
 8009816:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009818:	e003      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	75fb      	strb	r3, [r7, #23]
      break;
 800981e:	e000      	b.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009828:	4b10      	ldr	r3, [pc, #64]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800982a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800982c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009834:	490d      	ldr	r1, [pc, #52]	; (800986c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009836:	4313      	orrs	r3, r2
 8009838:	650b      	str	r3, [r1, #80]	; 0x50
 800983a:	e001      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009848:	2b00      	cmp	r3, #0
 800984a:	d034      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009850:	2b03      	cmp	r3, #3
 8009852:	d81d      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009854:	a201      	add	r2, pc, #4	; (adr r2, 800985c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	08009897 	.word	0x08009897
 8009860:	08009871 	.word	0x08009871
 8009864:	0800987f 	.word	0x0800987f
 8009868:	08009897 	.word	0x08009897
 800986c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009870:	4bb1      	ldr	r3, [pc, #708]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009874:	4ab0      	ldr	r2, [pc, #704]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800987a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800987c:	e00c      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3304      	adds	r3, #4
 8009882:	2102      	movs	r1, #2
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fc67 	bl	800b158 <RCCEx_PLL2_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800988e:	e003      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
      break;
 8009894:	e000      	b.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800989e:	4ba6      	ldr	r3, [pc, #664]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	f023 0203 	bic.w	r2, r3, #3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	49a3      	ldr	r1, [pc, #652]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80098ac:	4313      	orrs	r3, r2
 80098ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098b0:	e001      	b.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8086 	beq.w	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098c4:	4b9d      	ldr	r3, [pc, #628]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a9c      	ldr	r2, [pc, #624]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80098ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80098d0:	f7f9 fda4 	bl	800341c <HAL_GetTick>
 80098d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098d6:	e009      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098d8:	f7f9 fda0 	bl	800341c <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	2b64      	cmp	r3, #100	; 0x64
 80098e4:	d902      	bls.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	75fb      	strb	r3, [r7, #23]
        break;
 80098ea:	e005      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80098ec:	4b93      	ldr	r3, [pc, #588]	; (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0ef      	beq.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d166      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80098fe:	4b8e      	ldr	r3, [pc, #568]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009900:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009908:	4053      	eors	r3, r2
 800990a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009912:	4b89      	ldr	r3, [pc, #548]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800991a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800991c:	4b86      	ldr	r3, [pc, #536]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	4a85      	ldr	r2, [pc, #532]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009926:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009928:	4b83      	ldr	r3, [pc, #524]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	4a82      	ldr	r2, [pc, #520]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800992e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009932:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009934:	4a80      	ldr	r2, [pc, #512]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009944:	d115      	bne.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009946:	f7f9 fd69 	bl	800341c <HAL_GetTick>
 800994a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800994c:	e00b      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800994e:	f7f9 fd65 	bl	800341c <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f241 3288 	movw	r2, #5000	; 0x1388
 800995c:	4293      	cmp	r3, r2
 800995e:	d902      	bls.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	75fb      	strb	r3, [r7, #23]
            break;
 8009964:	e005      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009966:	4b74      	ldr	r3, [pc, #464]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996a:	f003 0302 	and.w	r3, r3, #2
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0ed      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d126      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800997e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009986:	d10d      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009988:	4b6b      	ldr	r3, [pc, #428]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009996:	0919      	lsrs	r1, r3, #4
 8009998:	4b69      	ldr	r3, [pc, #420]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800999a:	400b      	ands	r3, r1
 800999c:	4966      	ldr	r1, [pc, #408]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800999e:	4313      	orrs	r3, r2
 80099a0:	610b      	str	r3, [r1, #16]
 80099a2:	e005      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80099a4:	4b64      	ldr	r3, [pc, #400]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	4a63      	ldr	r2, [pc, #396]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80099ae:	6113      	str	r3, [r2, #16]
 80099b0:	4b61      	ldr	r3, [pc, #388]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099be:	495e      	ldr	r1, [pc, #376]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	670b      	str	r3, [r1, #112]	; 0x70
 80099c4:	e004      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	75bb      	strb	r3, [r7, #22]
 80099ca:	e001      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	7dfb      	ldrb	r3, [r7, #23]
 80099ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d07e      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099e0:	2b28      	cmp	r3, #40	; 0x28
 80099e2:	d867      	bhi.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80099e4:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80099e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ea:	bf00      	nop
 80099ec:	08009abb 	.word	0x08009abb
 80099f0:	08009ab5 	.word	0x08009ab5
 80099f4:	08009ab5 	.word	0x08009ab5
 80099f8:	08009ab5 	.word	0x08009ab5
 80099fc:	08009ab5 	.word	0x08009ab5
 8009a00:	08009ab5 	.word	0x08009ab5
 8009a04:	08009ab5 	.word	0x08009ab5
 8009a08:	08009ab5 	.word	0x08009ab5
 8009a0c:	08009a91 	.word	0x08009a91
 8009a10:	08009ab5 	.word	0x08009ab5
 8009a14:	08009ab5 	.word	0x08009ab5
 8009a18:	08009ab5 	.word	0x08009ab5
 8009a1c:	08009ab5 	.word	0x08009ab5
 8009a20:	08009ab5 	.word	0x08009ab5
 8009a24:	08009ab5 	.word	0x08009ab5
 8009a28:	08009ab5 	.word	0x08009ab5
 8009a2c:	08009aa3 	.word	0x08009aa3
 8009a30:	08009ab5 	.word	0x08009ab5
 8009a34:	08009ab5 	.word	0x08009ab5
 8009a38:	08009ab5 	.word	0x08009ab5
 8009a3c:	08009ab5 	.word	0x08009ab5
 8009a40:	08009ab5 	.word	0x08009ab5
 8009a44:	08009ab5 	.word	0x08009ab5
 8009a48:	08009ab5 	.word	0x08009ab5
 8009a4c:	08009abb 	.word	0x08009abb
 8009a50:	08009ab5 	.word	0x08009ab5
 8009a54:	08009ab5 	.word	0x08009ab5
 8009a58:	08009ab5 	.word	0x08009ab5
 8009a5c:	08009ab5 	.word	0x08009ab5
 8009a60:	08009ab5 	.word	0x08009ab5
 8009a64:	08009ab5 	.word	0x08009ab5
 8009a68:	08009ab5 	.word	0x08009ab5
 8009a6c:	08009abb 	.word	0x08009abb
 8009a70:	08009ab5 	.word	0x08009ab5
 8009a74:	08009ab5 	.word	0x08009ab5
 8009a78:	08009ab5 	.word	0x08009ab5
 8009a7c:	08009ab5 	.word	0x08009ab5
 8009a80:	08009ab5 	.word	0x08009ab5
 8009a84:	08009ab5 	.word	0x08009ab5
 8009a88:	08009ab5 	.word	0x08009ab5
 8009a8c:	08009abb 	.word	0x08009abb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	3304      	adds	r3, #4
 8009a94:	2101      	movs	r1, #1
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fb5e 	bl	800b158 <RCCEx_PLL2_Config>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009aa0:	e00c      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3324      	adds	r3, #36	; 0x24
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f001 fc07 	bl	800b2bc <RCCEx_PLL3_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009ab2:	e003      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab8:	e000      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ac2:	4b1d      	ldr	r3, [pc, #116]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ace:	491a      	ldr	r1, [pc, #104]	; (8009b38 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	654b      	str	r3, [r1, #84]	; 0x54
 8009ad4:	e001      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d03e      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aea:	2b05      	cmp	r3, #5
 8009aec:	d820      	bhi.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b45 	.word	0x08009b45
 8009af8:	08009b0d 	.word	0x08009b0d
 8009afc:	08009b1f 	.word	0x08009b1f
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009b45 	.word	0x08009b45
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	2101      	movs	r1, #1
 8009b12:	4618      	mov	r0, r3
 8009b14:	f001 fb20 	bl	800b158 <RCCEx_PLL2_Config>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b1c:	e013      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3324      	adds	r3, #36	; 0x24
 8009b22:	2101      	movs	r1, #1
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fbc9 	bl	800b2bc <RCCEx_PLL3_Config>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009b2e:	e00a      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	75fb      	strb	r3, [r7, #23]
      break;
 8009b34:	e007      	b.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8009b36:	bf00      	nop
 8009b38:	58024400 	.word	0x58024400
 8009b3c:	58024800 	.word	0x58024800
 8009b40:	00ffffcf 	.word	0x00ffffcf
      break;
 8009b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d109      	bne.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b4c:	4b9f      	ldr	r3, [pc, #636]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	f023 0207 	bic.w	r2, r3, #7
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b58:	499c      	ldr	r1, [pc, #624]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	654b      	str	r3, [r1, #84]	; 0x54
 8009b5e:	e001      	b.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d039      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b76:	2b05      	cmp	r3, #5
 8009b78:	d820      	bhi.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009b7a:	a201      	add	r2, pc, #4	; (adr r2, 8009b80 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b80:	08009bc3 	.word	0x08009bc3
 8009b84:	08009b99 	.word	0x08009b99
 8009b88:	08009bab 	.word	0x08009bab
 8009b8c:	08009bc3 	.word	0x08009bc3
 8009b90:	08009bc3 	.word	0x08009bc3
 8009b94:	08009bc3 	.word	0x08009bc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 fada 	bl	800b158 <RCCEx_PLL2_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009ba8:	e00c      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3324      	adds	r3, #36	; 0x24
 8009bae:	2101      	movs	r1, #1
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 fb83 	bl	800b2bc <RCCEx_PLL3_Config>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009bba:	e003      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bc4:	7dfb      	ldrb	r3, [r7, #23]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bca:	4b80      	ldr	r3, [pc, #512]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bce:	f023 0207 	bic.w	r2, r3, #7
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd8:	497c      	ldr	r1, [pc, #496]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8009bde:	e001      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be0:	7dfb      	ldrb	r3, [r7, #23]
 8009be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0320 	and.w	r3, r3, #32
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d04b      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bfa:	d02e      	beq.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8009bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c00:	d828      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c06:	d02a      	beq.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0c:	d822      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c12:	d026      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009c14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009c18:	d81c      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c1e:	d010      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8009c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c24:	d816      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01d      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c2e:	d111      	bne.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fa8e 	bl	800b158 <RCCEx_PLL2_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c40:	e012      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3324      	adds	r3, #36	; 0x24
 8009c46:	2102      	movs	r1, #2
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fb37 	bl	800b2bc <RCCEx_PLL3_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009c52:	e009      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
      break;
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c5a:	bf00      	nop
 8009c5c:	e004      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c5e:	bf00      	nop
 8009c60:	e002      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c62:	bf00      	nop
 8009c64:	e000      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d10a      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c6e:	4b57      	ldr	r3, [pc, #348]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7c:	4953      	ldr	r1, [pc, #332]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	654b      	str	r3, [r1, #84]	; 0x54
 8009c82:	e001      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d04b      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c9e:	d02e      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009ca0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009ca4:	d828      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009caa:	d02a      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb0:	d822      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cb6:	d026      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cbc:	d81c      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cc2:	d010      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cc8:	d816      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01d      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cd2:	d111      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fa3c 	bl	800b158 <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ce4:	e012      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fae5 	bl	800b2bc <RCCEx_PLL3_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009cf6:	e009      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	e006      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009cfe:	bf00      	nop
 8009d00:	e004      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d12:	4b2e      	ldr	r3, [pc, #184]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d20:	492a      	ldr	r1, [pc, #168]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	658b      	str	r3, [r1, #88]	; 0x58
 8009d26:	e001      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d04d      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009d3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d42:	d02e      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009d44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d48:	d828      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4e:	d02a      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d54:	d822      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d5a:	d026      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009d5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d60:	d81c      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d66:	d010      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d6c:	d816      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01d      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d76:	d111      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 f9ea 	bl	800b158 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d88:	e012      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3324      	adds	r3, #36	; 0x24
 8009d8e:	2102      	movs	r1, #2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 fa93 	bl	800b2bc <RCCEx_PLL3_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009d9a:	e009      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009da2:	bf00      	nop
 8009da4:	e004      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009da6:	bf00      	nop
 8009da8:	e002      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009daa:	bf00      	nop
 8009dac:	e000      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10c      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009dc4:	4901      	ldr	r1, [pc, #4]	; (8009dcc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8009dca:	e003      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d018      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de8:	d10a      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3324      	adds	r3, #36	; 0x24
 8009dee:	2102      	movs	r1, #2
 8009df0:	4618      	mov	r0, r3
 8009df2:	f001 fa63 	bl	800b2bc <RCCEx_PLL3_Config>
 8009df6:	4603      	mov	r3, r0
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d001      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009e00:	4b8a      	ldr	r3, [pc, #552]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e0c:	4987      	ldr	r1, [pc, #540]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0310 	and.w	r3, r3, #16
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d01a      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e28:	d10a      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3324      	adds	r3, #36	; 0x24
 8009e2e:	2102      	movs	r1, #2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fa43 	bl	800b2bc <RCCEx_PLL3_Config>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e40:	4b7a      	ldr	r3, [pc, #488]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4e:	4977      	ldr	r1, [pc, #476]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d034      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e6a:	d01d      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e70:	d817      	bhi.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7a:	d009      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009e7c:	e011      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3304      	adds	r3, #4
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f001 f967 	bl	800b158 <RCCEx_PLL2_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009e8e:	e00c      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	2102      	movs	r1, #2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f001 fa10 	bl	800b2bc <RCCEx_PLL3_Config>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009ea0:	e003      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ea6:	e000      	b.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10a      	bne.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009eb0:	4b5e      	ldr	r3, [pc, #376]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ebe:	495b      	ldr	r1, [pc, #364]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	658b      	str	r3, [r1, #88]	; 0x58
 8009ec4:	e001      	b.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d033      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009edc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ee0:	d01c      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009ee2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ee6:	d816      	bhi.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eec:	d003      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef2:	d007      	beq.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009ef4:	e00f      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ef6:	4b4d      	ldr	r3, [pc, #308]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	4a4c      	ldr	r2, [pc, #304]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f02:	e00c      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	2101      	movs	r1, #1
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f001 f9d6 	bl	800b2bc <RCCEx_PLL3_Config>
 8009f10:	4603      	mov	r3, r0
 8009f12:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009f14:	e003      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1a:	e000      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10a      	bne.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f24:	4b41      	ldr	r3, [pc, #260]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f32:	493e      	ldr	r1, [pc, #248]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	654b      	str	r3, [r1, #84]	; 0x54
 8009f38:	e001      	b.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
 8009f3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d029      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d003      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f56:	d007      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009f58:	e00f      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f5a:	4b34      	ldr	r3, [pc, #208]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	4a33      	ldr	r2, [pc, #204]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f66:	e00b      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	2102      	movs	r1, #2
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f001 f8f2 	bl	800b158 <RCCEx_PLL2_Config>
 8009f74:	4603      	mov	r3, r0
 8009f76:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009f78:	e002      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d109      	bne.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f86:	4b29      	ldr	r3, [pc, #164]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f92:	4926      	ldr	r1, [pc, #152]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009f94:	4313      	orrs	r3, r2
 8009f96:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f98:	e001      	b.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3324      	adds	r3, #36	; 0x24
 8009fae:	2102      	movs	r1, #2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f001 f983 	bl	800b2bc <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d033      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fd4:	d017      	beq.n	800a006 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fda:	d811      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe0:	d013      	beq.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fe6:	d80b      	bhi.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d010      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ff0:	d106      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ff2:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff6:	4a0d      	ldr	r2, [pc, #52]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009ffe:	e007      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]
      break;
 800a004:	e004      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a006:	bf00      	nop
 800a008:	e002      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a00a:	bf00      	nop
 800a00c:	e000      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a00e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a01a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a022:	4902      	ldr	r1, [pc, #8]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a024:	4313      	orrs	r3, r2
 800a026:	654b      	str	r3, [r1, #84]	; 0x54
 800a028:	e004      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a02a:	bf00      	nop
 800a02c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d008      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a040:	4b29      	ldr	r3, [pc, #164]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a044:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04c:	4926      	ldr	r1, [pc, #152]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d008      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a05e:	4b22      	ldr	r3, [pc, #136]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a06a:	491f      	ldr	r1, [pc, #124]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a07c:	4b1a      	ldr	r3, [pc, #104]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	4a19      	ldr	r2, [pc, #100]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a082:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a086:	6113      	str	r3, [r2, #16]
 800a088:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a08a:	691a      	ldr	r2, [r3, #16]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a092:	4915      	ldr	r1, [pc, #84]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a094:	4313      	orrs	r3, r2
 800a096:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da08      	bge.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a0a0:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ac:	490e      	ldr	r1, [pc, #56]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d009      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0be:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0cc:	4906      	ldr	r1, [pc, #24]	; (800a0e8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a0d2:	7dbb      	ldrb	r3, [r7, #22]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e000      	b.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	58024400 	.word	0x58024400

0800a0ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b090      	sub	sp, #64	; 0x40
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0fa:	f040 8089 	bne.w	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a0fe:	4b95      	ldr	r3, [pc, #596]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d87d      	bhi.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a14d 	.word	0x0800a14d
 800a11c:	0800a171 	.word	0x0800a171
 800a120:	0800a205 	.word	0x0800a205
 800a124:	0800a195 	.word	0x0800a195
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a128:	4b8a      	ldr	r3, [pc, #552]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a134:	d107      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 feba 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a144:	e3ef      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a14a:	e3ec      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a14c:	4b81      	ldr	r3, [pc, #516]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a158:	d107      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a15a:	f107 0318 	add.w	r3, r7, #24
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fc00 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a168:	e3dd      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a16e:	e3da      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a170:	4b78      	ldr	r3, [pc, #480]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a17c:	d107      	bne.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17e:	f107 030c 	add.w	r3, r7, #12
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fd42 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a18c:	e3cb      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a192:	e3c8      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a194:	4b6f      	ldr	r3, [pc, #444]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a198:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a19e:	4b6d      	ldr	r3, [pc, #436]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d10c      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d109      	bne.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1b0:	4b68      	ldr	r3, [pc, #416]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	08db      	lsrs	r3, r3, #3
 800a1b6:	f003 0303 	and.w	r3, r3, #3
 800a1ba:	4a67      	ldr	r2, [pc, #412]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a1bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1c2:	e01e      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c4:	4b63      	ldr	r3, [pc, #396]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d0:	d106      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d8:	d102      	bne.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a1da:	4b60      	ldr	r3, [pc, #384]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1de:	e010      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e0:	4b5c      	ldr	r3, [pc, #368]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1ec:	d106      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1f4:	d102      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a1f6:	4b5a      	ldr	r3, [pc, #360]	; (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1fa:	e002      	b.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a200:	e391      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a202:	e390      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a204:	4b57      	ldr	r3, [pc, #348]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a208:	e38d      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a20e:	e38a      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a216:	f040 80a7 	bne.w	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a21a:	4b4e      	ldr	r3, [pc, #312]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a21c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a21e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a222:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a22a:	d054      	beq.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a232:	f200 808b 	bhi.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a23c:	f000 8083 	beq.w	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a246:	f200 8081 	bhi.w	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a250:	d02f      	beq.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a258:	d878      	bhi.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d004      	beq.n	800a26a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a266:	d012      	beq.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800a268:	e070      	b.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a26a:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a276:	d107      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fe19 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a286:	e34e      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a28c:	e34b      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a28e:	4b31      	ldr	r3, [pc, #196]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a29a:	d107      	bne.n	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a29c:	f107 0318 	add.w	r3, r7, #24
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f000 fb5f 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2aa:	e33c      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2b0:	e339      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2b2:	4b28      	ldr	r3, [pc, #160]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2be:	d107      	bne.n	800a2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c0:	f107 030c 	add.w	r3, r7, #12
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f000 fca1 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2ce:	e32a      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2d4:	e327      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a2d6:	4b1f      	ldr	r3, [pc, #124]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2de:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2e0:	4b1c      	ldr	r3, [pc, #112]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0304 	and.w	r3, r3, #4
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	d10c      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800a2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a2f2:	4b18      	ldr	r3, [pc, #96]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	08db      	lsrs	r3, r3, #3
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	4a16      	ldr	r2, [pc, #88]	; (800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a304:	e01e      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a306:	4b13      	ldr	r3, [pc, #76]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a312:	d106      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a31a:	d102      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a31c:	4b0f      	ldr	r3, [pc, #60]	; (800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a320:	e010      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a322:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a32a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a32e:	d106      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800a330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a336:	d102      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a338:	4b09      	ldr	r3, [pc, #36]	; (800a360 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a33c:	e002      	b.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a342:	e2f0      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a344:	e2ef      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a346:	4b07      	ldr	r3, [pc, #28]	; (800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a34a:	e2ec      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a350:	e2e9      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a352:	bf00      	nop
 800a354:	58024400 	.word	0x58024400
 800a358:	03d09000 	.word	0x03d09000
 800a35c:	003d0900 	.word	0x003d0900
 800a360:	007a1200 	.word	0x007a1200
 800a364:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a36e:	f040 809c 	bne.w	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a372:	4b9d      	ldr	r3, [pc, #628]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a376:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a382:	d054      	beq.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a38a:	f200 808b 	bhi.w	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a394:	f000 8083 	beq.w	800a49e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a39a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a39e:	f200 8081 	bhi.w	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3a8:	d02f      	beq.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3b0:	d878      	bhi.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d004      	beq.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3be:	d012      	beq.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a3c0:	e070      	b.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3c2:	4b89      	ldr	r3, [pc, #548]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3ce:	d107      	bne.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fd6d 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a3de:	e2a2      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3e4:	e29f      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3e6:	4b80      	ldr	r3, [pc, #512]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3f2:	d107      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f4:	f107 0318 	add.w	r3, r7, #24
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 fab3 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a402:	e290      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a408:	e28d      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a40a:	4b77      	ldr	r3, [pc, #476]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a416:	d107      	bne.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fbf5 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a426:	e27e      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a42c:	e27b      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a42e:	4b6e      	ldr	r3, [pc, #440]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a436:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a438:	4b6b      	ldr	r3, [pc, #428]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0304 	and.w	r3, r3, #4
 800a440:	2b04      	cmp	r3, #4
 800a442:	d10c      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	2b00      	cmp	r3, #0
 800a448:	d109      	bne.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a44a:	4b67      	ldr	r3, [pc, #412]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	08db      	lsrs	r3, r3, #3
 800a450:	f003 0303 	and.w	r3, r3, #3
 800a454:	4a65      	ldr	r2, [pc, #404]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a456:	fa22 f303 	lsr.w	r3, r2, r3
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a45c:	e01e      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a45e:	4b62      	ldr	r3, [pc, #392]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a46a:	d106      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a472:	d102      	bne.n	800a47a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a474:	4b5e      	ldr	r3, [pc, #376]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a478:	e010      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a47a:	4b5b      	ldr	r3, [pc, #364]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a486:	d106      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48e:	d102      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a490:	4b58      	ldr	r3, [pc, #352]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a494:	e002      	b.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a49a:	e244      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a49c:	e243      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a49e:	4b56      	ldr	r3, [pc, #344]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a2:	e240      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a8:	e23d      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b0:	f040 80a7 	bne.w	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a4b4:	4b4c      	ldr	r3, [pc, #304]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a4bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4c4:	d055      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4cc:	f200 8096 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4d6:	f000 8084 	beq.w	800a5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4e0:	f200 808c 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ea:	d030      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4f2:	f200 8083 	bhi.w	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d004      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a502:	d012      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800a504:	e07a      	b.n	800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a506:	4b38      	ldr	r3, [pc, #224]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a50e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fccb 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a522:	e200      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a528:	e1fd      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a52a:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a532:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a538:	f107 0318 	add.w	r3, r7, #24
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fa11 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a546:	e1ee      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a54c:	e1eb      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a54e:	4b26      	ldr	r3, [pc, #152]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a55a:	d107      	bne.n	800a56c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a55c:	f107 030c 	add.w	r3, r7, #12
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fb53 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a56a:	e1dc      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a570:	e1d9      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a57a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a57c:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b04      	cmp	r3, #4
 800a586:	d10c      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800a588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d109      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a58e:	4b16      	ldr	r3, [pc, #88]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	08db      	lsrs	r3, r3, #3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	4a14      	ldr	r2, [pc, #80]	; (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a59a:	fa22 f303 	lsr.w	r3, r2, r3
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5a0:	e01e      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5a2:	4b11      	ldr	r3, [pc, #68]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d106      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5b6:	d102      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a5b8:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5bc:	e010      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5ca:	d106      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d2:	d102      	bne.n	800a5da <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a5d4:	4b07      	ldr	r3, [pc, #28]	; (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d8:	e002      	b.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a5de:	e1a2      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a5e0:	e1a1      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a5e2:	4b05      	ldr	r3, [pc, #20]	; (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5e6:	e19e      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a5e8:	58024400 	.word	0x58024400
 800a5ec:	03d09000 	.word	0x03d09000
 800a5f0:	003d0900 	.word	0x003d0900
 800a5f4:	007a1200 	.word	0x007a1200
 800a5f8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a600:	e191      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a608:	d173      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a60a:	4b9b      	ldr	r3, [pc, #620]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a60e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a612:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a61a:	d02f      	beq.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a622:	d863      	bhi.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a630:	d012      	beq.n	800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800a632:	e05b      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a634:	4b90      	ldr	r3, [pc, #576]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a63c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a640:	d107      	bne.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a642:	f107 0318 	add.w	r3, r7, #24
 800a646:	4618      	mov	r0, r3
 800a648:	f000 f98c 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a650:	e169      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a656:	e166      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a658:	4b87      	ldr	r3, [pc, #540]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a664:	d107      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a666:	f107 030c 	add.w	r3, r7, #12
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 face 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a674:	e157      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a676:	2300      	movs	r3, #0
 800a678:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a67a:	e154      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a67c:	4b7e      	ldr	r3, [pc, #504]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a67e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a680:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a684:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a686:	4b7c      	ldr	r3, [pc, #496]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f003 0304 	and.w	r3, r3, #4
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d10c      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a694:	2b00      	cmp	r3, #0
 800a696:	d109      	bne.n	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a698:	4b77      	ldr	r3, [pc, #476]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	08db      	lsrs	r3, r3, #3
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	4a76      	ldr	r2, [pc, #472]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a6a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6aa:	e01e      	b.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ac:	4b72      	ldr	r3, [pc, #456]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b8:	d106      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c0:	d102      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a6c2:	4b6f      	ldr	r3, [pc, #444]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6c6:	e010      	b.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6c8:	4b6b      	ldr	r3, [pc, #428]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6d4:	d106      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6dc:	d102      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a6de:	4b69      	ldr	r3, [pc, #420]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e2:	e002      	b.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a6e8:	e11d      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a6ea:	e11c      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f0:	e119      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f8:	d133      	bne.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a6fa:	4b5f      	ldr	r3, [pc, #380]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a702:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a706:	2b00      	cmp	r3, #0
 800a708:	d004      	beq.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800a70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a710:	d012      	beq.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a712:	e023      	b.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a714:	4b58      	ldr	r3, [pc, #352]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a71c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a720:	d107      	bne.n	800a732 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fbc4 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a730:	e0f9      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a736:	e0f6      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a738:	4b4f      	ldr	r3, [pc, #316]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a744:	d107      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a746:	f107 0318 	add.w	r3, r7, #24
 800a74a:	4618      	mov	r0, r3
 800a74c:	f000 f90a 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a754:	e0e7      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a75a:	e0e4      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a760:	e0e1      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a768:	f040 808e 	bne.w	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a76c:	4b42      	ldr	r3, [pc, #264]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a770:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a774:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a77c:	d06b      	beq.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a784:	d874      	bhi.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a78c:	d056      	beq.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a794:	d86c      	bhi.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a79c:	d03b      	beq.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7a4:	d864      	bhi.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ac:	d021      	beq.n	800a7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b4:	d85c      	bhi.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d004      	beq.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7c2:	d004      	beq.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800a7c4:	e054      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7c6:	f000 f8b7 	bl	800a938 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a7cc:	e0ab      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7ce:	4b2a      	ldr	r3, [pc, #168]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7da:	d107      	bne.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7dc:	f107 0318 	add.w	r3, r7, #24
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f8bf 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7ea:	e09c      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f0:	e099      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7f2:	4b21      	ldr	r3, [pc, #132]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7fe:	d107      	bne.n	800a810 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a800:	f107 030c 	add.w	r3, r7, #12
 800a804:	4618      	mov	r0, r3
 800a806:	f000 fa01 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a80e:	e08a      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a814:	e087      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d109      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	08db      	lsrs	r3, r3, #3
 800a828:	f003 0303 	and.w	r3, r3, #3
 800a82c:	4a13      	ldr	r2, [pc, #76]	; (800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a82e:	fa22 f303 	lsr.w	r3, r2, r3
 800a832:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a834:	e077      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a83a:	e074      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a848:	d102      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800a84a:	4b0d      	ldr	r3, [pc, #52]	; (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a84e:	e06a      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a854:	e067      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a856:	4b08      	ldr	r3, [pc, #32]	; (800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a85e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a862:	d102      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800a864:	4b07      	ldr	r3, [pc, #28]	; (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a868:	e05d      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a86e:	e05a      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a874:	e057      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a876:	bf00      	nop
 800a878:	58024400 	.word	0x58024400
 800a87c:	03d09000 	.word	0x03d09000
 800a880:	003d0900 	.word	0x003d0900
 800a884:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a88e:	d148      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a890:	4b27      	ldr	r3, [pc, #156]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a898:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a0:	d02a      	beq.n	800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8a8:	d838      	bhi.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b6:	d00d      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800a8b8:	e030      	b.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8ba:	4b1d      	ldr	r3, [pc, #116]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800a8c8:	4b1a      	ldr	r3, [pc, #104]	; (800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8cc:	e02b      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d2:	e028      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d4:	4b16      	ldr	r3, [pc, #88]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8e0:	d107      	bne.n	800a8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fae4 	bl	800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8f0:	e019      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f6:	e016      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8f8:	4b0d      	ldr	r3, [pc, #52]	; (800a930 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a904:	d107      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a906:	f107 0318 	add.w	r3, r7, #24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 f82a 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a914:	e007      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a91a:	e004      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800a91c:	2300      	movs	r3, #0
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a920:	e001      	b.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3740      	adds	r7, #64	; 0x40
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	58024400 	.word	0x58024400
 800a934:	007a1200 	.word	0x007a1200

0800a938 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a93c:	f7fe fc80 	bl	8009240 <HAL_RCC_GetHCLKFreq>
 800a940:	4602      	mov	r2, r0
 800a942:	4b06      	ldr	r3, [pc, #24]	; (800a95c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	091b      	lsrs	r3, r3, #4
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	4904      	ldr	r1, [pc, #16]	; (800a960 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a94e:	5ccb      	ldrb	r3, [r1, r3]
 800a950:	f003 031f 	and.w	r3, r3, #31
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a958:	4618      	mov	r0, r3
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	58024400 	.word	0x58024400
 800a960:	08019fb0 	.word	0x08019fb0

0800a964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a964:	b480      	push	{r7}
 800a966:	b089      	sub	sp, #36	; 0x24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a96c:	4ba1      	ldr	r3, [pc, #644]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a976:	4b9f      	ldr	r3, [pc, #636]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	0b1b      	lsrs	r3, r3, #12
 800a97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a980:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a982:	4b9c      	ldr	r3, [pc, #624]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	091b      	lsrs	r3, r3, #4
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a98e:	4b99      	ldr	r3, [pc, #612]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8111 	beq.w	800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	f000 8083 	beq.w	800aac0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	f200 80a1 	bhi.w	800ab04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d056      	beq.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9ce:	e099      	b.n	800ab04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9d0:	4b88      	ldr	r3, [pc, #544]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d02d      	beq.n	800aa38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9dc:	4b85      	ldr	r3, [pc, #532]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	08db      	lsrs	r3, r3, #3
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	4a84      	ldr	r2, [pc, #528]	; (800abf8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa06:	4b7b      	ldr	r3, [pc, #492]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa36:	e087      	b.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	4b6a      	ldr	r3, [pc, #424]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa7a:	e065      	b.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa8e:	4b59      	ldr	r3, [pc, #356]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aabe:	e043      	b.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad2:	4b48      	ldr	r3, [pc, #288]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab02:	e021      	b.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b37      	ldr	r3, [pc, #220]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab48:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4c:	0a5b      	lsrs	r3, r3, #9
 800ab4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab6e:	ee17 2a90 	vmov	r2, s15
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab76:	4b1f      	ldr	r3, [pc, #124]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab80:	ee07 3a90 	vmov	s15, r3
 800ab84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9c:	ee17 2a90 	vmov	r2, s15
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800aba4:	4b13      	ldr	r3, [pc, #76]	; (800abf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	0e1b      	lsrs	r3, r3, #24
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abca:	ee17 2a90 	vmov	r2, s15
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abd2:	e008      	b.n	800abe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	609a      	str	r2, [r3, #8]
}
 800abe6:	bf00      	nop
 800abe8:	3724      	adds	r7, #36	; 0x24
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	58024400 	.word	0x58024400
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	46000000 	.word	0x46000000
 800ac00:	4c742400 	.word	0x4c742400
 800ac04:	4a742400 	.word	0x4a742400
 800ac08:	4af42400 	.word	0x4af42400

0800ac0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b089      	sub	sp, #36	; 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac14:	4ba1      	ldr	r3, [pc, #644]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac1e:	4b9f      	ldr	r3, [pc, #636]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac22:	0d1b      	lsrs	r3, r3, #20
 800ac24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac2a:	4b9c      	ldr	r3, [pc, #624]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac36:	4b99      	ldr	r3, [pc, #612]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3a:	08db      	lsrs	r3, r3, #3
 800ac3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	fb02 f303 	mul.w	r3, r2, r3
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 8111 	beq.w	800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	f000 8083 	beq.w	800ad68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	f200 80a1 	bhi.w	800adac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d056      	beq.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac76:	e099      	b.n	800adac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac78:	4b88      	ldr	r3, [pc, #544]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d02d      	beq.n	800ace0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac84:	4b85      	ldr	r3, [pc, #532]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	08db      	lsrs	r3, r3, #3
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	4a84      	ldr	r2, [pc, #528]	; (800aea0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac90:	fa22 f303 	lsr.w	r3, r2, r3
 800ac94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	ee07 3a90 	vmov	s15, r3
 800ac9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acae:	4b7b      	ldr	r3, [pc, #492]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acde:	e087      	b.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf2:	4b6a      	ldr	r3, [pc, #424]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad22:	e065      	b.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	ee07 3a90 	vmov	s15, r3
 800ad2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad36:	4b59      	ldr	r3, [pc, #356]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad46:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad66:	e043      	b.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	ee07 3a90 	vmov	s15, r3
 800ad6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7a:	4b48      	ldr	r3, [pc, #288]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adaa:	e021      	b.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	ee07 3a90 	vmov	s15, r3
 800adb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbe:	4b37      	ldr	r3, [pc, #220]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adce:	ed97 6a03 	vldr	s12, [r7, #12]
 800add2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aea4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800add6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800adf0:	4b2a      	ldr	r3, [pc, #168]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	0a5b      	lsrs	r3, r3, #9
 800adf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae16:	ee17 2a90 	vmov	r2, s15
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae1e:	4b1f      	ldr	r3, [pc, #124]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae22:	0c1b      	lsrs	r3, r3, #16
 800ae24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae28:	ee07 3a90 	vmov	s15, r3
 800ae2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae38:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae44:	ee17 2a90 	vmov	r2, s15
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae4c:	4b13      	ldr	r3, [pc, #76]	; (800ae9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae50:	0e1b      	lsrs	r3, r3, #24
 800ae52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae72:	ee17 2a90 	vmov	r2, s15
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae7a:	e008      	b.n	800ae8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	609a      	str	r2, [r3, #8]
}
 800ae8e:	bf00      	nop
 800ae90:	3724      	adds	r7, #36	; 0x24
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	58024400 	.word	0x58024400
 800aea0:	03d09000 	.word	0x03d09000
 800aea4:	46000000 	.word	0x46000000
 800aea8:	4c742400 	.word	0x4c742400
 800aeac:	4a742400 	.word	0x4a742400
 800aeb0:	4af42400 	.word	0x4af42400

0800aeb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b089      	sub	sp, #36	; 0x24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aebc:	4ba0      	ldr	r3, [pc, #640]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800aec6:	4b9e      	ldr	r3, [pc, #632]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeca:	091b      	lsrs	r3, r3, #4
 800aecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aed0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aed2:	4b9b      	ldr	r3, [pc, #620]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aedc:	4b98      	ldr	r3, [pc, #608]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee0:	08db      	lsrs	r3, r3, #3
 800aee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	fb02 f303 	mul.w	r3, r2, r3
 800aeec:	ee07 3a90 	vmov	s15, r3
 800aef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 8111 	beq.w	800b122 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	2b02      	cmp	r3, #2
 800af04:	f000 8083 	beq.w	800b00e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	f200 80a1 	bhi.w	800b052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d056      	beq.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af1c:	e099      	b.n	800b052 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af1e:	4b88      	ldr	r3, [pc, #544]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	d02d      	beq.n	800af86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af2a:	4b85      	ldr	r3, [pc, #532]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	08db      	lsrs	r3, r3, #3
 800af30:	f003 0303 	and.w	r3, r3, #3
 800af34:	4a83      	ldr	r2, [pc, #524]	; (800b144 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af36:	fa22 f303 	lsr.w	r3, r2, r3
 800af3a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	ee07 3a90 	vmov	s15, r3
 800af4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af54:	4b7a      	ldr	r3, [pc, #488]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af64:	ed97 6a03 	vldr	s12, [r7, #12]
 800af68:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af84:	e087      	b.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af98:	4b69      	ldr	r3, [pc, #420]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afc8:	e065      	b.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	ee07 3a90 	vmov	s15, r3
 800afd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b150 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afdc:	4b58      	ldr	r3, [pc, #352]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afec:	ed97 6a03 	vldr	s12, [r7, #12]
 800aff0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800affc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b008:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b00c:	e043      	b.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	ee07 3a90 	vmov	s15, r3
 800b014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b018:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b01c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b020:	4b47      	ldr	r3, [pc, #284]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b028:	ee07 3a90 	vmov	s15, r3
 800b02c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b030:	ed97 6a03 	vldr	s12, [r7, #12]
 800b034:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b03c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b04c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b050:	e021      	b.n	800b096 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	ee07 3a90 	vmov	s15, r3
 800b058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b05c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b064:	4b36      	ldr	r3, [pc, #216]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b06c:	ee07 3a90 	vmov	s15, r3
 800b070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b074:	ed97 6a03 	vldr	s12, [r7, #12]
 800b078:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b148 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b07c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b090:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b094:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b096:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09a:	0a5b      	lsrs	r3, r3, #9
 800b09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a0:	ee07 3a90 	vmov	s15, r3
 800b0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0bc:	ee17 2a90 	vmov	r2, s15
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b0c4:	4b1e      	ldr	r3, [pc, #120]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c8:	0c1b      	lsrs	r3, r3, #16
 800b0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ea:	ee17 2a90 	vmov	r2, s15
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b0f2:	4b13      	ldr	r3, [pc, #76]	; (800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	0e1b      	lsrs	r3, r3, #24
 800b0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b118:	ee17 2a90 	vmov	r2, s15
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b120:	e008      	b.n	800b134 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	609a      	str	r2, [r3, #8]
}
 800b134:	bf00      	nop
 800b136:	3724      	adds	r7, #36	; 0x24
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	58024400 	.word	0x58024400
 800b144:	03d09000 	.word	0x03d09000
 800b148:	46000000 	.word	0x46000000
 800b14c:	4c742400 	.word	0x4c742400
 800b150:	4a742400 	.word	0x4a742400
 800b154:	4af42400 	.word	0x4af42400

0800b158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b166:	4b53      	ldr	r3, [pc, #332]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d101      	bne.n	800b176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e099      	b.n	800b2aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b176:	4b4f      	ldr	r3, [pc, #316]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a4e      	ldr	r2, [pc, #312]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b17c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b182:	f7f8 f94b 	bl	800341c <HAL_GetTick>
 800b186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b188:	e008      	b.n	800b19c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b18a:	f7f8 f947 	bl	800341c <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	2b02      	cmp	r3, #2
 800b196:	d901      	bls.n	800b19c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e086      	b.n	800b2aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b19c:	4b45      	ldr	r3, [pc, #276]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1f0      	bne.n	800b18a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1a8:	4b42      	ldr	r3, [pc, #264]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	031b      	lsls	r3, r3, #12
 800b1b6:	493f      	ldr	r1, [pc, #252]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	025b      	lsls	r3, r3, #9
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	041b      	lsls	r3, r3, #16
 800b1da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	061b      	lsls	r3, r3, #24
 800b1e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1ec:	4931      	ldr	r1, [pc, #196]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1f2:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	492d      	ldr	r1, [pc, #180]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b200:	4313      	orrs	r3, r2
 800b202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b204:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	f023 0220 	bic.w	r2, r3, #32
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	4928      	ldr	r1, [pc, #160]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b212:	4313      	orrs	r3, r2
 800b214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b216:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	4a26      	ldr	r2, [pc, #152]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b21c:	f023 0310 	bic.w	r3, r3, #16
 800b220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b226:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <RCCEx_PLL2_Config+0x160>)
 800b228:	4013      	ands	r3, r2
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	69d2      	ldr	r2, [r2, #28]
 800b22e:	00d2      	lsls	r2, r2, #3
 800b230:	4920      	ldr	r1, [pc, #128]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b236:	4b1f      	ldr	r3, [pc, #124]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b23c:	f043 0310 	orr.w	r3, r3, #16
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d106      	bne.n	800b256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b248:	4b1a      	ldr	r3, [pc, #104]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a19      	ldr	r2, [pc, #100]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b24e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b252:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b254:	e00f      	b.n	800b276 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d106      	bne.n	800b26a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b25c:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	4a14      	ldr	r2, [pc, #80]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b266:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b268:	e005      	b.n	800b276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	4a11      	ldr	r2, [pc, #68]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b276:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b282:	f7f8 f8cb 	bl	800341c <HAL_GetTick>
 800b286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b288:	e008      	b.n	800b29c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b28a:	f7f8 f8c7 	bl	800341c <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d901      	bls.n	800b29c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e006      	b.n	800b2aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <RCCEx_PLL2_Config+0x15c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d0f0      	beq.n	800b28a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	ffff0007 	.word	0xffff0007

0800b2bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2ca:	4b53      	ldr	r3, [pc, #332]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b03      	cmp	r3, #3
 800b2d4:	d101      	bne.n	800b2da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e099      	b.n	800b40e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2da:	4b4f      	ldr	r3, [pc, #316]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4a4e      	ldr	r2, [pc, #312]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b2e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e6:	f7f8 f899 	bl	800341c <HAL_GetTick>
 800b2ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2ec:	e008      	b.n	800b300 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2ee:	f7f8 f895 	bl	800341c <HAL_GetTick>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	1ad3      	subs	r3, r2, r3
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d901      	bls.n	800b300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e086      	b.n	800b40e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b300:	4b45      	ldr	r3, [pc, #276]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f0      	bne.n	800b2ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b30c:	4b42      	ldr	r3, [pc, #264]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b310:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	051b      	lsls	r3, r3, #20
 800b31a:	493f      	ldr	r1, [pc, #252]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	628b      	str	r3, [r1, #40]	; 0x28
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	3b01      	subs	r3, #1
 800b326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	3b01      	subs	r3, #1
 800b330:	025b      	lsls	r3, r3, #9
 800b332:	b29b      	uxth	r3, r3
 800b334:	431a      	orrs	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	041b      	lsls	r3, r3, #16
 800b33e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b342:	431a      	orrs	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	3b01      	subs	r3, #1
 800b34a:	061b      	lsls	r3, r3, #24
 800b34c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b350:	4931      	ldr	r1, [pc, #196]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b352:	4313      	orrs	r3, r2
 800b354:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b356:	4b30      	ldr	r3, [pc, #192]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	492d      	ldr	r1, [pc, #180]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b364:	4313      	orrs	r3, r2
 800b366:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b368:	4b2b      	ldr	r3, [pc, #172]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	699b      	ldr	r3, [r3, #24]
 800b374:	4928      	ldr	r1, [pc, #160]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b376:	4313      	orrs	r3, r2
 800b378:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b37a:	4b27      	ldr	r3, [pc, #156]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37e:	4a26      	ldr	r2, [pc, #152]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b386:	4b24      	ldr	r3, [pc, #144]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b38a:	4b24      	ldr	r3, [pc, #144]	; (800b41c <RCCEx_PLL3_Config+0x160>)
 800b38c:	4013      	ands	r3, r2
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	69d2      	ldr	r2, [r2, #28]
 800b392:	00d2      	lsls	r2, r2, #3
 800b394:	4920      	ldr	r1, [pc, #128]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b396:	4313      	orrs	r3, r2
 800b398:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b39a:	4b1f      	ldr	r3, [pc, #124]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39e:	4a1e      	ldr	r2, [pc, #120]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3ac:	4b1a      	ldr	r3, [pc, #104]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	4a19      	ldr	r2, [pc, #100]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3b8:	e00f      	b.n	800b3da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d106      	bne.n	800b3ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3c0:	4b15      	ldr	r3, [pc, #84]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	4a14      	ldr	r2, [pc, #80]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3cc:	e005      	b.n	800b3da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3ce:	4b12      	ldr	r3, [pc, #72]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	4a11      	ldr	r2, [pc, #68]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3da:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a0e      	ldr	r2, [pc, #56]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3e6:	f7f8 f819 	bl	800341c <HAL_GetTick>
 800b3ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3ec:	e008      	b.n	800b400 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3ee:	f7f8 f815 	bl	800341c <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d901      	bls.n	800b400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e006      	b.n	800b40e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b400:	4b05      	ldr	r3, [pc, #20]	; (800b418 <RCCEx_PLL3_Config+0x15c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f0      	beq.n	800b3ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	58024400 	.word	0x58024400
 800b41c:	ffff0007 	.word	0xffff0007

0800b420 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d067      	beq.n	800b502 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f7f6 fbfa 	bl	8001c40 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	22ca      	movs	r2, #202	; 0xca
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2253      	movs	r2, #83	; 0x53
 800b462:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f879 	bl	800b55c <RTC_EnterInitMode>
 800b46a:	4603      	mov	r3, r0
 800b46c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b46e:	7bfb      	ldrb	r3, [r7, #15]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d13b      	bne.n	800b4ec <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	6899      	ldr	r1, [r3, #8]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	4b23      	ldr	r3, [pc, #140]	; (800b50c <HAL_RTC_Init+0xec>)
 800b480:	400b      	ands	r3, r1
 800b482:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	6899      	ldr	r1, [r3, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	431a      	orrs	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	431a      	orrs	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	430a      	orrs	r2, r1
 800b4a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	0419      	lsls	r1, r3, #16
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f885 	bl	800b5c4 <RTC_ExitInitMode>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d113      	bne.n	800b4ec <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 0203 	bic.w	r2, r2, #3
 800b4d2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	69da      	ldr	r2, [r3, #28]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	695b      	ldr	r3, [r3, #20]
 800b4e2:	431a      	orrs	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	430a      	orrs	r2, r1
 800b4ea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	22ff      	movs	r2, #255	; 0xff
 800b4f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b502:	7bfb      	ldrb	r3, [r7, #15]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	ff8fffbf 	.word	0xff8fffbf

0800b510 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b526:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b528:	f7f7 ff78 	bl	800341c <HAL_GetTick>
 800b52c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b52e:	e009      	b.n	800b544 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b530:	f7f7 ff74 	bl	800341c <HAL_GetTick>
 800b534:	4602      	mov	r2, r0
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b53e:	d901      	bls.n	800b544 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e007      	b.n	800b554 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0ee      	beq.n	800b530 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b564:	2300      	movs	r3, #0
 800b566:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b572:	2b00      	cmp	r3, #0
 800b574:	d120      	bne.n	800b5b8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f04f 32ff 	mov.w	r2, #4294967295
 800b57e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b580:	f7f7 ff4c 	bl	800341c <HAL_GetTick>
 800b584:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b586:	e00d      	b.n	800b5a4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b588:	f7f7 ff48 	bl	800341c <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b596:	d905      	bls.n	800b5a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2203      	movs	r2, #3
 800b5a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <RTC_EnterInitMode+0x5c>
 800b5b2:	7bfb      	ldrb	r3, [r7, #15]
 800b5b4:	2b03      	cmp	r3, #3
 800b5b6:	d1e7      	bne.n	800b588 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	4a19      	ldr	r2, [pc, #100]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b5d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5da:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b5dc:	4b17      	ldr	r3, [pc, #92]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10c      	bne.n	800b602 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ff91 	bl	800b510 <HAL_RTC_WaitForSynchro>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01e      	beq.n	800b632 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	73fb      	strb	r3, [r7, #15]
 800b600:	e017      	b.n	800b632 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b602:	4b0e      	ldr	r3, [pc, #56]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	4a0d      	ldr	r2, [pc, #52]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b608:	f023 0320 	bic.w	r3, r3, #32
 800b60c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ff7e 	bl	800b510 <HAL_RTC_WaitForSynchro>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d005      	beq.n	800b626 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2203      	movs	r2, #3
 800b61e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	4a04      	ldr	r2, [pc, #16]	; (800b63c <RTC_ExitInitMode+0x78>)
 800b62c:	f043 0320 	orr.w	r3, r3, #32
 800b630:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b632:	7bfb      	ldrb	r3, [r7, #15]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	58004000 	.word	0x58004000

0800b640 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e0f1      	b.n	800b836 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a78      	ldr	r2, [pc, #480]	; (800b840 <HAL_SPI_Init+0x200>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d00f      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a77      	ldr	r2, [pc, #476]	; (800b844 <HAL_SPI_Init+0x204>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00a      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a75      	ldr	r2, [pc, #468]	; (800b848 <HAL_SPI_Init+0x208>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d005      	beq.n	800b682 <HAL_SPI_Init+0x42>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	2b0f      	cmp	r3, #15
 800b67c:	d901      	bls.n	800b682 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e0d9      	b.n	800b836 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f8e2 	bl	800b84c <SPI_GetPacketSize>
 800b688:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a6c      	ldr	r2, [pc, #432]	; (800b840 <HAL_SPI_Init+0x200>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00c      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a6a      	ldr	r2, [pc, #424]	; (800b844 <HAL_SPI_Init+0x204>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d007      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a69      	ldr	r2, [pc, #420]	; (800b848 <HAL_SPI_Init+0x208>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d002      	beq.n	800b6ae <HAL_SPI_Init+0x6e>
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2b08      	cmp	r3, #8
 800b6ac:	d811      	bhi.n	800b6d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b6b2:	4a63      	ldr	r2, [pc, #396]	; (800b840 <HAL_SPI_Init+0x200>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d009      	beq.n	800b6cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a61      	ldr	r2, [pc, #388]	; (800b844 <HAL_SPI_Init+0x204>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d004      	beq.n	800b6cc <HAL_SPI_Init+0x8c>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a60      	ldr	r2, [pc, #384]	; (800b848 <HAL_SPI_Init+0x208>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d104      	bne.n	800b6d6 <HAL_SPI_Init+0x96>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b10      	cmp	r3, #16
 800b6d0:	d901      	bls.n	800b6d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e0af      	b.n	800b836 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7f6 fb2e 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f022 0201 	bic.w	r2, r2, #1
 800b706:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b712:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b71c:	d119      	bne.n	800b752 <HAL_SPI_Init+0x112>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b726:	d103      	bne.n	800b730 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d008      	beq.n	800b742 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10c      	bne.n	800b752 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b73c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b740:	d107      	bne.n	800b752 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	69da      	ldr	r2, [r3, #28]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75a:	431a      	orrs	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b764:	ea42 0103 	orr.w	r1, r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	431a      	orrs	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7b2:	ea42 0103 	orr.w	r1, r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d113      	bne.n	800b7f2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f022 0201 	bic.w	r2, r2, #1
 800b800:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	40013000 	.word	0x40013000
 800b844:	40003800 	.word	0x40003800
 800b848:	40003c00 	.word	0x40003c00

0800b84c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b858:	095b      	lsrs	r3, r3, #5
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	3307      	adds	r3, #7
 800b86a:	08db      	lsrs	r3, r3, #3
 800b86c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	fb02 f303 	mul.w	r3, r2, r3
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e049      	b.n	800b928 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d106      	bne.n	800b8ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7f7 f9c1 	bl	8002c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2202      	movs	r2, #2
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f000 fb39 	bl	800bf38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e049      	b.n	800b9d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d106      	bne.n	800b95c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7f7 f88c 	bl	8002a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	3304      	adds	r3, #4
 800b96c:	4619      	mov	r1, r3
 800b96e:	4610      	mov	r0, r2
 800b970:	f000 fae2 	bl	800bf38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d101      	bne.n	800b9f0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e049      	b.n	800ba84 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7f7 f94d 	bl	8002ca4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	f000 fa8b 	bl	800bf38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b086      	sub	sp, #24
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d101      	bne.n	800baa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e08f      	b.n	800bbc0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d106      	bne.n	800baba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7f7 f871 	bl	8002b9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2202      	movs	r2, #2
 800babe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6899      	ldr	r1, [r3, #8]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	4b3e      	ldr	r3, [pc, #248]	; (800bbc8 <HAL_TIM_Encoder_Init+0x13c>)
 800bace:	400b      	ands	r3, r1
 800bad0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3304      	adds	r3, #4
 800bada:	4619      	mov	r1, r3
 800badc:	4610      	mov	r0, r2
 800bade:	f000 fa2b 	bl	800bf38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6a1b      	ldr	r3, [r3, #32]
 800baf8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	4b31      	ldr	r3, [pc, #196]	; (800bbcc <HAL_TIM_Encoder_Init+0x140>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	689a      	ldr	r2, [r3, #8]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	021b      	lsls	r3, r3, #8
 800bb16:	4313      	orrs	r3, r2
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	4b2b      	ldr	r3, [pc, #172]	; (800bbd0 <HAL_TIM_Encoder_Init+0x144>)
 800bb22:	4013      	ands	r3, r2
 800bb24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	4b2a      	ldr	r3, [pc, #168]	; (800bbd4 <HAL_TIM_Encoder_Init+0x148>)
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	69db      	ldr	r3, [r3, #28]
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	691b      	ldr	r3, [r3, #16]
 800bb44:	011a      	lsls	r2, r3, #4
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	031b      	lsls	r3, r3, #12
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	695b      	ldr	r3, [r3, #20]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2201      	movs	r2, #1
 800bba2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2201      	movs	r2, #1
 800bbaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	fffebff8 	.word	0xfffebff8
 800bbcc:	fffffcfc 	.word	0xfffffcfc
 800bbd0:	fffff3f3 	.word	0xfffff3f3
 800bbd4:	ffff0f0f 	.word	0xffff0f0f

0800bbd8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d101      	bne.n	800bbf6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	e088      	b.n	800bd08 <HAL_TIM_IC_ConfigChannel+0x130>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d11b      	bne.n	800bc3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	6819      	ldr	r1, [r3, #0]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f000 fd0c 	bl	800c630 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	699a      	ldr	r2, [r3, #24]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f022 020c 	bic.w	r2, r2, #12
 800bc26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6999      	ldr	r1, [r3, #24]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	430a      	orrs	r2, r1
 800bc38:	619a      	str	r2, [r3, #24]
 800bc3a:	e060      	b.n	800bcfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d11c      	bne.n	800bc7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	6819      	ldr	r1, [r3, #0]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	685a      	ldr	r2, [r3, #4]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f000 fd6d 	bl	800c730 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	699a      	ldr	r2, [r3, #24]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bc64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	6999      	ldr	r1, [r3, #24]
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	021a      	lsls	r2, r3, #8
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	619a      	str	r2, [r3, #24]
 800bc7a:	e040      	b.n	800bcfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b08      	cmp	r3, #8
 800bc80:	d11b      	bne.n	800bcba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	6818      	ldr	r0, [r3, #0]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6819      	ldr	r1, [r3, #0]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f000 fd8a 	bl	800c7aa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69da      	ldr	r2, [r3, #28]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f022 020c 	bic.w	r2, r2, #12
 800bca4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69d9      	ldr	r1, [r3, #28]
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	689a      	ldr	r2, [r3, #8]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	61da      	str	r2, [r3, #28]
 800bcb8:	e021      	b.n	800bcfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b0c      	cmp	r3, #12
 800bcbe:	d11c      	bne.n	800bcfa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6818      	ldr	r0, [r3, #0]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	6819      	ldr	r1, [r3, #0]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f000 fda7 	bl	800c822 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	69da      	ldr	r2, [r3, #28]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bce2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	69d9      	ldr	r1, [r3, #28]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	021a      	lsls	r2, r3, #8
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	61da      	str	r2, [r3, #28]
 800bcf8:	e001      	b.n	800bcfe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d101      	bne.n	800bd2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd2a:	2302      	movs	r3, #2
 800bd2c:	e0ff      	b.n	800bf2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b14      	cmp	r3, #20
 800bd3a:	f200 80f0 	bhi.w	800bf1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd99 	.word	0x0800bd99
 800bd48:	0800bf1f 	.word	0x0800bf1f
 800bd4c:	0800bf1f 	.word	0x0800bf1f
 800bd50:	0800bf1f 	.word	0x0800bf1f
 800bd54:	0800bdd9 	.word	0x0800bdd9
 800bd58:	0800bf1f 	.word	0x0800bf1f
 800bd5c:	0800bf1f 	.word	0x0800bf1f
 800bd60:	0800bf1f 	.word	0x0800bf1f
 800bd64:	0800be1b 	.word	0x0800be1b
 800bd68:	0800bf1f 	.word	0x0800bf1f
 800bd6c:	0800bf1f 	.word	0x0800bf1f
 800bd70:	0800bf1f 	.word	0x0800bf1f
 800bd74:	0800be5b 	.word	0x0800be5b
 800bd78:	0800bf1f 	.word	0x0800bf1f
 800bd7c:	0800bf1f 	.word	0x0800bf1f
 800bd80:	0800bf1f 	.word	0x0800bf1f
 800bd84:	0800be9d 	.word	0x0800be9d
 800bd88:	0800bf1f 	.word	0x0800bf1f
 800bd8c:	0800bf1f 	.word	0x0800bf1f
 800bd90:	0800bf1f 	.word	0x0800bf1f
 800bd94:	0800bedd 	.word	0x0800bedd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68b9      	ldr	r1, [r7, #8]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 f970 	bl	800c084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	699a      	ldr	r2, [r3, #24]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f042 0208 	orr.w	r2, r2, #8
 800bdb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	699a      	ldr	r2, [r3, #24]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0204 	bic.w	r2, r2, #4
 800bdc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6999      	ldr	r1, [r3, #24]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	691a      	ldr	r2, [r3, #16]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	619a      	str	r2, [r3, #24]
      break;
 800bdd6:	e0a5      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68b9      	ldr	r1, [r7, #8]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 f9e0 	bl	800c1a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699a      	ldr	r2, [r3, #24]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6999      	ldr	r1, [r3, #24]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	021a      	lsls	r2, r3, #8
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	430a      	orrs	r2, r1
 800be16:	619a      	str	r2, [r3, #24]
      break;
 800be18:	e084      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 fa49 	bl	800c2b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	69da      	ldr	r2, [r3, #28]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0208 	orr.w	r2, r2, #8
 800be34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69da      	ldr	r2, [r3, #28]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f022 0204 	bic.w	r2, r2, #4
 800be44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69d9      	ldr	r1, [r3, #28]
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	61da      	str	r2, [r3, #28]
      break;
 800be58:	e064      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fab1 	bl	800c3c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69da      	ldr	r2, [r3, #28]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69d9      	ldr	r1, [r3, #28]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	021a      	lsls	r2, r3, #8
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	430a      	orrs	r2, r1
 800be98:	61da      	str	r2, [r3, #28]
      break;
 800be9a:	e043      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68b9      	ldr	r1, [r7, #8]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 fafa 	bl	800c49c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0208 	orr.w	r2, r2, #8
 800beb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f022 0204 	bic.w	r2, r2, #4
 800bec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	691a      	ldr	r2, [r3, #16]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800beda:	e023      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fb3e 	bl	800c564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	021a      	lsls	r2, r3, #8
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	430a      	orrs	r2, r1
 800bf1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf1c:	e002      	b.n	800bf24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	75fb      	strb	r3, [r7, #23]
      break;
 800bf22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop

0800bf38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a44      	ldr	r2, [pc, #272]	; (800c05c <TIM_Base_SetConfig+0x124>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d013      	beq.n	800bf78 <TIM_Base_SetConfig+0x40>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf56:	d00f      	beq.n	800bf78 <TIM_Base_SetConfig+0x40>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a41      	ldr	r2, [pc, #260]	; (800c060 <TIM_Base_SetConfig+0x128>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00b      	beq.n	800bf78 <TIM_Base_SetConfig+0x40>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a40      	ldr	r2, [pc, #256]	; (800c064 <TIM_Base_SetConfig+0x12c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d007      	beq.n	800bf78 <TIM_Base_SetConfig+0x40>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a3f      	ldr	r2, [pc, #252]	; (800c068 <TIM_Base_SetConfig+0x130>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d003      	beq.n	800bf78 <TIM_Base_SetConfig+0x40>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a3e      	ldr	r2, [pc, #248]	; (800c06c <TIM_Base_SetConfig+0x134>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d108      	bne.n	800bf8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a33      	ldr	r2, [pc, #204]	; (800c05c <TIM_Base_SetConfig+0x124>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d027      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf98:	d023      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a30      	ldr	r2, [pc, #192]	; (800c060 <TIM_Base_SetConfig+0x128>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d01f      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a2f      	ldr	r2, [pc, #188]	; (800c064 <TIM_Base_SetConfig+0x12c>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d01b      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a2e      	ldr	r2, [pc, #184]	; (800c068 <TIM_Base_SetConfig+0x130>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d017      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a2d      	ldr	r2, [pc, #180]	; (800c06c <TIM_Base_SetConfig+0x134>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d013      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a2c      	ldr	r2, [pc, #176]	; (800c070 <TIM_Base_SetConfig+0x138>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d00f      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a2b      	ldr	r2, [pc, #172]	; (800c074 <TIM_Base_SetConfig+0x13c>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d00b      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a2a      	ldr	r2, [pc, #168]	; (800c078 <TIM_Base_SetConfig+0x140>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d007      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a29      	ldr	r2, [pc, #164]	; (800c07c <TIM_Base_SetConfig+0x144>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d003      	beq.n	800bfe2 <TIM_Base_SetConfig+0xaa>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a28      	ldr	r2, [pc, #160]	; (800c080 <TIM_Base_SetConfig+0x148>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d108      	bne.n	800bff4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a10      	ldr	r2, [pc, #64]	; (800c05c <TIM_Base_SetConfig+0x124>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d00f      	beq.n	800c040 <TIM_Base_SetConfig+0x108>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a12      	ldr	r2, [pc, #72]	; (800c06c <TIM_Base_SetConfig+0x134>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d00b      	beq.n	800c040 <TIM_Base_SetConfig+0x108>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	4a11      	ldr	r2, [pc, #68]	; (800c070 <TIM_Base_SetConfig+0x138>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d007      	beq.n	800c040 <TIM_Base_SetConfig+0x108>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a10      	ldr	r2, [pc, #64]	; (800c074 <TIM_Base_SetConfig+0x13c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d003      	beq.n	800c040 <TIM_Base_SetConfig+0x108>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a0f      	ldr	r2, [pc, #60]	; (800c078 <TIM_Base_SetConfig+0x140>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d103      	bne.n	800c048 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	691a      	ldr	r2, [r3, #16]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	615a      	str	r2, [r3, #20]
}
 800c04e:	bf00      	nop
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	40010000 	.word	0x40010000
 800c060:	40000400 	.word	0x40000400
 800c064:	40000800 	.word	0x40000800
 800c068:	40000c00 	.word	0x40000c00
 800c06c:	40010400 	.word	0x40010400
 800c070:	40014000 	.word	0x40014000
 800c074:	40014400 	.word	0x40014400
 800c078:	40014800 	.word	0x40014800
 800c07c:	4000e000 	.word	0x4000e000
 800c080:	4000e400 	.word	0x4000e400

0800c084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6a1b      	ldr	r3, [r3, #32]
 800c092:	f023 0201 	bic.w	r2, r3, #1
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4b37      	ldr	r3, [pc, #220]	; (800c18c <TIM_OC1_SetConfig+0x108>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68fa      	ldr	r2, [r7, #12]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f023 0302 	bic.w	r3, r3, #2
 800c0cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	4a2d      	ldr	r2, [pc, #180]	; (800c190 <TIM_OC1_SetConfig+0x10c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d00f      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4a2c      	ldr	r2, [pc, #176]	; (800c194 <TIM_OC1_SetConfig+0x110>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d00b      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	4a2b      	ldr	r2, [pc, #172]	; (800c198 <TIM_OC1_SetConfig+0x114>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d007      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a2a      	ldr	r2, [pc, #168]	; (800c19c <TIM_OC1_SetConfig+0x118>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d003      	beq.n	800c100 <TIM_OC1_SetConfig+0x7c>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a29      	ldr	r2, [pc, #164]	; (800c1a0 <TIM_OC1_SetConfig+0x11c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d10c      	bne.n	800c11a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f023 0308 	bic.w	r3, r3, #8
 800c106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	4313      	orrs	r3, r2
 800c110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f023 0304 	bic.w	r3, r3, #4
 800c118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a1c      	ldr	r2, [pc, #112]	; (800c190 <TIM_OC1_SetConfig+0x10c>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d00f      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a1b      	ldr	r2, [pc, #108]	; (800c194 <TIM_OC1_SetConfig+0x110>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d00b      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a1a      	ldr	r2, [pc, #104]	; (800c198 <TIM_OC1_SetConfig+0x114>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d007      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a19      	ldr	r2, [pc, #100]	; (800c19c <TIM_OC1_SetConfig+0x118>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d003      	beq.n	800c142 <TIM_OC1_SetConfig+0xbe>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a18      	ldr	r2, [pc, #96]	; (800c1a0 <TIM_OC1_SetConfig+0x11c>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d111      	bne.n	800c166 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	4313      	orrs	r3, r2
 800c15a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	4313      	orrs	r3, r2
 800c164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	693a      	ldr	r2, [r7, #16]
 800c16a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685a      	ldr	r2, [r3, #4]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	621a      	str	r2, [r3, #32]
}
 800c180:	bf00      	nop
 800c182:	371c      	adds	r7, #28
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	fffeff8f 	.word	0xfffeff8f
 800c190:	40010000 	.word	0x40010000
 800c194:	40010400 	.word	0x40010400
 800c198:	40014000 	.word	0x40014000
 800c19c:	40014400 	.word	0x40014400
 800c1a0:	40014800 	.word	0x40014800

0800c1a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b087      	sub	sp, #28
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	f023 0210 	bic.w	r2, r3, #16
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	699b      	ldr	r3, [r3, #24]
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	4b34      	ldr	r3, [pc, #208]	; (800c2a0 <TIM_OC2_SetConfig+0xfc>)
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	021b      	lsls	r3, r3, #8
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f023 0320 	bic.w	r3, r3, #32
 800c1ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4a29      	ldr	r2, [pc, #164]	; (800c2a4 <TIM_OC2_SetConfig+0x100>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d003      	beq.n	800c20c <TIM_OC2_SetConfig+0x68>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a28      	ldr	r2, [pc, #160]	; (800c2a8 <TIM_OC2_SetConfig+0x104>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d10d      	bne.n	800c228 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	011b      	lsls	r3, r3, #4
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a1e      	ldr	r2, [pc, #120]	; (800c2a4 <TIM_OC2_SetConfig+0x100>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d00f      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a1d      	ldr	r2, [pc, #116]	; (800c2a8 <TIM_OC2_SetConfig+0x104>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00b      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a1c      	ldr	r2, [pc, #112]	; (800c2ac <TIM_OC2_SetConfig+0x108>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d007      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a1b      	ldr	r2, [pc, #108]	; (800c2b0 <TIM_OC2_SetConfig+0x10c>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d003      	beq.n	800c250 <TIM_OC2_SetConfig+0xac>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a1a      	ldr	r2, [pc, #104]	; (800c2b4 <TIM_OC2_SetConfig+0x110>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d113      	bne.n	800c278 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c256:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c25e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4313      	orrs	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4313      	orrs	r3, r2
 800c276:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	621a      	str	r2, [r3, #32]
}
 800c292:	bf00      	nop
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	feff8fff 	.word	0xfeff8fff
 800c2a4:	40010000 	.word	0x40010000
 800c2a8:	40010400 	.word	0x40010400
 800c2ac:	40014000 	.word	0x40014000
 800c2b0:	40014400 	.word	0x40014400
 800c2b4:	40014800 	.word	0x40014800

0800c2b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a1b      	ldr	r3, [r3, #32]
 800c2d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	69db      	ldr	r3, [r3, #28]
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4b33      	ldr	r3, [pc, #204]	; (800c3b0 <TIM_OC3_SetConfig+0xf8>)
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0303 	bic.w	r3, r3, #3
 800c2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a28      	ldr	r2, [pc, #160]	; (800c3b4 <TIM_OC3_SetConfig+0xfc>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d003      	beq.n	800c31e <TIM_OC3_SetConfig+0x66>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a27      	ldr	r2, [pc, #156]	; (800c3b8 <TIM_OC3_SetConfig+0x100>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d10d      	bne.n	800c33a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68db      	ldr	r3, [r3, #12]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	4313      	orrs	r3, r2
 800c330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a1d      	ldr	r2, [pc, #116]	; (800c3b4 <TIM_OC3_SetConfig+0xfc>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d00f      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a1c      	ldr	r2, [pc, #112]	; (800c3b8 <TIM_OC3_SetConfig+0x100>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d00b      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a1b      	ldr	r2, [pc, #108]	; (800c3bc <TIM_OC3_SetConfig+0x104>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d007      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a1a      	ldr	r2, [pc, #104]	; (800c3c0 <TIM_OC3_SetConfig+0x108>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d003      	beq.n	800c362 <TIM_OC3_SetConfig+0xaa>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a19      	ldr	r2, [pc, #100]	; (800c3c4 <TIM_OC3_SetConfig+0x10c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d113      	bne.n	800c38a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	011b      	lsls	r3, r3, #4
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	011b      	lsls	r3, r3, #4
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685a      	ldr	r2, [r3, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	697a      	ldr	r2, [r7, #20]
 800c3a2:	621a      	str	r2, [r3, #32]
}
 800c3a4:	bf00      	nop
 800c3a6:	371c      	adds	r7, #28
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	fffeff8f 	.word	0xfffeff8f
 800c3b4:	40010000 	.word	0x40010000
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40014000 	.word	0x40014000
 800c3c0:	40014400 	.word	0x40014400
 800c3c4:	40014800 	.word	0x40014800

0800c3c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <TIM_OC4_SetConfig+0xbc>)
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	021b      	lsls	r3, r3, #8
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	693a      	ldr	r2, [r7, #16]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	4a19      	ldr	r2, [pc, #100]	; (800c488 <TIM_OC4_SetConfig+0xc0>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d00f      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	4a18      	ldr	r2, [pc, #96]	; (800c48c <TIM_OC4_SetConfig+0xc4>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d00b      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a17      	ldr	r2, [pc, #92]	; (800c490 <TIM_OC4_SetConfig+0xc8>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d007      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a16      	ldr	r2, [pc, #88]	; (800c494 <TIM_OC4_SetConfig+0xcc>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d003      	beq.n	800c448 <TIM_OC4_SetConfig+0x80>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a15      	ldr	r2, [pc, #84]	; (800c498 <TIM_OC4_SetConfig+0xd0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d109      	bne.n	800c45c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c44e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	019b      	lsls	r3, r3, #6
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	697a      	ldr	r2, [r7, #20]
 800c460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	621a      	str	r2, [r3, #32]
}
 800c476:	bf00      	nop
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	feff8fff 	.word	0xfeff8fff
 800c488:	40010000 	.word	0x40010000
 800c48c:	40010400 	.word	0x40010400
 800c490:	40014000 	.word	0x40014000
 800c494:	40014400 	.word	0x40014400
 800c498:	40014800 	.word	0x40014800

0800c49c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6a1b      	ldr	r3, [r3, #32]
 800c4aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	4b21      	ldr	r3, [pc, #132]	; (800c54c <TIM_OC5_SetConfig+0xb0>)
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	041b      	lsls	r3, r3, #16
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a18      	ldr	r2, [pc, #96]	; (800c550 <TIM_OC5_SetConfig+0xb4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d00f      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a17      	ldr	r2, [pc, #92]	; (800c554 <TIM_OC5_SetConfig+0xb8>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d00b      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a16      	ldr	r2, [pc, #88]	; (800c558 <TIM_OC5_SetConfig+0xbc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d007      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a15      	ldr	r2, [pc, #84]	; (800c55c <TIM_OC5_SetConfig+0xc0>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d003      	beq.n	800c512 <TIM_OC5_SetConfig+0x76>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	4a14      	ldr	r2, [pc, #80]	; (800c560 <TIM_OC5_SetConfig+0xc4>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d109      	bne.n	800c526 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c518:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	021b      	lsls	r3, r3, #8
 800c520:	697a      	ldr	r2, [r7, #20]
 800c522:	4313      	orrs	r3, r2
 800c524:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	621a      	str	r2, [r3, #32]
}
 800c540:	bf00      	nop
 800c542:	371c      	adds	r7, #28
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr
 800c54c:	fffeff8f 	.word	0xfffeff8f
 800c550:	40010000 	.word	0x40010000
 800c554:	40010400 	.word	0x40010400
 800c558:	40014000 	.word	0x40014000
 800c55c:	40014400 	.word	0x40014400
 800c560:	40014800 	.word	0x40014800

0800c564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	4b22      	ldr	r3, [pc, #136]	; (800c618 <TIM_OC6_SetConfig+0xb4>)
 800c590:	4013      	ands	r3, r2
 800c592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	021b      	lsls	r3, r3, #8
 800c59a:	68fa      	ldr	r2, [r7, #12]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	051b      	lsls	r3, r3, #20
 800c5ae:	693a      	ldr	r2, [r7, #16]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a19      	ldr	r2, [pc, #100]	; (800c61c <TIM_OC6_SetConfig+0xb8>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00f      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a18      	ldr	r2, [pc, #96]	; (800c620 <TIM_OC6_SetConfig+0xbc>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00b      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a17      	ldr	r2, [pc, #92]	; (800c624 <TIM_OC6_SetConfig+0xc0>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d007      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a16      	ldr	r2, [pc, #88]	; (800c628 <TIM_OC6_SetConfig+0xc4>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d003      	beq.n	800c5dc <TIM_OC6_SetConfig+0x78>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a15      	ldr	r2, [pc, #84]	; (800c62c <TIM_OC6_SetConfig+0xc8>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d109      	bne.n	800c5f0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	029b      	lsls	r3, r3, #10
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	621a      	str	r2, [r3, #32]
}
 800c60a:	bf00      	nop
 800c60c:	371c      	adds	r7, #28
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	feff8fff 	.word	0xfeff8fff
 800c61c:	40010000 	.word	0x40010000
 800c620:	40010400 	.word	0x40010400
 800c624:	40014000 	.word	0x40014000
 800c628:	40014400 	.word	0x40014400
 800c62c:	40014800 	.word	0x40014800

0800c630 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c630:	b480      	push	{r7}
 800c632:	b087      	sub	sp, #28
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
 800c63c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	f023 0201 	bic.w	r2, r3, #1
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	4a2c      	ldr	r2, [pc, #176]	; (800c70c <TIM_TI1_SetConfig+0xdc>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d023      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c664:	d01f      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4a29      	ldr	r2, [pc, #164]	; (800c710 <TIM_TI1_SetConfig+0xe0>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d01b      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	4a28      	ldr	r2, [pc, #160]	; (800c714 <TIM_TI1_SetConfig+0xe4>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d017      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	4a27      	ldr	r2, [pc, #156]	; (800c718 <TIM_TI1_SetConfig+0xe8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	4a26      	ldr	r2, [pc, #152]	; (800c71c <TIM_TI1_SetConfig+0xec>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d00f      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	4a25      	ldr	r2, [pc, #148]	; (800c720 <TIM_TI1_SetConfig+0xf0>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d00b      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	4a24      	ldr	r2, [pc, #144]	; (800c724 <TIM_TI1_SetConfig+0xf4>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d007      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	4a23      	ldr	r2, [pc, #140]	; (800c728 <TIM_TI1_SetConfig+0xf8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d003      	beq.n	800c6a6 <TIM_TI1_SetConfig+0x76>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	4a22      	ldr	r2, [pc, #136]	; (800c72c <TIM_TI1_SetConfig+0xfc>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d101      	bne.n	800c6aa <TIM_TI1_SetConfig+0x7a>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <TIM_TI1_SetConfig+0x7c>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d008      	beq.n	800c6c2 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f023 0303 	bic.w	r3, r3, #3
 800c6b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c6b8:	697a      	ldr	r2, [r7, #20]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
 800c6c0:	e003      	b.n	800c6ca <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	f043 0301 	orr.w	r3, r3, #1
 800c6c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f023 030a 	bic.w	r3, r3, #10
 800c6e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f003 030a 	and.w	r3, r3, #10
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	697a      	ldr	r2, [r7, #20]
 800c6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	621a      	str	r2, [r3, #32]
}
 800c6fe:	bf00      	nop
 800c700:	371c      	adds	r7, #28
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	40010000 	.word	0x40010000
 800c710:	40000400 	.word	0x40000400
 800c714:	40000800 	.word	0x40000800
 800c718:	40000c00 	.word	0x40000c00
 800c71c:	40010400 	.word	0x40010400
 800c720:	40001800 	.word	0x40001800
 800c724:	40014000 	.word	0x40014000
 800c728:	4000e000 	.word	0x4000e000
 800c72c:	4000e400 	.word	0x4000e400

0800c730 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	607a      	str	r2, [r7, #4]
 800c73c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	f023 0210 	bic.w	r2, r3, #16
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	6a1b      	ldr	r3, [r3, #32]
 800c754:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c75c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	021b      	lsls	r3, r3, #8
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	4313      	orrs	r3, r2
 800c766:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c76e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	031b      	lsls	r3, r3, #12
 800c774:	b29b      	uxth	r3, r3
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c782:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	011b      	lsls	r3, r3, #4
 800c788:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	4313      	orrs	r3, r2
 800c790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	697a      	ldr	r2, [r7, #20]
 800c796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	621a      	str	r2, [r3, #32]
}
 800c79e:	bf00      	nop
 800c7a0:	371c      	adds	r7, #28
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b087      	sub	sp, #28
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	607a      	str	r2, [r7, #4]
 800c7b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	69db      	ldr	r3, [r3, #28]
 800c7c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f023 0303 	bic.w	r3, r3, #3
 800c7d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c7fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	021b      	lsls	r3, r3, #8
 800c800:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	4313      	orrs	r3, r2
 800c808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	697a      	ldr	r2, [r7, #20]
 800c80e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	621a      	str	r2, [r3, #32]
}
 800c816:	bf00      	nop
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c822:	b480      	push	{r7}
 800c824:	b087      	sub	sp, #28
 800c826:	af00      	add	r7, sp, #0
 800c828:	60f8      	str	r0, [r7, #12]
 800c82a:	60b9      	str	r1, [r7, #8]
 800c82c:	607a      	str	r2, [r7, #4]
 800c82e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	69db      	ldr	r3, [r3, #28]
 800c840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	021b      	lsls	r3, r3, #8
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	4313      	orrs	r3, r2
 800c858:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	031b      	lsls	r3, r3, #12
 800c866:	b29b      	uxth	r3, r3
 800c868:	697a      	ldr	r2, [r7, #20]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c874:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	031b      	lsls	r3, r3, #12
 800c87a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	4313      	orrs	r3, r2
 800c882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	621a      	str	r2, [r3, #32]
}
 800c890:	bf00      	nop
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d101      	bne.n	800c8b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	e077      	b.n	800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2202      	movs	r2, #2
 800c8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a35      	ldr	r2, [pc, #212]	; (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d004      	beq.n	800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a34      	ldr	r2, [pc, #208]	; (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d108      	bne.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c8ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c900:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	4313      	orrs	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68fa      	ldr	r2, [r7, #12]
 800c912:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a25      	ldr	r2, [pc, #148]	; (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d02c      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c926:	d027      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a22      	ldr	r2, [pc, #136]	; (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d022      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a21      	ldr	r2, [pc, #132]	; (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d01d      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a1f      	ldr	r2, [pc, #124]	; (800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d018      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a1a      	ldr	r2, [pc, #104]	; (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d013      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a1b      	ldr	r2, [pc, #108]	; (800c9c4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d00e      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a1a      	ldr	r2, [pc, #104]	; (800c9c8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d009      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a18      	ldr	r2, [pc, #96]	; (800c9cc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d004      	beq.n	800c978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a17      	ldr	r2, [pc, #92]	; (800c9d0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d10c      	bne.n	800c992 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c97e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	4313      	orrs	r3, r2
 800c988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2201      	movs	r2, #1
 800c996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	40010000 	.word	0x40010000
 800c9b4:	40010400 	.word	0x40010400
 800c9b8:	40000400 	.word	0x40000400
 800c9bc:	40000800 	.word	0x40000800
 800c9c0:	40000c00 	.word	0x40000c00
 800c9c4:	40001800 	.word	0x40001800
 800c9c8:	40014000 	.word	0x40014000
 800c9cc:	4000e000 	.word	0x4000e000
 800c9d0:	4000e400 	.word	0x4000e400

0800c9d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b085      	sub	sp, #20
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d101      	bne.n	800c9f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c9ec:	2302      	movs	r3, #2
 800c9ee:	e087      	b.n	800cb00 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	4313      	orrs	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	695b      	ldr	r3, [r3, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	041b      	lsls	r3, r3, #16
 800ca66:	4313      	orrs	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a27      	ldr	r2, [pc, #156]	; (800cb0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d004      	beq.n	800ca7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a25      	ldr	r2, [pc, #148]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d106      	bne.n	800ca8c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	69db      	ldr	r3, [r3, #28]
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a1e      	ldr	r2, [pc, #120]	; (800cb0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d004      	beq.n	800caa0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a1d      	ldr	r2, [pc, #116]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d126      	bne.n	800caee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caaa:	051b      	lsls	r3, r3, #20
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6a1b      	ldr	r3, [r3, #32]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0e      	ldr	r2, [pc, #56]	; (800cb0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a0d      	ldr	r2, [pc, #52]	; (800cb10 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d106      	bne.n	800caee <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caea:	4313      	orrs	r3, r2
 800caec:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68fa      	ldr	r2, [r7, #12]
 800caf4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	40010000 	.word	0x40010000
 800cb10:	40010400 	.word	0x40010400

0800cb14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d101      	bne.n	800cb26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb22:	2301      	movs	r3, #1
 800cb24:	e042      	b.n	800cbac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d106      	bne.n	800cb3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7f6 fb0d 	bl	8003158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2224      	movs	r2, #36	; 0x24
 800cb42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f022 0201 	bic.w	r2, r2, #1
 800cb54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 f82c 	bl	800cbb4 <UART_SetConfig>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d101      	bne.n	800cb66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e022      	b.n	800cbac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fe8c 	bl	800d88c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689a      	ldr	r2, [r3, #8]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f000 ff13 	bl	800d9d0 <UART_CheckIdleState>
 800cbaa:	4603      	mov	r3, r0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbb8:	b092      	sub	sp, #72	; 0x48
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	689a      	ldr	r2, [r3, #8]
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	431a      	orrs	r2, r3
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	4bbe      	ldr	r3, [pc, #760]	; (800cedc <UART_SetConfig+0x328>)
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cbec:	430b      	orrs	r3, r1
 800cbee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4ab3      	ldr	r2, [pc, #716]	; (800cee0 <UART_SetConfig+0x32c>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d004      	beq.n	800cc20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	689a      	ldr	r2, [r3, #8]
 800cc26:	4baf      	ldr	r3, [pc, #700]	; (800cee4 <UART_SetConfig+0x330>)
 800cc28:	4013      	ands	r3, r2
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	6812      	ldr	r2, [r2, #0]
 800cc2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc30:	430b      	orrs	r3, r1
 800cc32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc3a:	f023 010f 	bic.w	r1, r3, #15
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4aa6      	ldr	r2, [pc, #664]	; (800cee8 <UART_SetConfig+0x334>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d177      	bne.n	800cd44 <UART_SetConfig+0x190>
 800cc54:	4ba5      	ldr	r3, [pc, #660]	; (800ceec <UART_SetConfig+0x338>)
 800cc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc5c:	2b28      	cmp	r3, #40	; 0x28
 800cc5e:	d86d      	bhi.n	800cd3c <UART_SetConfig+0x188>
 800cc60:	a201      	add	r2, pc, #4	; (adr r2, 800cc68 <UART_SetConfig+0xb4>)
 800cc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc66:	bf00      	nop
 800cc68:	0800cd0d 	.word	0x0800cd0d
 800cc6c:	0800cd3d 	.word	0x0800cd3d
 800cc70:	0800cd3d 	.word	0x0800cd3d
 800cc74:	0800cd3d 	.word	0x0800cd3d
 800cc78:	0800cd3d 	.word	0x0800cd3d
 800cc7c:	0800cd3d 	.word	0x0800cd3d
 800cc80:	0800cd3d 	.word	0x0800cd3d
 800cc84:	0800cd3d 	.word	0x0800cd3d
 800cc88:	0800cd15 	.word	0x0800cd15
 800cc8c:	0800cd3d 	.word	0x0800cd3d
 800cc90:	0800cd3d 	.word	0x0800cd3d
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd3d 	.word	0x0800cd3d
 800cc9c:	0800cd3d 	.word	0x0800cd3d
 800cca0:	0800cd3d 	.word	0x0800cd3d
 800cca4:	0800cd3d 	.word	0x0800cd3d
 800cca8:	0800cd1d 	.word	0x0800cd1d
 800ccac:	0800cd3d 	.word	0x0800cd3d
 800ccb0:	0800cd3d 	.word	0x0800cd3d
 800ccb4:	0800cd3d 	.word	0x0800cd3d
 800ccb8:	0800cd3d 	.word	0x0800cd3d
 800ccbc:	0800cd3d 	.word	0x0800cd3d
 800ccc0:	0800cd3d 	.word	0x0800cd3d
 800ccc4:	0800cd3d 	.word	0x0800cd3d
 800ccc8:	0800cd25 	.word	0x0800cd25
 800cccc:	0800cd3d 	.word	0x0800cd3d
 800ccd0:	0800cd3d 	.word	0x0800cd3d
 800ccd4:	0800cd3d 	.word	0x0800cd3d
 800ccd8:	0800cd3d 	.word	0x0800cd3d
 800ccdc:	0800cd3d 	.word	0x0800cd3d
 800cce0:	0800cd3d 	.word	0x0800cd3d
 800cce4:	0800cd3d 	.word	0x0800cd3d
 800cce8:	0800cd2d 	.word	0x0800cd2d
 800ccec:	0800cd3d 	.word	0x0800cd3d
 800ccf0:	0800cd3d 	.word	0x0800cd3d
 800ccf4:	0800cd3d 	.word	0x0800cd3d
 800ccf8:	0800cd3d 	.word	0x0800cd3d
 800ccfc:	0800cd3d 	.word	0x0800cd3d
 800cd00:	0800cd3d 	.word	0x0800cd3d
 800cd04:	0800cd3d 	.word	0x0800cd3d
 800cd08:	0800cd35 	.word	0x0800cd35
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e326      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd14:	2304      	movs	r3, #4
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e322      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd1c:	2308      	movs	r3, #8
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd22:	e31e      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd24:	2310      	movs	r3, #16
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2a:	e31a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd32:	e316      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3a:	e312      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd3c:	2380      	movs	r3, #128	; 0x80
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd42:	e30e      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a69      	ldr	r2, [pc, #420]	; (800cef0 <UART_SetConfig+0x33c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d130      	bne.n	800cdb0 <UART_SetConfig+0x1fc>
 800cd4e:	4b67      	ldr	r3, [pc, #412]	; (800ceec <UART_SetConfig+0x338>)
 800cd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd52:	f003 0307 	and.w	r3, r3, #7
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d826      	bhi.n	800cda8 <UART_SetConfig+0x1f4>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <UART_SetConfig+0x1ac>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd79 	.word	0x0800cd79
 800cd64:	0800cd81 	.word	0x0800cd81
 800cd68:	0800cd89 	.word	0x0800cd89
 800cd6c:	0800cd91 	.word	0x0800cd91
 800cd70:	0800cd99 	.word	0x0800cd99
 800cd74:	0800cda1 	.word	0x0800cda1
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e2f0      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd80:	2304      	movs	r3, #4
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd86:	e2ec      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd88:	2308      	movs	r3, #8
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8e:	e2e8      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd90:	2310      	movs	r3, #16
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e2e4      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e2e0      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cda0:	2340      	movs	r3, #64	; 0x40
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e2dc      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cda8:	2380      	movs	r3, #128	; 0x80
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdae:	e2d8      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a4f      	ldr	r2, [pc, #316]	; (800cef4 <UART_SetConfig+0x340>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d130      	bne.n	800ce1c <UART_SetConfig+0x268>
 800cdba:	4b4c      	ldr	r3, [pc, #304]	; (800ceec <UART_SetConfig+0x338>)
 800cdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdbe:	f003 0307 	and.w	r3, r3, #7
 800cdc2:	2b05      	cmp	r3, #5
 800cdc4:	d826      	bhi.n	800ce14 <UART_SetConfig+0x260>
 800cdc6:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <UART_SetConfig+0x218>)
 800cdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdcc:	0800cde5 	.word	0x0800cde5
 800cdd0:	0800cded 	.word	0x0800cded
 800cdd4:	0800cdf5 	.word	0x0800cdf5
 800cdd8:	0800cdfd 	.word	0x0800cdfd
 800cddc:	0800ce05 	.word	0x0800ce05
 800cde0:	0800ce0d 	.word	0x0800ce0d
 800cde4:	2300      	movs	r3, #0
 800cde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdea:	e2ba      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cdec:	2304      	movs	r3, #4
 800cdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdf2:	e2b6      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cdf4:	2308      	movs	r3, #8
 800cdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdfa:	e2b2      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cdfc:	2310      	movs	r3, #16
 800cdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce02:	e2ae      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce04:	2320      	movs	r3, #32
 800ce06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0a:	e2aa      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce0c:	2340      	movs	r3, #64	; 0x40
 800ce0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce12:	e2a6      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce14:	2380      	movs	r3, #128	; 0x80
 800ce16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce1a:	e2a2      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a35      	ldr	r2, [pc, #212]	; (800cef8 <UART_SetConfig+0x344>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d130      	bne.n	800ce88 <UART_SetConfig+0x2d4>
 800ce26:	4b31      	ldr	r3, [pc, #196]	; (800ceec <UART_SetConfig+0x338>)
 800ce28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce2a:	f003 0307 	and.w	r3, r3, #7
 800ce2e:	2b05      	cmp	r3, #5
 800ce30:	d826      	bhi.n	800ce80 <UART_SetConfig+0x2cc>
 800ce32:	a201      	add	r2, pc, #4	; (adr r2, 800ce38 <UART_SetConfig+0x284>)
 800ce34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce38:	0800ce51 	.word	0x0800ce51
 800ce3c:	0800ce59 	.word	0x0800ce59
 800ce40:	0800ce61 	.word	0x0800ce61
 800ce44:	0800ce69 	.word	0x0800ce69
 800ce48:	0800ce71 	.word	0x0800ce71
 800ce4c:	0800ce79 	.word	0x0800ce79
 800ce50:	2300      	movs	r3, #0
 800ce52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce56:	e284      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce58:	2304      	movs	r3, #4
 800ce5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce5e:	e280      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce60:	2308      	movs	r3, #8
 800ce62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce66:	e27c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce68:	2310      	movs	r3, #16
 800ce6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce6e:	e278      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce70:	2320      	movs	r3, #32
 800ce72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce76:	e274      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce78:	2340      	movs	r3, #64	; 0x40
 800ce7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce7e:	e270      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce80:	2380      	movs	r3, #128	; 0x80
 800ce82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce86:	e26c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a1b      	ldr	r2, [pc, #108]	; (800cefc <UART_SetConfig+0x348>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d142      	bne.n	800cf18 <UART_SetConfig+0x364>
 800ce92:	4b16      	ldr	r3, [pc, #88]	; (800ceec <UART_SetConfig+0x338>)
 800ce94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce96:	f003 0307 	and.w	r3, r3, #7
 800ce9a:	2b05      	cmp	r3, #5
 800ce9c:	d838      	bhi.n	800cf10 <UART_SetConfig+0x35c>
 800ce9e:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <UART_SetConfig+0x2f0>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cebd 	.word	0x0800cebd
 800cea8:	0800cec5 	.word	0x0800cec5
 800ceac:	0800cecd 	.word	0x0800cecd
 800ceb0:	0800ced5 	.word	0x0800ced5
 800ceb4:	0800cf01 	.word	0x0800cf01
 800ceb8:	0800cf09 	.word	0x0800cf09
 800cebc:	2300      	movs	r3, #0
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cec2:	e24e      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cec4:	2304      	movs	r3, #4
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceca:	e24a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cecc:	2308      	movs	r3, #8
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ced2:	e246      	b.n	800d362 <UART_SetConfig+0x7ae>
 800ced4:	2310      	movs	r3, #16
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceda:	e242      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cedc:	cfff69f3 	.word	0xcfff69f3
 800cee0:	58000c00 	.word	0x58000c00
 800cee4:	11fff4ff 	.word	0x11fff4ff
 800cee8:	40011000 	.word	0x40011000
 800ceec:	58024400 	.word	0x58024400
 800cef0:	40004400 	.word	0x40004400
 800cef4:	40004800 	.word	0x40004800
 800cef8:	40004c00 	.word	0x40004c00
 800cefc:	40005000 	.word	0x40005000
 800cf00:	2320      	movs	r3, #32
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e22c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cf08:	2340      	movs	r3, #64	; 0x40
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0e:	e228      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cf10:	2380      	movs	r3, #128	; 0x80
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf16:	e224      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4ab1      	ldr	r2, [pc, #708]	; (800d1e4 <UART_SetConfig+0x630>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d176      	bne.n	800d010 <UART_SetConfig+0x45c>
 800cf22:	4bb1      	ldr	r3, [pc, #708]	; (800d1e8 <UART_SetConfig+0x634>)
 800cf24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf2a:	2b28      	cmp	r3, #40	; 0x28
 800cf2c:	d86c      	bhi.n	800d008 <UART_SetConfig+0x454>
 800cf2e:	a201      	add	r2, pc, #4	; (adr r2, 800cf34 <UART_SetConfig+0x380>)
 800cf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf34:	0800cfd9 	.word	0x0800cfd9
 800cf38:	0800d009 	.word	0x0800d009
 800cf3c:	0800d009 	.word	0x0800d009
 800cf40:	0800d009 	.word	0x0800d009
 800cf44:	0800d009 	.word	0x0800d009
 800cf48:	0800d009 	.word	0x0800d009
 800cf4c:	0800d009 	.word	0x0800d009
 800cf50:	0800d009 	.word	0x0800d009
 800cf54:	0800cfe1 	.word	0x0800cfe1
 800cf58:	0800d009 	.word	0x0800d009
 800cf5c:	0800d009 	.word	0x0800d009
 800cf60:	0800d009 	.word	0x0800d009
 800cf64:	0800d009 	.word	0x0800d009
 800cf68:	0800d009 	.word	0x0800d009
 800cf6c:	0800d009 	.word	0x0800d009
 800cf70:	0800d009 	.word	0x0800d009
 800cf74:	0800cfe9 	.word	0x0800cfe9
 800cf78:	0800d009 	.word	0x0800d009
 800cf7c:	0800d009 	.word	0x0800d009
 800cf80:	0800d009 	.word	0x0800d009
 800cf84:	0800d009 	.word	0x0800d009
 800cf88:	0800d009 	.word	0x0800d009
 800cf8c:	0800d009 	.word	0x0800d009
 800cf90:	0800d009 	.word	0x0800d009
 800cf94:	0800cff1 	.word	0x0800cff1
 800cf98:	0800d009 	.word	0x0800d009
 800cf9c:	0800d009 	.word	0x0800d009
 800cfa0:	0800d009 	.word	0x0800d009
 800cfa4:	0800d009 	.word	0x0800d009
 800cfa8:	0800d009 	.word	0x0800d009
 800cfac:	0800d009 	.word	0x0800d009
 800cfb0:	0800d009 	.word	0x0800d009
 800cfb4:	0800cff9 	.word	0x0800cff9
 800cfb8:	0800d009 	.word	0x0800d009
 800cfbc:	0800d009 	.word	0x0800d009
 800cfc0:	0800d009 	.word	0x0800d009
 800cfc4:	0800d009 	.word	0x0800d009
 800cfc8:	0800d009 	.word	0x0800d009
 800cfcc:	0800d009 	.word	0x0800d009
 800cfd0:	0800d009 	.word	0x0800d009
 800cfd4:	0800d001 	.word	0x0800d001
 800cfd8:	2301      	movs	r3, #1
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfde:	e1c0      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cfe0:	2304      	movs	r3, #4
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe6:	e1bc      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cfe8:	2308      	movs	r3, #8
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfee:	e1b8      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cff0:	2310      	movs	r3, #16
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cff6:	e1b4      	b.n	800d362 <UART_SetConfig+0x7ae>
 800cff8:	2320      	movs	r3, #32
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cffe:	e1b0      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d006:	e1ac      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d008:	2380      	movs	r3, #128	; 0x80
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d00e:	e1a8      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a75      	ldr	r2, [pc, #468]	; (800d1ec <UART_SetConfig+0x638>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d130      	bne.n	800d07c <UART_SetConfig+0x4c8>
 800d01a:	4b73      	ldr	r3, [pc, #460]	; (800d1e8 <UART_SetConfig+0x634>)
 800d01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	2b05      	cmp	r3, #5
 800d024:	d826      	bhi.n	800d074 <UART_SetConfig+0x4c0>
 800d026:	a201      	add	r2, pc, #4	; (adr r2, 800d02c <UART_SetConfig+0x478>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d045 	.word	0x0800d045
 800d030:	0800d04d 	.word	0x0800d04d
 800d034:	0800d055 	.word	0x0800d055
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d065 	.word	0x0800d065
 800d040:	0800d06d 	.word	0x0800d06d
 800d044:	2300      	movs	r3, #0
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e18a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d04c:	2304      	movs	r3, #4
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d052:	e186      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d054:	2308      	movs	r3, #8
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d05a:	e182      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d05c:	2310      	movs	r3, #16
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d062:	e17e      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d064:	2320      	movs	r3, #32
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d06a:	e17a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d06c:	2340      	movs	r3, #64	; 0x40
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d072:	e176      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d074:	2380      	movs	r3, #128	; 0x80
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d07a:	e172      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a5b      	ldr	r2, [pc, #364]	; (800d1f0 <UART_SetConfig+0x63c>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d130      	bne.n	800d0e8 <UART_SetConfig+0x534>
 800d086:	4b58      	ldr	r3, [pc, #352]	; (800d1e8 <UART_SetConfig+0x634>)
 800d088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d08a:	f003 0307 	and.w	r3, r3, #7
 800d08e:	2b05      	cmp	r3, #5
 800d090:	d826      	bhi.n	800d0e0 <UART_SetConfig+0x52c>
 800d092:	a201      	add	r2, pc, #4	; (adr r2, 800d098 <UART_SetConfig+0x4e4>)
 800d094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d098:	0800d0b1 	.word	0x0800d0b1
 800d09c:	0800d0b9 	.word	0x0800d0b9
 800d0a0:	0800d0c1 	.word	0x0800d0c1
 800d0a4:	0800d0c9 	.word	0x0800d0c9
 800d0a8:	0800d0d1 	.word	0x0800d0d1
 800d0ac:	0800d0d9 	.word	0x0800d0d9
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0b6:	e154      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0b8:	2304      	movs	r3, #4
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0be:	e150      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0c0:	2308      	movs	r3, #8
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c6:	e14c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0c8:	2310      	movs	r3, #16
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ce:	e148      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0d0:	2320      	movs	r3, #32
 800d0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0d6:	e144      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0d8:	2340      	movs	r3, #64	; 0x40
 800d0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0de:	e140      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0e0:	2380      	movs	r3, #128	; 0x80
 800d0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0e6:	e13c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a41      	ldr	r2, [pc, #260]	; (800d1f4 <UART_SetConfig+0x640>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	f040 8082 	bne.w	800d1f8 <UART_SetConfig+0x644>
 800d0f4:	4b3c      	ldr	r3, [pc, #240]	; (800d1e8 <UART_SetConfig+0x634>)
 800d0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d0fc:	2b28      	cmp	r3, #40	; 0x28
 800d0fe:	d86d      	bhi.n	800d1dc <UART_SetConfig+0x628>
 800d100:	a201      	add	r2, pc, #4	; (adr r2, 800d108 <UART_SetConfig+0x554>)
 800d102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d106:	bf00      	nop
 800d108:	0800d1ad 	.word	0x0800d1ad
 800d10c:	0800d1dd 	.word	0x0800d1dd
 800d110:	0800d1dd 	.word	0x0800d1dd
 800d114:	0800d1dd 	.word	0x0800d1dd
 800d118:	0800d1dd 	.word	0x0800d1dd
 800d11c:	0800d1dd 	.word	0x0800d1dd
 800d120:	0800d1dd 	.word	0x0800d1dd
 800d124:	0800d1dd 	.word	0x0800d1dd
 800d128:	0800d1b5 	.word	0x0800d1b5
 800d12c:	0800d1dd 	.word	0x0800d1dd
 800d130:	0800d1dd 	.word	0x0800d1dd
 800d134:	0800d1dd 	.word	0x0800d1dd
 800d138:	0800d1dd 	.word	0x0800d1dd
 800d13c:	0800d1dd 	.word	0x0800d1dd
 800d140:	0800d1dd 	.word	0x0800d1dd
 800d144:	0800d1dd 	.word	0x0800d1dd
 800d148:	0800d1bd 	.word	0x0800d1bd
 800d14c:	0800d1dd 	.word	0x0800d1dd
 800d150:	0800d1dd 	.word	0x0800d1dd
 800d154:	0800d1dd 	.word	0x0800d1dd
 800d158:	0800d1dd 	.word	0x0800d1dd
 800d15c:	0800d1dd 	.word	0x0800d1dd
 800d160:	0800d1dd 	.word	0x0800d1dd
 800d164:	0800d1dd 	.word	0x0800d1dd
 800d168:	0800d1c5 	.word	0x0800d1c5
 800d16c:	0800d1dd 	.word	0x0800d1dd
 800d170:	0800d1dd 	.word	0x0800d1dd
 800d174:	0800d1dd 	.word	0x0800d1dd
 800d178:	0800d1dd 	.word	0x0800d1dd
 800d17c:	0800d1dd 	.word	0x0800d1dd
 800d180:	0800d1dd 	.word	0x0800d1dd
 800d184:	0800d1dd 	.word	0x0800d1dd
 800d188:	0800d1cd 	.word	0x0800d1cd
 800d18c:	0800d1dd 	.word	0x0800d1dd
 800d190:	0800d1dd 	.word	0x0800d1dd
 800d194:	0800d1dd 	.word	0x0800d1dd
 800d198:	0800d1dd 	.word	0x0800d1dd
 800d19c:	0800d1dd 	.word	0x0800d1dd
 800d1a0:	0800d1dd 	.word	0x0800d1dd
 800d1a4:	0800d1dd 	.word	0x0800d1dd
 800d1a8:	0800d1d5 	.word	0x0800d1d5
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1b2:	e0d6      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1b4:	2304      	movs	r3, #4
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ba:	e0d2      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1bc:	2308      	movs	r3, #8
 800d1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1c2:	e0ce      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1c4:	2310      	movs	r3, #16
 800d1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1ca:	e0ca      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1cc:	2320      	movs	r3, #32
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1d2:	e0c6      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1d4:	2340      	movs	r3, #64	; 0x40
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1da:	e0c2      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1dc:	2380      	movs	r3, #128	; 0x80
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d1e2:	e0be      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d1e4:	40011400 	.word	0x40011400
 800d1e8:	58024400 	.word	0x58024400
 800d1ec:	40007800 	.word	0x40007800
 800d1f0:	40007c00 	.word	0x40007c00
 800d1f4:	40011800 	.word	0x40011800
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4aad      	ldr	r2, [pc, #692]	; (800d4b4 <UART_SetConfig+0x900>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d176      	bne.n	800d2f0 <UART_SetConfig+0x73c>
 800d202:	4bad      	ldr	r3, [pc, #692]	; (800d4b8 <UART_SetConfig+0x904>)
 800d204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d20a:	2b28      	cmp	r3, #40	; 0x28
 800d20c:	d86c      	bhi.n	800d2e8 <UART_SetConfig+0x734>
 800d20e:	a201      	add	r2, pc, #4	; (adr r2, 800d214 <UART_SetConfig+0x660>)
 800d210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d214:	0800d2b9 	.word	0x0800d2b9
 800d218:	0800d2e9 	.word	0x0800d2e9
 800d21c:	0800d2e9 	.word	0x0800d2e9
 800d220:	0800d2e9 	.word	0x0800d2e9
 800d224:	0800d2e9 	.word	0x0800d2e9
 800d228:	0800d2e9 	.word	0x0800d2e9
 800d22c:	0800d2e9 	.word	0x0800d2e9
 800d230:	0800d2e9 	.word	0x0800d2e9
 800d234:	0800d2c1 	.word	0x0800d2c1
 800d238:	0800d2e9 	.word	0x0800d2e9
 800d23c:	0800d2e9 	.word	0x0800d2e9
 800d240:	0800d2e9 	.word	0x0800d2e9
 800d244:	0800d2e9 	.word	0x0800d2e9
 800d248:	0800d2e9 	.word	0x0800d2e9
 800d24c:	0800d2e9 	.word	0x0800d2e9
 800d250:	0800d2e9 	.word	0x0800d2e9
 800d254:	0800d2c9 	.word	0x0800d2c9
 800d258:	0800d2e9 	.word	0x0800d2e9
 800d25c:	0800d2e9 	.word	0x0800d2e9
 800d260:	0800d2e9 	.word	0x0800d2e9
 800d264:	0800d2e9 	.word	0x0800d2e9
 800d268:	0800d2e9 	.word	0x0800d2e9
 800d26c:	0800d2e9 	.word	0x0800d2e9
 800d270:	0800d2e9 	.word	0x0800d2e9
 800d274:	0800d2d1 	.word	0x0800d2d1
 800d278:	0800d2e9 	.word	0x0800d2e9
 800d27c:	0800d2e9 	.word	0x0800d2e9
 800d280:	0800d2e9 	.word	0x0800d2e9
 800d284:	0800d2e9 	.word	0x0800d2e9
 800d288:	0800d2e9 	.word	0x0800d2e9
 800d28c:	0800d2e9 	.word	0x0800d2e9
 800d290:	0800d2e9 	.word	0x0800d2e9
 800d294:	0800d2d9 	.word	0x0800d2d9
 800d298:	0800d2e9 	.word	0x0800d2e9
 800d29c:	0800d2e9 	.word	0x0800d2e9
 800d2a0:	0800d2e9 	.word	0x0800d2e9
 800d2a4:	0800d2e9 	.word	0x0800d2e9
 800d2a8:	0800d2e9 	.word	0x0800d2e9
 800d2ac:	0800d2e9 	.word	0x0800d2e9
 800d2b0:	0800d2e9 	.word	0x0800d2e9
 800d2b4:	0800d2e1 	.word	0x0800d2e1
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e050      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2c0:	2304      	movs	r3, #4
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e04c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2c8:	2308      	movs	r3, #8
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e048      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2d0:	2310      	movs	r3, #16
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e044      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2d8:	2320      	movs	r3, #32
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e040      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2e0:	2340      	movs	r3, #64	; 0x40
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e03c      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2e8:	2380      	movs	r3, #128	; 0x80
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ee:	e038      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a71      	ldr	r2, [pc, #452]	; (800d4bc <UART_SetConfig+0x908>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	d130      	bne.n	800d35c <UART_SetConfig+0x7a8>
 800d2fa:	4b6f      	ldr	r3, [pc, #444]	; (800d4b8 <UART_SetConfig+0x904>)
 800d2fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2fe:	f003 0307 	and.w	r3, r3, #7
 800d302:	2b05      	cmp	r3, #5
 800d304:	d826      	bhi.n	800d354 <UART_SetConfig+0x7a0>
 800d306:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <UART_SetConfig+0x758>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d325 	.word	0x0800d325
 800d310:	0800d32d 	.word	0x0800d32d
 800d314:	0800d335 	.word	0x0800d335
 800d318:	0800d33d 	.word	0x0800d33d
 800d31c:	0800d345 	.word	0x0800d345
 800d320:	0800d34d 	.word	0x0800d34d
 800d324:	2302      	movs	r3, #2
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e01a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d32c:	2304      	movs	r3, #4
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e016      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d334:	2308      	movs	r3, #8
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e012      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d33c:	2310      	movs	r3, #16
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e00e      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d344:	2320      	movs	r3, #32
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e00a      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d34c:	2340      	movs	r3, #64	; 0x40
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e006      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d354:	2380      	movs	r3, #128	; 0x80
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d35a:	e002      	b.n	800d362 <UART_SetConfig+0x7ae>
 800d35c:	2380      	movs	r3, #128	; 0x80
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	4a55      	ldr	r2, [pc, #340]	; (800d4bc <UART_SetConfig+0x908>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	f040 80f8 	bne.w	800d55e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d36e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d372:	2b20      	cmp	r3, #32
 800d374:	dc46      	bgt.n	800d404 <UART_SetConfig+0x850>
 800d376:	2b02      	cmp	r3, #2
 800d378:	db75      	blt.n	800d466 <UART_SetConfig+0x8b2>
 800d37a:	3b02      	subs	r3, #2
 800d37c:	2b1e      	cmp	r3, #30
 800d37e:	d872      	bhi.n	800d466 <UART_SetConfig+0x8b2>
 800d380:	a201      	add	r2, pc, #4	; (adr r2, 800d388 <UART_SetConfig+0x7d4>)
 800d382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d386:	bf00      	nop
 800d388:	0800d40b 	.word	0x0800d40b
 800d38c:	0800d467 	.word	0x0800d467
 800d390:	0800d413 	.word	0x0800d413
 800d394:	0800d467 	.word	0x0800d467
 800d398:	0800d467 	.word	0x0800d467
 800d39c:	0800d467 	.word	0x0800d467
 800d3a0:	0800d423 	.word	0x0800d423
 800d3a4:	0800d467 	.word	0x0800d467
 800d3a8:	0800d467 	.word	0x0800d467
 800d3ac:	0800d467 	.word	0x0800d467
 800d3b0:	0800d467 	.word	0x0800d467
 800d3b4:	0800d467 	.word	0x0800d467
 800d3b8:	0800d467 	.word	0x0800d467
 800d3bc:	0800d467 	.word	0x0800d467
 800d3c0:	0800d433 	.word	0x0800d433
 800d3c4:	0800d467 	.word	0x0800d467
 800d3c8:	0800d467 	.word	0x0800d467
 800d3cc:	0800d467 	.word	0x0800d467
 800d3d0:	0800d467 	.word	0x0800d467
 800d3d4:	0800d467 	.word	0x0800d467
 800d3d8:	0800d467 	.word	0x0800d467
 800d3dc:	0800d467 	.word	0x0800d467
 800d3e0:	0800d467 	.word	0x0800d467
 800d3e4:	0800d467 	.word	0x0800d467
 800d3e8:	0800d467 	.word	0x0800d467
 800d3ec:	0800d467 	.word	0x0800d467
 800d3f0:	0800d467 	.word	0x0800d467
 800d3f4:	0800d467 	.word	0x0800d467
 800d3f8:	0800d467 	.word	0x0800d467
 800d3fc:	0800d467 	.word	0x0800d467
 800d400:	0800d459 	.word	0x0800d459
 800d404:	2b40      	cmp	r3, #64	; 0x40
 800d406:	d02a      	beq.n	800d45e <UART_SetConfig+0x8aa>
 800d408:	e02d      	b.n	800d466 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d40a:	f7fd fa95 	bl	800a938 <HAL_RCCEx_GetD3PCLK1Freq>
 800d40e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d410:	e02f      	b.n	800d472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d416:	4618      	mov	r0, r3
 800d418:	f7fd faa4 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d420:	e027      	b.n	800d472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d422:	f107 0318 	add.w	r3, r7, #24
 800d426:	4618      	mov	r0, r3
 800d428:	f7fd fbf0 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d430:	e01f      	b.n	800d472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d432:	4b21      	ldr	r3, [pc, #132]	; (800d4b8 <UART_SetConfig+0x904>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f003 0320 	and.w	r3, r3, #32
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d009      	beq.n	800d452 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d43e:	4b1e      	ldr	r3, [pc, #120]	; (800d4b8 <UART_SetConfig+0x904>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	08db      	lsrs	r3, r3, #3
 800d444:	f003 0303 	and.w	r3, r3, #3
 800d448:	4a1d      	ldr	r2, [pc, #116]	; (800d4c0 <UART_SetConfig+0x90c>)
 800d44a:	fa22 f303 	lsr.w	r3, r2, r3
 800d44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d450:	e00f      	b.n	800d472 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d452:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <UART_SetConfig+0x90c>)
 800d454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d456:	e00c      	b.n	800d472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d458:	4b1a      	ldr	r3, [pc, #104]	; (800d4c4 <UART_SetConfig+0x910>)
 800d45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d45c:	e009      	b.n	800d472 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d45e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d464:	e005      	b.n	800d472 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d466:	2300      	movs	r3, #0
 800d468:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d470:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 81ee 	beq.w	800d856 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47e:	4a12      	ldr	r2, [pc, #72]	; (800d4c8 <UART_SetConfig+0x914>)
 800d480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d484:	461a      	mov	r2, r3
 800d486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d488:	fbb3 f3f2 	udiv	r3, r3, r2
 800d48c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	685a      	ldr	r2, [r3, #4]
 800d492:	4613      	mov	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d305      	bcc.n	800d4aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	685b      	ldr	r3, [r3, #4]
 800d4a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a6:	429a      	cmp	r2, r3
 800d4a8:	d910      	bls.n	800d4cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d4b0:	e1d1      	b.n	800d856 <UART_SetConfig+0xca2>
 800d4b2:	bf00      	nop
 800d4b4:	40011c00 	.word	0x40011c00
 800d4b8:	58024400 	.word	0x58024400
 800d4bc:	58000c00 	.word	0x58000c00
 800d4c0:	03d09000 	.word	0x03d09000
 800d4c4:	003d0900 	.word	0x003d0900
 800d4c8:	08019fc8 	.word	0x08019fc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	60bb      	str	r3, [r7, #8]
 800d4d2:	60fa      	str	r2, [r7, #12]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d8:	4ac0      	ldr	r2, [pc, #768]	; (800d7dc <UART_SetConfig+0xc28>)
 800d4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	603b      	str	r3, [r7, #0]
 800d4e4:	607a      	str	r2, [r7, #4]
 800d4e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4ee:	f7f2 ff0d 	bl	800030c <__aeabi_uldivmod>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	460b      	mov	r3, r1
 800d4f6:	4610      	mov	r0, r2
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	f04f 0200 	mov.w	r2, #0
 800d4fe:	f04f 0300 	mov.w	r3, #0
 800d502:	020b      	lsls	r3, r1, #8
 800d504:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d508:	0202      	lsls	r2, r0, #8
 800d50a:	6979      	ldr	r1, [r7, #20]
 800d50c:	6849      	ldr	r1, [r1, #4]
 800d50e:	0849      	lsrs	r1, r1, #1
 800d510:	2000      	movs	r0, #0
 800d512:	460c      	mov	r4, r1
 800d514:	4605      	mov	r5, r0
 800d516:	eb12 0804 	adds.w	r8, r2, r4
 800d51a:	eb43 0905 	adc.w	r9, r3, r5
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	469a      	mov	sl, r3
 800d526:	4693      	mov	fp, r2
 800d528:	4652      	mov	r2, sl
 800d52a:	465b      	mov	r3, fp
 800d52c:	4640      	mov	r0, r8
 800d52e:	4649      	mov	r1, r9
 800d530:	f7f2 feec 	bl	800030c <__aeabi_uldivmod>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4613      	mov	r3, r2
 800d53a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d542:	d308      	bcc.n	800d556 <UART_SetConfig+0x9a2>
 800d544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d54a:	d204      	bcs.n	800d556 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d552:	60da      	str	r2, [r3, #12]
 800d554:	e17f      	b.n	800d856 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d55c:	e17b      	b.n	800d856 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	69db      	ldr	r3, [r3, #28]
 800d562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d566:	f040 80bd 	bne.w	800d6e4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d56a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d56e:	2b20      	cmp	r3, #32
 800d570:	dc48      	bgt.n	800d604 <UART_SetConfig+0xa50>
 800d572:	2b00      	cmp	r3, #0
 800d574:	db7b      	blt.n	800d66e <UART_SetConfig+0xaba>
 800d576:	2b20      	cmp	r3, #32
 800d578:	d879      	bhi.n	800d66e <UART_SetConfig+0xaba>
 800d57a:	a201      	add	r2, pc, #4	; (adr r2, 800d580 <UART_SetConfig+0x9cc>)
 800d57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d580:	0800d60b 	.word	0x0800d60b
 800d584:	0800d613 	.word	0x0800d613
 800d588:	0800d66f 	.word	0x0800d66f
 800d58c:	0800d66f 	.word	0x0800d66f
 800d590:	0800d61b 	.word	0x0800d61b
 800d594:	0800d66f 	.word	0x0800d66f
 800d598:	0800d66f 	.word	0x0800d66f
 800d59c:	0800d66f 	.word	0x0800d66f
 800d5a0:	0800d62b 	.word	0x0800d62b
 800d5a4:	0800d66f 	.word	0x0800d66f
 800d5a8:	0800d66f 	.word	0x0800d66f
 800d5ac:	0800d66f 	.word	0x0800d66f
 800d5b0:	0800d66f 	.word	0x0800d66f
 800d5b4:	0800d66f 	.word	0x0800d66f
 800d5b8:	0800d66f 	.word	0x0800d66f
 800d5bc:	0800d66f 	.word	0x0800d66f
 800d5c0:	0800d63b 	.word	0x0800d63b
 800d5c4:	0800d66f 	.word	0x0800d66f
 800d5c8:	0800d66f 	.word	0x0800d66f
 800d5cc:	0800d66f 	.word	0x0800d66f
 800d5d0:	0800d66f 	.word	0x0800d66f
 800d5d4:	0800d66f 	.word	0x0800d66f
 800d5d8:	0800d66f 	.word	0x0800d66f
 800d5dc:	0800d66f 	.word	0x0800d66f
 800d5e0:	0800d66f 	.word	0x0800d66f
 800d5e4:	0800d66f 	.word	0x0800d66f
 800d5e8:	0800d66f 	.word	0x0800d66f
 800d5ec:	0800d66f 	.word	0x0800d66f
 800d5f0:	0800d66f 	.word	0x0800d66f
 800d5f4:	0800d66f 	.word	0x0800d66f
 800d5f8:	0800d66f 	.word	0x0800d66f
 800d5fc:	0800d66f 	.word	0x0800d66f
 800d600:	0800d661 	.word	0x0800d661
 800d604:	2b40      	cmp	r3, #64	; 0x40
 800d606:	d02e      	beq.n	800d666 <UART_SetConfig+0xab2>
 800d608:	e031      	b.n	800d66e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d60a:	f7fb fe49 	bl	80092a0 <HAL_RCC_GetPCLK1Freq>
 800d60e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d610:	e033      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d612:	f7fb fe5b 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800d616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d618:	e02f      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d61a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd f9a0 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d628:	e027      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d62a:	f107 0318 	add.w	r3, r7, #24
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd faec 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d638:	e01f      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d63a:	4b69      	ldr	r3, [pc, #420]	; (800d7e0 <UART_SetConfig+0xc2c>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 0320 	and.w	r3, r3, #32
 800d642:	2b00      	cmp	r3, #0
 800d644:	d009      	beq.n	800d65a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d646:	4b66      	ldr	r3, [pc, #408]	; (800d7e0 <UART_SetConfig+0xc2c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	08db      	lsrs	r3, r3, #3
 800d64c:	f003 0303 	and.w	r3, r3, #3
 800d650:	4a64      	ldr	r2, [pc, #400]	; (800d7e4 <UART_SetConfig+0xc30>)
 800d652:	fa22 f303 	lsr.w	r3, r2, r3
 800d656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d658:	e00f      	b.n	800d67a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d65a:	4b62      	ldr	r3, [pc, #392]	; (800d7e4 <UART_SetConfig+0xc30>)
 800d65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d65e:	e00c      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d660:	4b61      	ldr	r3, [pc, #388]	; (800d7e8 <UART_SetConfig+0xc34>)
 800d662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d664:	e009      	b.n	800d67a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d66c:	e005      	b.n	800d67a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d66e:	2300      	movs	r3, #0
 800d670:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d678:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f000 80ea 	beq.w	800d856 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d686:	4a55      	ldr	r2, [pc, #340]	; (800d7dc <UART_SetConfig+0xc28>)
 800d688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d68c:	461a      	mov	r2, r3
 800d68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d690:	fbb3 f3f2 	udiv	r3, r3, r2
 800d694:	005a      	lsls	r2, r3, #1
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	085b      	lsrs	r3, r3, #1
 800d69c:	441a      	add	r2, r3
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	2b0f      	cmp	r3, #15
 800d6ac:	d916      	bls.n	800d6dc <UART_SetConfig+0xb28>
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6b4:	d212      	bcs.n	800d6dc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	f023 030f 	bic.w	r3, r3, #15
 800d6be:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c2:	085b      	lsrs	r3, r3, #1
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f003 0307 	and.w	r3, r3, #7
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d6d8:	60da      	str	r2, [r3, #12]
 800d6da:	e0bc      	b.n	800d856 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6e2:	e0b8      	b.n	800d856 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d6e8:	2b20      	cmp	r3, #32
 800d6ea:	dc4b      	bgt.n	800d784 <UART_SetConfig+0xbd0>
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f2c0 8087 	blt.w	800d800 <UART_SetConfig+0xc4c>
 800d6f2:	2b20      	cmp	r3, #32
 800d6f4:	f200 8084 	bhi.w	800d800 <UART_SetConfig+0xc4c>
 800d6f8:	a201      	add	r2, pc, #4	; (adr r2, 800d700 <UART_SetConfig+0xb4c>)
 800d6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6fe:	bf00      	nop
 800d700:	0800d78b 	.word	0x0800d78b
 800d704:	0800d793 	.word	0x0800d793
 800d708:	0800d801 	.word	0x0800d801
 800d70c:	0800d801 	.word	0x0800d801
 800d710:	0800d79b 	.word	0x0800d79b
 800d714:	0800d801 	.word	0x0800d801
 800d718:	0800d801 	.word	0x0800d801
 800d71c:	0800d801 	.word	0x0800d801
 800d720:	0800d7ab 	.word	0x0800d7ab
 800d724:	0800d801 	.word	0x0800d801
 800d728:	0800d801 	.word	0x0800d801
 800d72c:	0800d801 	.word	0x0800d801
 800d730:	0800d801 	.word	0x0800d801
 800d734:	0800d801 	.word	0x0800d801
 800d738:	0800d801 	.word	0x0800d801
 800d73c:	0800d801 	.word	0x0800d801
 800d740:	0800d7bb 	.word	0x0800d7bb
 800d744:	0800d801 	.word	0x0800d801
 800d748:	0800d801 	.word	0x0800d801
 800d74c:	0800d801 	.word	0x0800d801
 800d750:	0800d801 	.word	0x0800d801
 800d754:	0800d801 	.word	0x0800d801
 800d758:	0800d801 	.word	0x0800d801
 800d75c:	0800d801 	.word	0x0800d801
 800d760:	0800d801 	.word	0x0800d801
 800d764:	0800d801 	.word	0x0800d801
 800d768:	0800d801 	.word	0x0800d801
 800d76c:	0800d801 	.word	0x0800d801
 800d770:	0800d801 	.word	0x0800d801
 800d774:	0800d801 	.word	0x0800d801
 800d778:	0800d801 	.word	0x0800d801
 800d77c:	0800d801 	.word	0x0800d801
 800d780:	0800d7f3 	.word	0x0800d7f3
 800d784:	2b40      	cmp	r3, #64	; 0x40
 800d786:	d037      	beq.n	800d7f8 <UART_SetConfig+0xc44>
 800d788:	e03a      	b.n	800d800 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d78a:	f7fb fd89 	bl	80092a0 <HAL_RCC_GetPCLK1Freq>
 800d78e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d790:	e03c      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d792:	f7fb fd9b 	bl	80092cc <HAL_RCC_GetPCLK2Freq>
 800d796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d798:	e038      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d79a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fd f8e0 	bl	800a964 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7a8:	e030      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7aa:	f107 0318 	add.w	r3, r7, #24
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fd fa2c 	bl	800ac0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7b8:	e028      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7ba:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <UART_SetConfig+0xc2c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f003 0320 	and.w	r3, r3, #32
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d012      	beq.n	800d7ec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7c6:	4b06      	ldr	r3, [pc, #24]	; (800d7e0 <UART_SetConfig+0xc2c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	08db      	lsrs	r3, r3, #3
 800d7cc:	f003 0303 	and.w	r3, r3, #3
 800d7d0:	4a04      	ldr	r2, [pc, #16]	; (800d7e4 <UART_SetConfig+0xc30>)
 800d7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7d8:	e018      	b.n	800d80c <UART_SetConfig+0xc58>
 800d7da:	bf00      	nop
 800d7dc:	08019fc8 	.word	0x08019fc8
 800d7e0:	58024400 	.word	0x58024400
 800d7e4:	03d09000 	.word	0x03d09000
 800d7e8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d7ec:	4b24      	ldr	r3, [pc, #144]	; (800d880 <UART_SetConfig+0xccc>)
 800d7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7f0:	e00c      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7f2:	4b24      	ldr	r3, [pc, #144]	; (800d884 <UART_SetConfig+0xcd0>)
 800d7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7f6:	e009      	b.n	800d80c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7fe:	e005      	b.n	800d80c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d800:	2300      	movs	r3, #0
 800d802:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d804:	2301      	movs	r3, #1
 800d806:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d80a:	bf00      	nop
    }

    if (pclk != 0U)
 800d80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d021      	beq.n	800d856 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d816:	4a1c      	ldr	r2, [pc, #112]	; (800d888 <UART_SetConfig+0xcd4>)
 800d818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d81c:	461a      	mov	r2, r3
 800d81e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d820:	fbb3 f2f2 	udiv	r2, r3, r2
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	085b      	lsrs	r3, r3, #1
 800d82a:	441a      	add	r2, r3
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	fbb2 f3f3 	udiv	r3, r2, r3
 800d834:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d838:	2b0f      	cmp	r3, #15
 800d83a:	d909      	bls.n	800d850 <UART_SetConfig+0xc9c>
 800d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d842:	d205      	bcs.n	800d850 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d846:	b29a      	uxth	r2, r3
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	60da      	str	r2, [r3, #12]
 800d84e:	e002      	b.n	800d856 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2201      	movs	r2, #1
 800d85a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2201      	movs	r2, #1
 800d862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2200      	movs	r2, #0
 800d86a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	2200      	movs	r2, #0
 800d870:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d872:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d876:	4618      	mov	r0, r3
 800d878:	3748      	adds	r7, #72	; 0x48
 800d87a:	46bd      	mov	sp, r7
 800d87c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d880:	03d09000 	.word	0x03d09000
 800d884:	003d0900 	.word	0x003d0900
 800d888:	08019fc8 	.word	0x08019fc8

0800d88c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	430a      	orrs	r2, r1
 800d8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ba:	f003 0302 	and.w	r3, r3, #2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	f003 0304 	and.w	r3, r3, #4
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	f003 0308 	and.w	r3, r3, #8
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d920:	f003 0310 	and.w	r3, r3, #16
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	689b      	ldr	r3, [r3, #8]
 800d92e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d942:	f003 0320 	and.w	r3, r3, #32
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d01a      	beq.n	800d9a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	430a      	orrs	r2, r1
 800d980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d98a:	d10a      	bne.n	800d9a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00a      	beq.n	800d9c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	430a      	orrs	r2, r1
 800d9c2:	605a      	str	r2, [r3, #4]
  }
}
 800d9c4:	bf00      	nop
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9e0:	f7f5 fd1c 	bl	800341c <HAL_GetTick>
 800d9e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0308 	and.w	r3, r3, #8
 800d9f0:	2b08      	cmp	r3, #8
 800d9f2:	d10e      	bne.n	800da12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d9f8:	9300      	str	r3, [sp, #0]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 f82f 	bl	800da66 <UART_WaitOnFlagUntilTimeout>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da0e:	2303      	movs	r3, #3
 800da10:	e025      	b.n	800da5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f003 0304 	and.w	r3, r3, #4
 800da1c:	2b04      	cmp	r3, #4
 800da1e:	d10e      	bne.n	800da3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f819 	bl	800da66 <UART_WaitOnFlagUntilTimeout>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da3a:	2303      	movs	r3, #3
 800da3c:	e00f      	b.n	800da5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2220      	movs	r2, #32
 800da42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2220      	movs	r2, #32
 800da4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2200      	movs	r2, #0
 800da58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b09c      	sub	sp, #112	; 0x70
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	60f8      	str	r0, [r7, #12]
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	603b      	str	r3, [r7, #0]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da76:	e0a9      	b.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da7e:	f000 80a5 	beq.w	800dbcc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da82:	f7f5 fccb 	bl	800341c <HAL_GetTick>
 800da86:	4602      	mov	r2, r0
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800da8e:	429a      	cmp	r2, r3
 800da90:	d302      	bcc.n	800da98 <UART_WaitOnFlagUntilTimeout+0x32>
 800da92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da94:	2b00      	cmp	r3, #0
 800da96:	d140      	bne.n	800db1a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa0:	e853 3f00 	ldrex	r3, [r3]
 800daa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800daa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800daac:	667b      	str	r3, [r7, #100]	; 0x64
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	461a      	mov	r2, r3
 800dab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dab8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dabc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dabe:	e841 2300 	strex	r3, r2, [r1]
 800dac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1e6      	bne.n	800da98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3308      	adds	r3, #8
 800dad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dad4:	e853 3f00 	ldrex	r3, [r3]
 800dad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	f023 0301 	bic.w	r3, r3, #1
 800dae0:	663b      	str	r3, [r7, #96]	; 0x60
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	3308      	adds	r3, #8
 800dae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800daea:	64ba      	str	r2, [r7, #72]	; 0x48
 800daec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800daf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800daf2:	e841 2300 	strex	r3, r2, [r1]
 800daf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800daf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d1e5      	bne.n	800daca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2220      	movs	r2, #32
 800db02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2220      	movs	r2, #32
 800db0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e069      	b.n	800dbee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 0304 	and.w	r3, r3, #4
 800db24:	2b00      	cmp	r3, #0
 800db26:	d051      	beq.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	69db      	ldr	r3, [r3, #28]
 800db2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db36:	d149      	bne.n	800dbcc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4a:	e853 3f00 	ldrex	r3, [r3]
 800db4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800db56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	461a      	mov	r2, r3
 800db5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db60:	637b      	str	r3, [r7, #52]	; 0x34
 800db62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db68:	e841 2300 	strex	r3, r2, [r1]
 800db6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800db6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1e6      	bne.n	800db42 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	613b      	str	r3, [r7, #16]
   return(result);
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	f023 0301 	bic.w	r3, r3, #1
 800db8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3308      	adds	r3, #8
 800db92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db94:	623a      	str	r2, [r7, #32]
 800db96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db98:	69f9      	ldr	r1, [r7, #28]
 800db9a:	6a3a      	ldr	r2, [r7, #32]
 800db9c:	e841 2300 	strex	r3, r2, [r1]
 800dba0:	61bb      	str	r3, [r7, #24]
   return(result);
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1e5      	bne.n	800db74 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2220      	movs	r2, #32
 800dbac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2220      	movs	r2, #32
 800dbb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2220      	movs	r2, #32
 800dbbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dbc8:	2303      	movs	r3, #3
 800dbca:	e010      	b.n	800dbee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	69da      	ldr	r2, [r3, #28]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	68ba      	ldr	r2, [r7, #8]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	bf0c      	ite	eq
 800dbdc:	2301      	moveq	r3, #1
 800dbde:	2300      	movne	r3, #0
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	79fb      	ldrb	r3, [r7, #7]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	f43f af46 	beq.w	800da78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3770      	adds	r7, #112	; 0x70
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}

0800dbf6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b085      	sub	sp, #20
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_UARTEx_DisableFifoMode+0x16>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e027      	b.n	800dc5c <HAL_UARTEx_DisableFifoMode+0x66>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2224      	movs	r2, #36	; 0x24
 800dc18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f022 0201 	bic.w	r2, r2, #1
 800dc32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dc3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2220      	movs	r2, #32
 800dc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr

0800dc68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d101      	bne.n	800dc80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dc7c:	2302      	movs	r3, #2
 800dc7e:	e02d      	b.n	800dcdc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2224      	movs	r2, #36	; 0x24
 800dc8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f022 0201 	bic.w	r2, r2, #1
 800dca6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	689b      	ldr	r3, [r3, #8]
 800dcae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	430a      	orrs	r2, r1
 800dcba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f84f 	bl	800dd60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2220      	movs	r2, #32
 800dcce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d101      	bne.n	800dcfc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	e02d      	b.n	800dd58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2224      	movs	r2, #36	; 0x24
 800dd08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 0201 	bic.w	r2, r2, #1
 800dd22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689b      	ldr	r3, [r3, #8]
 800dd2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	683a      	ldr	r2, [r7, #0]
 800dd34:	430a      	orrs	r2, r1
 800dd36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f811 	bl	800dd60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2220      	movs	r2, #32
 800dd4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3710      	adds	r7, #16
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d108      	bne.n	800dd82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2201      	movs	r2, #1
 800dd74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dd80:	e031      	b.n	800dde6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dd82:	2310      	movs	r3, #16
 800dd84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dd86:	2310      	movs	r3, #16
 800dd88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	0e5b      	lsrs	r3, r3, #25
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	f003 0307 	and.w	r3, r3, #7
 800dd98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	0f5b      	lsrs	r3, r3, #29
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	f003 0307 	and.w	r3, r3, #7
 800dda8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddaa:	7bbb      	ldrb	r3, [r7, #14]
 800ddac:	7b3a      	ldrb	r2, [r7, #12]
 800ddae:	4911      	ldr	r1, [pc, #68]	; (800ddf4 <UARTEx_SetNbDataToProcess+0x94>)
 800ddb0:	5c8a      	ldrb	r2, [r1, r2]
 800ddb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ddb6:	7b3a      	ldrb	r2, [r7, #12]
 800ddb8:	490f      	ldr	r1, [pc, #60]	; (800ddf8 <UARTEx_SetNbDataToProcess+0x98>)
 800ddba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ddbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddc8:	7bfb      	ldrb	r3, [r7, #15]
 800ddca:	7b7a      	ldrb	r2, [r7, #13]
 800ddcc:	4909      	ldr	r1, [pc, #36]	; (800ddf4 <UARTEx_SetNbDataToProcess+0x94>)
 800ddce:	5c8a      	ldrb	r2, [r1, r2]
 800ddd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ddd4:	7b7a      	ldrb	r2, [r7, #13]
 800ddd6:	4908      	ldr	r1, [pc, #32]	; (800ddf8 <UARTEx_SetNbDataToProcess+0x98>)
 800ddd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ddda:	fb93 f3f2 	sdiv	r3, r3, r2
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dde6:	bf00      	nop
 800dde8:	3714      	adds	r7, #20
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	08019fe0 	.word	0x08019fe0
 800ddf8:	08019fe8 	.word	0x08019fe8

0800ddfc <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800ddfc:	b480      	push	{r7}
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	2300      	movs	r3, #0
 800de02:	4618      	mov	r0, r3
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d201      	bcs.n	800de26 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	e000      	b.n	800de28 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800de26:	687b      	ldr	r3, [r7, #4]
    }
 800de28:	4618      	mov	r0, r3
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <_ZN3PinC1Ev>:
 *      Author: stefan
 */

#include "PinModel/Pin.hpp"

Pin::Pin(){}
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	719a      	strb	r2, [r3, #6]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>:

Pin::Pin(GPIO_TypeDef* port, GPIO_Pin gpio_pin) : port(port), gpio_pin(gpio_pin){}
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	4613      	mov	r3, r2
 800de5c:	80fb      	strh	r3, [r7, #6]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	88fa      	ldrh	r2, [r7, #6]
 800de68:	809a      	strh	r2, [r3, #4]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	719a      	strb	r2, [r3, #6]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4618      	mov	r0, r3
 800de74:	3714      	adds	r7, #20
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr

0800de7e <_ZN3Pin8inscribeERS_14Operation_Mode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, Operation_Mode mode){
 800de7e:	b480      	push	{r7}
 800de80:	b083      	sub	sp, #12
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
 800de86:	460b      	mov	r3, r1
 800de88:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != Operation_Mode::NOT_USED){
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	799b      	ldrb	r3, [r3, #6]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d103      	bne.n	800de9a <_ZN3Pin8inscribeERS_14Operation_Mode+0x1c>
		return;
	}
	pin.mode = mode;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	78fa      	ldrb	r2, [r7, #3]
 800de96:	719a      	strb	r2, [r3, #6]
 800de98:	e000      	b.n	800de9c <_ZN3Pin8inscribeERS_14Operation_Mode+0x1e>
		return;
 800de9a:	bf00      	nop
}
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800dea6:	b480      	push	{r7}
 800dea8:	b083      	sub	sp, #12
 800deaa:	af00      	add	r7, sp, #0
 800deac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4618      	mov	r0, r3
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800debc:	b590      	push	{r4, r7, lr}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff ffed 	bl	800dea6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 800decc:	4603      	mov	r3, r0
 800dece:	681c      	ldr	r4, [r3, #0]
 800ded0:	6838      	ldr	r0, [r7, #0]
 800ded2:	f7ff ffe8 	bl	800dea6 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 800ded6:	4603      	mov	r3, r0
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	429c      	cmp	r4, r3
 800dedc:	bf0c      	ite	eq
 800dede:	2301      	moveq	r3, #1
 800dee0:	2300      	movne	r3, #0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd90      	pop	{r4, r7, pc}

0800deec <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
	++_M_current;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	1d1a      	adds	r2, r3, #4
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	601a      	str	r2, [r3, #0]
	return *this;
 800defe:	687b      	ldr	r3, [r7, #4]
      }
 800df00:	4618      	mov	r0, r3
 800df02:	370c      	adds	r7, #12
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>:

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      _GLIBCXX20_CONSTEXPR
      operator _Tp&() const noexcept
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
      { return this->get(); }
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 f981 	bl	800e21c <_ZNKSt17reference_wrapperI3PinE3getEv>
 800df1a:	4603      	mov	r3, r0
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4618      	mov	r0, r3
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <_ZN3Pin5startEv>:

void Pin::start(){
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b090      	sub	sp, #64	; 0x40
 800df40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800df42:	4b7a      	ldr	r3, [pc, #488]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df48:	4a78      	ldr	r2, [pc, #480]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df4a:	f043 0302 	orr.w	r3, r3, #2
 800df4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800df52:	4b76      	ldr	r3, [pc, #472]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df58:	f003 0302 	and.w	r3, r3, #2
 800df5c:	623b      	str	r3, [r7, #32]
 800df5e:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800df60:	4b72      	ldr	r3, [pc, #456]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df66:	4a71      	ldr	r2, [pc, #452]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df68:	f043 0301 	orr.w	r3, r3, #1
 800df6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800df70:	4b6e      	ldr	r3, [pc, #440]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df76:	f003 0301 	and.w	r3, r3, #1
 800df7a:	61fb      	str	r3, [r7, #28]
 800df7c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800df7e:	4b6b      	ldr	r3, [pc, #428]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df84:	4a69      	ldr	r2, [pc, #420]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df86:	f043 0304 	orr.w	r3, r3, #4
 800df8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800df8e:	4b67      	ldr	r3, [pc, #412]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800df94:	f003 0304 	and.w	r3, r3, #4
 800df98:	61bb      	str	r3, [r7, #24]
 800df9a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800df9c:	4b63      	ldr	r3, [pc, #396]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800df9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfa2:	4a62      	ldr	r2, [pc, #392]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfa4:	f043 0308 	orr.w	r3, r3, #8
 800dfa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfac:	4b5f      	ldr	r3, [pc, #380]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfb2:	f003 0308 	and.w	r3, r3, #8
 800dfb6:	617b      	str	r3, [r7, #20]
 800dfb8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800dfba:	4b5c      	ldr	r3, [pc, #368]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfc0:	4a5a      	ldr	r2, [pc, #360]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfc2:	f043 0310 	orr.w	r3, r3, #16
 800dfc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfca:	4b58      	ldr	r3, [pc, #352]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfd0:	f003 0310 	and.w	r3, r3, #16
 800dfd4:	613b      	str	r3, [r7, #16]
 800dfd6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800dfd8:	4b54      	ldr	r3, [pc, #336]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfde:	4a53      	ldr	r2, [pc, #332]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfe0:	f043 0320 	orr.w	r3, r3, #32
 800dfe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800dfe8:	4b50      	ldr	r3, [pc, #320]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dfea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dfee:	f003 0320 	and.w	r3, r3, #32
 800dff2:	60fb      	str	r3, [r7, #12]
 800dff4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800dff6:	4b4d      	ldr	r3, [pc, #308]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800dffc:	4a4b      	ldr	r2, [pc, #300]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800dffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e006:	4b49      	ldr	r3, [pc, #292]	; (800e12c <_ZN3Pin5startEv+0x1f0>)
 800e008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e010:	60bb      	str	r3, [r7, #8]
 800e012:	68bb      	ldr	r3, [r7, #8]

	for(Pin& pin : Pin::pinVector){
 800e014:	4b46      	ldr	r3, [pc, #280]	; (800e130 <_ZN3Pin5startEv+0x1f4>)
 800e016:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e01a:	f000 f8de 	bl	800e1da <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>
 800e01e:	4603      	mov	r3, r0
 800e020:	607b      	str	r3, [r7, #4]
 800e022:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e024:	f000 f8e9 	bl	800e1fa <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>
 800e028:	4603      	mov	r3, r0
 800e02a:	603b      	str	r3, [r7, #0]
 800e02c:	463a      	mov	r2, r7
 800e02e:	1d3b      	adds	r3, r7, #4
 800e030:	4611      	mov	r1, r2
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff ff42 	bl	800debc <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 800e038:	4603      	mov	r3, r0
 800e03a:	f083 0301 	eor.w	r3, r3, #1
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b00      	cmp	r3, #0
 800e042:	d06f      	beq.n	800e124 <_ZN3Pin5startEv+0x1e8>
 800e044:	1d3b      	adds	r3, r7, #4
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff ff6c 	bl	800df24 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>
 800e04c:	4603      	mov	r3, r0
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff ff5c 	bl	800df0c <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>
 800e054:	63b8      	str	r0, [r7, #56]	; 0x38
		GPIO_InitStruct = {0};
 800e056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
 800e05e:	605a      	str	r2, [r3, #4]
 800e060:	609a      	str	r2, [r3, #8]
 800e062:	60da      	str	r2, [r3, #12]
 800e064:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = pin.gpio_pin;
 800e066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e068:	889b      	ldrh	r3, [r3, #4]
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24
		switch(pin.mode){
 800e06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06e:	799b      	ldrb	r3, [r3, #6]
 800e070:	2b04      	cmp	r3, #4
 800e072:	d851      	bhi.n	800e118 <_ZN3Pin5startEv+0x1dc>
 800e074:	a201      	add	r2, pc, #4	; (adr r2, 800e07c <_ZN3Pin5startEv+0x140>)
 800e076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07a:	bf00      	nop
 800e07c:	0800e091 	.word	0x0800e091
 800e080:	0800e0c9 	.word	0x0800e0c9
 800e084:	0800e0ab 	.word	0x0800e0ab
 800e088:	0800e0e3 	.word	0x0800e0e3
 800e08c:	0800e0fd 	.word	0x0800e0fd

		case Operation_Mode::NOT_USED:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 800e090:	2300      	movs	r3, #0
 800e092:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e094:	2302      	movs	r3, #2
 800e096:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7f9 fe60 	bl	8007d68 <HAL_GPIO_Init>
			break;
 800e0a8:	e037      	b.n	800e11a <_ZN3Pin5startEv+0x1de>

		case Operation_Mode::OUTPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 800e0aa:	2301      	movs	r3, #1
 800e0ac:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e0be:	4611      	mov	r1, r2
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f9 fe51 	bl	8007d68 <HAL_GPIO_Init>
			break;
 800e0c6:	e028      	b.n	800e11a <_ZN3Pin5startEv+0x1de>

		case Operation_Mode::INPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e0d8:	4611      	mov	r1, r2
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f9 fe44 	bl	8007d68 <HAL_GPIO_Init>
			break;
 800e0e0:	e01b      	b.n	800e11a <_ZN3Pin5startEv+0x1de>

		case Operation_Mode::ANALOG:
			GPIO_InitStruct.Mode =  GPIO_MODE_ANALOG;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e0f2:	4611      	mov	r1, r2
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f9 fe37 	bl	8007d68 <HAL_GPIO_Init>
			break;
 800e0fa:	e00e      	b.n	800e11a <_ZN3Pin5startEv+0x1de>
		case Operation_Mode::EXTERNAL_INTERRUPT:
			  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e0fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e100:	62bb      	str	r3, [r7, #40]	; 0x28
			  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800e102:	2302      	movs	r3, #2
 800e104:	62fb      	str	r3, [r7, #44]	; 0x2c
			  HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800e106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e10e:	4611      	mov	r1, r2
 800e110:	4618      	mov	r0, r3
 800e112:	f7f9 fe29 	bl	8007d68 <HAL_GPIO_Init>
			  break;
 800e116:	e000      	b.n	800e11a <_ZN3Pin5startEv+0x1de>

		default:
			break;
 800e118:	bf00      	nop
	for(Pin& pin : Pin::pinVector){
 800e11a:	1d3b      	adds	r3, r7, #4
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fee5 	bl	800deec <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>
 800e122:	e783      	b.n	800e02c <_ZN3Pin5startEv+0xf0>
		}
	}
}
 800e124:	bf00      	nop
 800e126:	3740      	adds	r7, #64	; 0x40
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	58024400 	.word	0x58024400
 800e130:	24000f84 	.word	0x24000f84

0800e134 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f879 	bl	800e234 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	4618      	mov	r0, r3
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4618      	mov	r0, r3
 800e158:	370c      	adds	r7, #12
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 800e162:	b5b0      	push	{r4, r5, r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	1d38      	adds	r0, r7, #4
 800e16c:	e880 0006 	stmia.w	r0, {r1, r2}
 800e170:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	4618      	mov	r0, r3
 800e178:	f000 f873 	bl	800e262 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 800e17c:	1d3b      	adds	r3, r7, #4
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 f897 	bl	800e2b2 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800e184:	4604      	mov	r4, r0
 800e186:	1d3b      	adds	r3, r7, #4
 800e188:	4618      	mov	r0, r3
 800e18a:	f000 f89e 	bl	800e2ca <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 800e18e:	4602      	mov	r2, r0
 800e190:	462b      	mov	r3, r5
 800e192:	4621      	mov	r1, r4
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f000 f8be 	bl	800e316 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bdb0      	pop	{r4, r5, r7, pc}

0800e1a4 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800e1a4:	b5b0      	push	{r4, r5, r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681c      	ldr	r4, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f8e6 	bl	800e388 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e1bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e1be:	461a      	mov	r2, r3
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 f8eb 	bl	800e39e <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f000 f858 	bl	800e280 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3708      	adds	r7, #8
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bdb0      	pop	{r4, r5, r7, pc}

0800e1da <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	f107 030c 	add.w	r3, r7, #12
 800e1e8:	4611      	mov	r1, r2
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f000 f8e5 	bl	800e3ba <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3710      	adds	r7, #16
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b084      	sub	sp, #16
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	1d1a      	adds	r2, r3, #4
 800e206:	f107 030c 	add.w	r3, r7, #12
 800e20a:	4611      	mov	r1, r2
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 f8d4 	bl	800e3ba <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	4618      	mov	r0, r3
 800e216:	3710      	adds	r7, #16
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <_ZNKSt17reference_wrapperI3PinE3getEv>:

      _GLIBCXX20_CONSTEXPR
      _Tp&
      get() const noexcept
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
      { return *_M_data; }
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4618      	mov	r0, r3
 800e22a:	370c      	adds	r7, #12
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr

0800e234 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4618      	mov	r0, r3
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e24a:	b580      	push	{r7, lr}
 800e24c:	b082      	sub	sp, #8
 800e24e:	af00      	add	r7, sp, #0
 800e250:	6078      	str	r0, [r7, #4]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff ff7a 	bl	800e14c <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4618      	mov	r0, r3
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}

0800e262 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800e262:	b580      	push	{r7, lr}
 800e264:	b082      	sub	sp, #8
 800e266:	af00      	add	r7, sp, #0
 800e268:	6078      	str	r0, [r7, #4]
 800e26a:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6839      	ldr	r1, [r7, #0]
 800e270:	4618      	mov	r0, r3
 800e272:	f000 f8b2 	bl	800e3da <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4618      	mov	r0, r3
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	689a      	ldr	r2, [r3, #8]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e298:	461a      	mov	r2, r3
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 f8af 	bl	800e3fe <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff ffd1 	bl	800e24a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800e2b2:	b480      	push	{r7}
 800e2b4:	b083      	sub	sp, #12
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	370c      	adds	r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800e2ca:	b590      	push	{r4, r7, lr}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f7ff ffed 	bl	800e2b2 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800e2d8:	4604      	mov	r4, r0
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 f8a2 	bl	800e424 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4423      	add	r3, r4
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	370c      	adds	r7, #12
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd90      	pop	{r4, r7, pc}

0800e2ee <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800e2ee:	b5b0      	push	{r4, r5, r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800e2f8:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e2fa:	1d3b      	adds	r3, r7, #4
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f000 f89d 	bl	800e43c <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 800e302:	462a      	mov	r2, r5
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	4620      	mov	r0, r4
 800e308:	f000 f8a2 	bl	800e450 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 800e30c:	4603      	mov	r3, r0
    }
 800e30e:	4618      	mov	r0, r3
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bdb0      	pop	{r4, r5, r7, pc}

0800e316 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800e316:	b590      	push	{r4, r7, lr}
 800e318:	b087      	sub	sp, #28
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	60f8      	str	r0, [r7, #12]
 800e31e:	60b9      	str	r1, [r7, #8]
 800e320:	607a      	str	r2, [r7, #4]
 800e322:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 800e324:	6879      	ldr	r1, [r7, #4]
 800e326:	68b8      	ldr	r0, [r7, #8]
 800e328:	f7ff ffe1 	bl	800e2ee <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 800e32c:	4603      	mov	r3, r0
 800e32e:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e330:	68fc      	ldr	r4, [r7, #12]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	4618      	mov	r0, r3
 800e336:	f000 f827 	bl	800e388 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e33a:	4603      	mov	r3, r0
 800e33c:	4619      	mov	r1, r3
 800e33e:	6978      	ldr	r0, [r7, #20]
 800e340:	f000 f896 	bl	800e470 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 800e344:	4603      	mov	r3, r0
 800e346:	4619      	mov	r1, r3
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 f8b9 	bl	800e4c0 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 800e34e:	4602      	mov	r2, r0
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	441a      	add	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	4618      	mov	r0, r3
 800e36a:	f000 f80d 	bl	800e388 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e36e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800e370:	4622      	mov	r2, r4
 800e372:	6879      	ldr	r1, [r7, #4]
 800e374:	68b8      	ldr	r0, [r7, #8]
 800e376:	f000 f8b7 	bl	800e4e8 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 800e37a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	605a      	str	r2, [r3, #4]
	}
 800e380:	bf00      	nop
 800e382:	371c      	adds	r7, #28
 800e384:	46bd      	mov	sp, r7
 800e386:	bd90      	pop	{r4, r7, pc}

0800e388 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4618      	mov	r0, r3
 800e394:	370c      	adds	r7, #12
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr

0800e39e <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800e3aa:	68b9      	ldr	r1, [r7, #8]
 800e3ac:	68f8      	ldr	r0, [r7, #12]
 800e3ae:	f000 f8ac 	bl	800e50a <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 800e3b2:	bf00      	nop
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800e3ba:	b480      	push	{r7}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
 800e3c2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800e3e4:	6839      	ldr	r1, [r7, #0]
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 f8a5 	bl	800e536 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 f8af 	bl	800e552 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}

0800e3fe <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800e3fe:	b580      	push	{r7, lr}
 800e400:	b084      	sub	sp, #16
 800e402:	af00      	add	r7, sp, #0
 800e404:	60f8      	str	r0, [r7, #12]
 800e406:	60b9      	str	r1, [r7, #8]
 800e408:	607a      	str	r2, [r7, #4]
	if (__p)
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	68b9      	ldr	r1, [r7, #8]
 800e416:	4618      	mov	r0, r3
 800e418:	f000 f8af 	bl	800e57a <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 800e41c:	bf00      	nop
 800e41e:	3710      	adds	r7, #16
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	370c      	adds	r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43a:	4770      	bx	lr

0800e43c <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e43c:	b480      	push	{r7}
 800e43e:	b083      	sub	sp, #12
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e444:	4618      	mov	r0, r3
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e45c:	68ba      	ldr	r2, [r7, #8]
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	109b      	asrs	r3, r3, #2
    }
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800e470:	b590      	push	{r4, r7, lr}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800e47a:	f107 030c 	add.w	r3, r7, #12
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f000 f858 	bl	800e536 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800e486:	f107 030c 	add.w	r3, r7, #12
 800e48a:	4618      	mov	r0, r3
 800e48c:	f000 f8a0 	bl	800e5d0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 800e490:	4602      	mov	r2, r0
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	4293      	cmp	r3, r2
 800e496:	bf8c      	ite	hi
 800e498:	2301      	movhi	r3, #1
 800e49a:	2300      	movls	r3, #0
 800e49c:	b2dc      	uxtb	r4, r3
 800e49e:	f107 030c 	add.w	r3, r7, #12
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7ff fe52 	bl	800e14c <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800e4a8:	2c00      	cmp	r4, #0
 800e4aa:	d002      	beq.n	800e4b2 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 800e4ac:	4803      	ldr	r0, [pc, #12]	; (800e4bc <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 800e4ae:	f00b f8fe 	bl	80196ae <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800e4b2:	687b      	ldr	r3, [r7, #4]
      }
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3714      	adds	r7, #20
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd90      	pop	{r4, r7, pc}
 800e4bc:	08019a98 	.word	0x08019a98

0800e4c0 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d006      	beq.n	800e4de <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6839      	ldr	r1, [r7, #0]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f000 f895 	bl	800e604 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	e000      	b.n	800e4e0 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 800e4de:	2300      	movs	r3, #0
      }
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3708      	adds	r7, #8
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	68b9      	ldr	r1, [r7, #8]
 800e4fa:	68f8      	ldr	r0, [r7, #12]
 800e4fc:	f000 f8a2 	bl	800e644 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 800e500:	4603      	mov	r3, r0
 800e502:	4618      	mov	r0, r3
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800e514:	f7ff fc72 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d004      	beq.n	800e528 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f8a1 	bl	800e668 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 800e526:	e003      	b.n	800e530 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800e528:	6839      	ldr	r1, [r7, #0]
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 f8b4 	bl	800e698 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e540:	6839      	ldr	r1, [r7, #0]
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f8b3 	bl	800e6ae <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4618      	mov	r0, r3
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e552:	b480      	push	{r7}
 800e554:	b083      	sub	sp, #12
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	605a      	str	r2, [r3, #4]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	609a      	str	r2, [r3, #8]
	{ }
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b088      	sub	sp, #32
 800e57e:	af00      	add	r7, sp, #0
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	61fb      	str	r3, [r7, #28]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	61bb      	str	r3, [r7, #24]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800e592:	f7ff fc33 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d003      	beq.n	800e5a4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 800e59c:	69b8      	ldr	r0, [r7, #24]
 800e59e:	f00a ffbb 	bl	8019518 <_ZdlPv>
	    return;
 800e5a2:	e005      	b.n	800e5b0 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	69b9      	ldr	r1, [r7, #24]
 800e5a8:	69f8      	ldr	r0, [r7, #28]
 800e5aa:	f000 f8c2 	bl	800e732 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	3720      	adds	r7, #32
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800e5c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e5d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e5dc:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff ffea 	bl	800e5b8 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e5e8:	f107 0208 	add.w	r2, r7, #8
 800e5ec:	f107 030c 	add.w	r3, r7, #12
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7ff fc0a 	bl	800de0c <_ZSt3minIjERKT_S2_S2_>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	681b      	ldr	r3, [r3, #0]
      }
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800e616:	f7ff fbf1 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d006      	beq.n	800e62e <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4618      	mov	r0, r3
 800e626:	f00a ff7b 	bl	8019520 <_Znwj>
 800e62a:	4603      	mov	r3, r0
 800e62c:	e006      	b.n	800e63c <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800e62e:	2200      	movs	r2, #0
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f000 f88c 	bl	800e750 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 800e638:	4603      	mov	r3, r0
 800e63a:	bf00      	nop
      { return __a.allocate(__n); }
 800e63c:	4618      	mov	r0, r3
 800e63e:	3710      	adds	r7, #16
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e644:	b580      	push	{r7, lr}
 800e646:	b086      	sub	sp, #24
 800e648:	af00      	add	r7, sp, #0
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800e650:	2301      	movs	r3, #1
 800e652:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	68b9      	ldr	r1, [r7, #8]
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f000 f834 	bl	800e6c6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 800e65e:	4603      	mov	r3, r0
    }
 800e660:	4618      	mov	r0, r3
 800e662:	3718      	adds	r7, #24
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	429a      	cmp	r2, r3
 800e678:	d00a      	beq.n	800e690 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 f843 	bl	800e706 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800e680:	4603      	mov	r3, r0
 800e682:	4618      	mov	r0, r3
 800e684:	f000 f84a 	bl	800e71c <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	3304      	adds	r3, #4
 800e68c:	607b      	str	r3, [r7, #4]
 800e68e:	e7f0      	b.n	800e672 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
 800e6a2:	bf00      	nop
 800e6a4:	370c      	adds	r7, #12
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr

0800e6ae <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e6ae:	b480      	push	{r7}
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
 800e6b6:	6039      	str	r1, [r7, #0]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b086      	sub	sp, #24
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	60f8      	str	r0, [r7, #12]
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d00e      	beq.n	800e6fc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800e6de:	6978      	ldr	r0, [r7, #20]
 800e6e0:	f000 f811 	bl	800e706 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 f850 	bl	800e78e <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	617b      	str	r3, [r7, #20]
 800e6fa:	e7ec      	b.n	800e6d6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 800e6fc:	697b      	ldr	r3, [r7, #20]
	}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3718      	adds	r7, #24
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}

0800e706 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e706:	b480      	push	{r7}
 800e708:	b083      	sub	sp, #12
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800e724:	6878      	ldr	r0, [r7, #4]
 800e726:	f000 f847 	bl	800e7b8 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	60f8      	str	r0, [r7, #12]
 800e73a:	60b9      	str	r1, [r7, #8]
 800e73c:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4619      	mov	r1, r3
 800e744:	68b8      	ldr	r0, [r7, #8]
 800e746:	f00a fee9 	bl	801951c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f000 f835 	bl	800e7cc <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 800e762:	4602      	mov	r2, r0
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	4293      	cmp	r3, r2
 800e768:	bf8c      	ite	hi
 800e76a:	2301      	movhi	r3, #1
 800e76c:	2300      	movls	r3, #0
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e774:	f00a ff98 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	009b      	lsls	r3, r3, #2
 800e77c:	4618      	mov	r0, r3
 800e77e:	f00a fecf 	bl	8019520 <_Znwj>
 800e782:	4603      	mov	r3, r0
 800e784:	bf00      	nop
      }
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e78e:	b590      	push	{r4, r7, lr}
 800e790:	b083      	sub	sp, #12
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800e798:	6838      	ldr	r0, [r7, #0]
 800e79a:	f000 f823 	bl	800e7e4 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 800e79e:	4604      	mov	r4, r0
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	2004      	movs	r0, #4
 800e7a6:	f7f2 ff0f 	bl	80015c8 <_ZnwjPv>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd90      	pop	{r4, r7, pc}

0800e7b8 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
    }
 800e7c0:	bf00      	nop
 800e7c2:	370c      	adds	r7, #12
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e7d4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	370c      	adds	r7, #12
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f8:	4770      	bx	lr
	...

0800e7fc <_Z41__static_initialization_and_destruction_0ii>:
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b0f4      	sub	sp, #464	; 0x1d0
 800e800:	af00      	add	r7, sp, #0
 800e802:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e806:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e80a:	6018      	str	r0, [r3, #0]
 800e80c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e810:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e814:	6019      	str	r1, [r3, #0]
 800e816:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e81a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2b01      	cmp	r3, #1
 800e822:	f040 832c 	bne.w	800ee7e <_Z41__static_initialization_and_destruction_0ii+0x682>
 800e826:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e82a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e834:	4293      	cmp	r3, r2
 800e836:	f040 8322 	bne.w	800ee7e <_Z41__static_initialization_and_destruction_0ii+0x682>
Pin PE2(GPIOE,GPIO_Pin::PIN_2);
 800e83a:	2204      	movs	r2, #4
 800e83c:	49ba      	ldr	r1, [pc, #744]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e83e:	48bb      	ldr	r0, [pc, #748]	; (800eb2c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800e840:	f7ff fb06 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE3(GPIOE,GPIO_Pin::PIN_3);
 800e844:	2208      	movs	r2, #8
 800e846:	49b8      	ldr	r1, [pc, #736]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e848:	48b9      	ldr	r0, [pc, #740]	; (800eb30 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800e84a:	f7ff fb01 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE4(GPIOE,GPIO_Pin::PIN_4);
 800e84e:	2210      	movs	r2, #16
 800e850:	49b5      	ldr	r1, [pc, #724]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e852:	48b8      	ldr	r0, [pc, #736]	; (800eb34 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800e854:	f7ff fafc 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE5(GPIOE,GPIO_Pin::PIN_5);
 800e858:	2220      	movs	r2, #32
 800e85a:	49b3      	ldr	r1, [pc, #716]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e85c:	48b6      	ldr	r0, [pc, #728]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800e85e:	f7ff faf7 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE6(GPIOE,GPIO_Pin::PIN_6);
 800e862:	2240      	movs	r2, #64	; 0x40
 800e864:	49b0      	ldr	r1, [pc, #704]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e866:	48b5      	ldr	r0, [pc, #724]	; (800eb3c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800e868:	f7ff faf2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC13(GPIOC,GPIO_Pin::PIN_13);
 800e86c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e870:	49b3      	ldr	r1, [pc, #716]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e872:	48b4      	ldr	r0, [pc, #720]	; (800eb44 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800e874:	f7ff faec 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC14(GPIOC,GPIO_Pin::PIN_14);
 800e878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e87c:	49b0      	ldr	r1, [pc, #704]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e87e:	48b2      	ldr	r0, [pc, #712]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800e880:	f7ff fae6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC15(GPIOC,GPIO_Pin::PIN_15);
 800e884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e888:	49ad      	ldr	r1, [pc, #692]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e88a:	48b0      	ldr	r0, [pc, #704]	; (800eb4c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800e88c:	f7ff fae0 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF0(GPIOF,GPIO_Pin::PIN_0);
 800e890:	2201      	movs	r2, #1
 800e892:	49af      	ldr	r1, [pc, #700]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e894:	48af      	ldr	r0, [pc, #700]	; (800eb54 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800e896:	f7ff fadb 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF1(GPIOF,GPIO_Pin::PIN_1);
 800e89a:	2202      	movs	r2, #2
 800e89c:	49ac      	ldr	r1, [pc, #688]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e89e:	48ae      	ldr	r0, [pc, #696]	; (800eb58 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800e8a0:	f7ff fad6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF2(GPIOF,GPIO_Pin::PIN_2);
 800e8a4:	2204      	movs	r2, #4
 800e8a6:	49aa      	ldr	r1, [pc, #680]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8a8:	48ac      	ldr	r0, [pc, #688]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800e8aa:	f7ff fad1 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF3(GPIOF,GPIO_Pin::PIN_3);
 800e8ae:	2208      	movs	r2, #8
 800e8b0:	49a7      	ldr	r1, [pc, #668]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8b2:	48ab      	ldr	r0, [pc, #684]	; (800eb60 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800e8b4:	f7ff facc 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF4(GPIOF,GPIO_Pin::PIN_4);
 800e8b8:	2210      	movs	r2, #16
 800e8ba:	49a5      	ldr	r1, [pc, #660]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8bc:	48a9      	ldr	r0, [pc, #676]	; (800eb64 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800e8be:	f7ff fac7 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF5(GPIOF,GPIO_Pin::PIN_5);
 800e8c2:	2220      	movs	r2, #32
 800e8c4:	49a2      	ldr	r1, [pc, #648]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8c6:	48a8      	ldr	r0, [pc, #672]	; (800eb68 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800e8c8:	f7ff fac2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF6(GPIOF,GPIO_Pin::PIN_6);
 800e8cc:	2240      	movs	r2, #64	; 0x40
 800e8ce:	49a0      	ldr	r1, [pc, #640]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8d0:	48a6      	ldr	r0, [pc, #664]	; (800eb6c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800e8d2:	f7ff fabd 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF7(GPIOF,GPIO_Pin::PIN_7);
 800e8d6:	2280      	movs	r2, #128	; 0x80
 800e8d8:	499d      	ldr	r1, [pc, #628]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8da:	48a5      	ldr	r0, [pc, #660]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800e8dc:	f7ff fab8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF8(GPIOF,GPIO_Pin::PIN_8);
 800e8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8e4:	499a      	ldr	r1, [pc, #616]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8e6:	48a3      	ldr	r0, [pc, #652]	; (800eb74 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800e8e8:	f7ff fab2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF9(GPIOF,GPIO_Pin::PIN_9);
 800e8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8f0:	4997      	ldr	r1, [pc, #604]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8f2:	48a1      	ldr	r0, [pc, #644]	; (800eb78 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800e8f4:	f7ff faac 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF10(GPIOF,GPIO_Pin::PIN_10);
 800e8f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e8fc:	4994      	ldr	r1, [pc, #592]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e8fe:	489f      	ldr	r0, [pc, #636]	; (800eb7c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800e900:	f7ff faa6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH0(GPIOH,GPIO_Pin::PIN_0);
 800e904:	2201      	movs	r2, #1
 800e906:	499e      	ldr	r1, [pc, #632]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e908:	489e      	ldr	r0, [pc, #632]	; (800eb84 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800e90a:	f7ff faa1 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH1(GPIOH,GPIO_Pin::PIN_1);
 800e90e:	2202      	movs	r2, #2
 800e910:	499b      	ldr	r1, [pc, #620]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e912:	489d      	ldr	r0, [pc, #628]	; (800eb88 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800e914:	f7ff fa9c 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC0(GPIOC,GPIO_Pin::PIN_0);
 800e918:	2201      	movs	r2, #1
 800e91a:	4989      	ldr	r1, [pc, #548]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e91c:	489b      	ldr	r0, [pc, #620]	; (800eb8c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800e91e:	f7ff fa97 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC1(GPIOC,GPIO_Pin::PIN_1);
 800e922:	2202      	movs	r2, #2
 800e924:	4986      	ldr	r1, [pc, #536]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e926:	489a      	ldr	r0, [pc, #616]	; (800eb90 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800e928:	f7ff fa92 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC2(GPIOC,GPIO_Pin::PIN_2);
 800e92c:	2204      	movs	r2, #4
 800e92e:	4984      	ldr	r1, [pc, #528]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e930:	4898      	ldr	r0, [pc, #608]	; (800eb94 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800e932:	f7ff fa8d 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC3(GPIOC,GPIO_Pin::PIN_3);
 800e936:	2208      	movs	r2, #8
 800e938:	4981      	ldr	r1, [pc, #516]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e93a:	4897      	ldr	r0, [pc, #604]	; (800eb98 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800e93c:	f7ff fa88 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA0(GPIOA,GPIO_Pin::PIN_0);
 800e940:	2201      	movs	r2, #1
 800e942:	4996      	ldr	r1, [pc, #600]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e944:	4896      	ldr	r0, [pc, #600]	; (800eba0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800e946:	f7ff fa83 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA1(GPIOA,GPIO_Pin::PIN_1);
 800e94a:	2202      	movs	r2, #2
 800e94c:	4993      	ldr	r1, [pc, #588]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e94e:	4895      	ldr	r0, [pc, #596]	; (800eba4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800e950:	f7ff fa7e 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA2(GPIOA,GPIO_Pin::PIN_2);
 800e954:	2204      	movs	r2, #4
 800e956:	4991      	ldr	r1, [pc, #580]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e958:	4893      	ldr	r0, [pc, #588]	; (800eba8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800e95a:	f7ff fa79 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA3(GPIOA,GPIO_Pin::PIN_3);
 800e95e:	2208      	movs	r2, #8
 800e960:	498e      	ldr	r1, [pc, #568]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e962:	4892      	ldr	r0, [pc, #584]	; (800ebac <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800e964:	f7ff fa74 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA4(GPIOA,GPIO_Pin::PIN_4);
 800e968:	2210      	movs	r2, #16
 800e96a:	498c      	ldr	r1, [pc, #560]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e96c:	4890      	ldr	r0, [pc, #576]	; (800ebb0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e96e:	f7ff fa6f 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA5(GPIOA,GPIO_Pin::PIN_5);
 800e972:	2220      	movs	r2, #32
 800e974:	4989      	ldr	r1, [pc, #548]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e976:	488f      	ldr	r0, [pc, #572]	; (800ebb4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800e978:	f7ff fa6a 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA6(GPIOA,GPIO_Pin::PIN_6);
 800e97c:	2240      	movs	r2, #64	; 0x40
 800e97e:	4987      	ldr	r1, [pc, #540]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e980:	488d      	ldr	r0, [pc, #564]	; (800ebb8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800e982:	f7ff fa65 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA7(GPIOA,GPIO_Pin::PIN_7);
 800e986:	2280      	movs	r2, #128	; 0x80
 800e988:	4984      	ldr	r1, [pc, #528]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e98a:	488c      	ldr	r0, [pc, #560]	; (800ebbc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800e98c:	f7ff fa60 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC4(GPIOC,GPIO_Pin::PIN_4);
 800e990:	2210      	movs	r2, #16
 800e992:	496b      	ldr	r1, [pc, #428]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e994:	488a      	ldr	r0, [pc, #552]	; (800ebc0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800e996:	f7ff fa5b 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC5(GPIOC,GPIO_Pin::PIN_5);
 800e99a:	2220      	movs	r2, #32
 800e99c:	4968      	ldr	r1, [pc, #416]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e99e:	4889      	ldr	r0, [pc, #548]	; (800ebc4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800e9a0:	f7ff fa56 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB0(GPIOB,GPIO_Pin::PIN_0);
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	4988      	ldr	r1, [pc, #544]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9a8:	4888      	ldr	r0, [pc, #544]	; (800ebcc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800e9aa:	f7ff fa51 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB1(GPIOB,GPIO_Pin::PIN_1);
 800e9ae:	2202      	movs	r2, #2
 800e9b0:	4985      	ldr	r1, [pc, #532]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9b2:	4887      	ldr	r0, [pc, #540]	; (800ebd0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800e9b4:	f7ff fa4c 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB2(GPIOB,GPIO_Pin::PIN_2);
 800e9b8:	2204      	movs	r2, #4
 800e9ba:	4983      	ldr	r1, [pc, #524]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9bc:	4885      	ldr	r0, [pc, #532]	; (800ebd4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800e9be:	f7ff fa47 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF11(GPIOF,GPIO_Pin::PIN_11);
 800e9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9c6:	4962      	ldr	r1, [pc, #392]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e9c8:	4883      	ldr	r0, [pc, #524]	; (800ebd8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800e9ca:	f7ff fa41 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF12(GPIOF,GPIO_Pin::PIN_12);
 800e9ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9d2:	495f      	ldr	r1, [pc, #380]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e9d4:	4881      	ldr	r0, [pc, #516]	; (800ebdc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800e9d6:	f7ff fa3b 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF13(GPIOF,GPIO_Pin::PIN_13);
 800e9da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9de:	495c      	ldr	r1, [pc, #368]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e9e0:	487f      	ldr	r0, [pc, #508]	; (800ebe0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800e9e2:	f7ff fa35 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF14(GPIOF,GPIO_Pin::PIN_14);
 800e9e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e9ea:	4959      	ldr	r1, [pc, #356]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e9ec:	487d      	ldr	r0, [pc, #500]	; (800ebe4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800e9ee:	f7ff fa2f 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF15(GPIOF,GPIO_Pin::PIN_15);
 800e9f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e9f6:	4956      	ldr	r1, [pc, #344]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e9f8:	487b      	ldr	r0, [pc, #492]	; (800ebe8 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800e9fa:	f7ff fa29 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG0(GPIOG,GPIO_Pin::PIN_0);
 800e9fe:	2201      	movs	r2, #1
 800ea00:	497a      	ldr	r1, [pc, #488]	; (800ebec <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800ea02:	487b      	ldr	r0, [pc, #492]	; (800ebf0 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800ea04:	f7ff fa24 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG1(GPIOG,GPIO_Pin::PIN_1);
 800ea08:	2202      	movs	r2, #2
 800ea0a:	4978      	ldr	r1, [pc, #480]	; (800ebec <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800ea0c:	4879      	ldr	r0, [pc, #484]	; (800ebf4 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800ea0e:	f7ff fa1f 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE7(GPIOE,GPIO_Pin::PIN_7);
 800ea12:	2280      	movs	r2, #128	; 0x80
 800ea14:	4944      	ldr	r1, [pc, #272]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea16:	4878      	ldr	r0, [pc, #480]	; (800ebf8 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800ea18:	f7ff fa1a 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE8(GPIOE,GPIO_Pin::PIN_8);
 800ea1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea20:	4941      	ldr	r1, [pc, #260]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea22:	4876      	ldr	r0, [pc, #472]	; (800ebfc <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800ea24:	f7ff fa14 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE9(GPIOE,GPIO_Pin::PIN_9);
 800ea28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea2c:	493e      	ldr	r1, [pc, #248]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea2e:	4874      	ldr	r0, [pc, #464]	; (800ec00 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800ea30:	f7ff fa0e 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE10(GPIOE,GPIO_Pin::PIN_10);
 800ea34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea38:	493b      	ldr	r1, [pc, #236]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea3a:	4872      	ldr	r0, [pc, #456]	; (800ec04 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800ea3c:	f7ff fa08 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE11(GPIOE,GPIO_Pin::PIN_11);
 800ea40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea44:	4938      	ldr	r1, [pc, #224]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea46:	4870      	ldr	r0, [pc, #448]	; (800ec08 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800ea48:	f7ff fa02 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE12(GPIOE,GPIO_Pin::PIN_12);
 800ea4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea50:	4935      	ldr	r1, [pc, #212]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea52:	486e      	ldr	r0, [pc, #440]	; (800ec0c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800ea54:	f7ff f9fc 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE13(GPIOE,GPIO_Pin::PIN_13);
 800ea58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ea5c:	4932      	ldr	r1, [pc, #200]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea5e:	486c      	ldr	r0, [pc, #432]	; (800ec10 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800ea60:	f7ff f9f6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE14(GPIOE,GPIO_Pin::PIN_14);
 800ea64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ea68:	492f      	ldr	r1, [pc, #188]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea6a:	486a      	ldr	r0, [pc, #424]	; (800ec14 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800ea6c:	f7ff f9f0 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE15(GPIOE,GPIO_Pin::PIN_15);
 800ea70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ea74:	492c      	ldr	r1, [pc, #176]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800ea76:	4868      	ldr	r0, [pc, #416]	; (800ec18 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800ea78:	f7ff f9ea 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB10(GPIOB,GPIO_Pin::PIN_10);
 800ea7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea80:	4951      	ldr	r1, [pc, #324]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800ea82:	4866      	ldr	r0, [pc, #408]	; (800ec1c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800ea84:	f7ff f9e4 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB11(GPIOB,GPIO_Pin::PIN_11);
 800ea88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea8c:	494e      	ldr	r1, [pc, #312]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800ea8e:	4864      	ldr	r0, [pc, #400]	; (800ec20 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800ea90:	f7ff f9de 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB12(GPIOB,GPIO_Pin::PIN_12);
 800ea94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea98:	494b      	ldr	r1, [pc, #300]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800ea9a:	4862      	ldr	r0, [pc, #392]	; (800ec24 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800ea9c:	f7ff f9d8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB13(GPIOB,GPIO_Pin::PIN_13);
 800eaa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eaa4:	4948      	ldr	r1, [pc, #288]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800eaa6:	4860      	ldr	r0, [pc, #384]	; (800ec28 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800eaa8:	f7ff f9d2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB14(GPIOB,GPIO_Pin::PIN_14);
 800eaac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800eab0:	4945      	ldr	r1, [pc, #276]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800eab2:	485e      	ldr	r0, [pc, #376]	; (800ec2c <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800eab4:	f7ff f9cc 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB15(GPIOB,GPIO_Pin::PIN_15);
 800eab8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eabc:	4942      	ldr	r1, [pc, #264]	; (800ebc8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800eabe:	485c      	ldr	r0, [pc, #368]	; (800ec30 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800eac0:	f7ff f9c6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD8(GPIOD,GPIO_Pin::PIN_8);
 800eac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eac8:	495a      	ldr	r1, [pc, #360]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eaca:	485b      	ldr	r0, [pc, #364]	; (800ec38 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 800eacc:	f7ff f9c0 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD9(GPIOD,GPIO_Pin::PIN_9);
 800ead0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ead4:	4957      	ldr	r1, [pc, #348]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ead6:	4859      	ldr	r0, [pc, #356]	; (800ec3c <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800ead8:	f7ff f9ba 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD10(GPIOD,GPIO_Pin::PIN_10);
 800eadc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eae0:	4954      	ldr	r1, [pc, #336]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eae2:	4857      	ldr	r0, [pc, #348]	; (800ec40 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 800eae4:	f7ff f9b4 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD11(GPIOD,GPIO_Pin::PIN_11);
 800eae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eaec:	4951      	ldr	r1, [pc, #324]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eaee:	4855      	ldr	r0, [pc, #340]	; (800ec44 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800eaf0:	f7ff f9ae 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD12(GPIOD,GPIO_Pin::PIN_12);
 800eaf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eaf8:	494e      	ldr	r1, [pc, #312]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eafa:	4853      	ldr	r0, [pc, #332]	; (800ec48 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 800eafc:	f7ff f9a8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD13(GPIOD,GPIO_Pin::PIN_13);
 800eb00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb04:	494b      	ldr	r1, [pc, #300]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eb06:	4851      	ldr	r0, [pc, #324]	; (800ec4c <_Z41__static_initialization_and_destruction_0ii+0x450>)
 800eb08:	f7ff f9a2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD14(GPIOD,GPIO_Pin::PIN_14);
 800eb0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800eb10:	4948      	ldr	r1, [pc, #288]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eb12:	484f      	ldr	r0, [pc, #316]	; (800ec50 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 800eb14:	f7ff f99c 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD15(GPIOD,GPIO_Pin::PIN_15);
 800eb18:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800eb1c:	4945      	ldr	r1, [pc, #276]	; (800ec34 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800eb1e:	484d      	ldr	r0, [pc, #308]	; (800ec54 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 800eb20:	f7ff f996 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
 800eb24:	e098      	b.n	800ec58 <_Z41__static_initialization_and_destruction_0ii+0x45c>
 800eb26:	bf00      	nop
 800eb28:	58021000 	.word	0x58021000
 800eb2c:	24000c14 	.word	0x24000c14
 800eb30:	24000c1c 	.word	0x24000c1c
 800eb34:	24000c24 	.word	0x24000c24
 800eb38:	24000c2c 	.word	0x24000c2c
 800eb3c:	24000c34 	.word	0x24000c34
 800eb40:	58020800 	.word	0x58020800
 800eb44:	24000c3c 	.word	0x24000c3c
 800eb48:	24000c44 	.word	0x24000c44
 800eb4c:	24000c4c 	.word	0x24000c4c
 800eb50:	58021400 	.word	0x58021400
 800eb54:	24000c54 	.word	0x24000c54
 800eb58:	24000c5c 	.word	0x24000c5c
 800eb5c:	24000c64 	.word	0x24000c64
 800eb60:	24000c6c 	.word	0x24000c6c
 800eb64:	24000c74 	.word	0x24000c74
 800eb68:	24000c7c 	.word	0x24000c7c
 800eb6c:	24000c84 	.word	0x24000c84
 800eb70:	24000c8c 	.word	0x24000c8c
 800eb74:	24000c94 	.word	0x24000c94
 800eb78:	24000c9c 	.word	0x24000c9c
 800eb7c:	24000ca4 	.word	0x24000ca4
 800eb80:	58021c00 	.word	0x58021c00
 800eb84:	24000cac 	.word	0x24000cac
 800eb88:	24000cb4 	.word	0x24000cb4
 800eb8c:	24000cbc 	.word	0x24000cbc
 800eb90:	24000cc4 	.word	0x24000cc4
 800eb94:	24000ccc 	.word	0x24000ccc
 800eb98:	24000cd4 	.word	0x24000cd4
 800eb9c:	58020000 	.word	0x58020000
 800eba0:	24000cdc 	.word	0x24000cdc
 800eba4:	24000ce4 	.word	0x24000ce4
 800eba8:	24000cec 	.word	0x24000cec
 800ebac:	24000cf4 	.word	0x24000cf4
 800ebb0:	24000cfc 	.word	0x24000cfc
 800ebb4:	24000d04 	.word	0x24000d04
 800ebb8:	24000d0c 	.word	0x24000d0c
 800ebbc:	24000d14 	.word	0x24000d14
 800ebc0:	24000d1c 	.word	0x24000d1c
 800ebc4:	24000d24 	.word	0x24000d24
 800ebc8:	58020400 	.word	0x58020400
 800ebcc:	24000d2c 	.word	0x24000d2c
 800ebd0:	24000d34 	.word	0x24000d34
 800ebd4:	24000d3c 	.word	0x24000d3c
 800ebd8:	24000d44 	.word	0x24000d44
 800ebdc:	24000d4c 	.word	0x24000d4c
 800ebe0:	24000d54 	.word	0x24000d54
 800ebe4:	24000d5c 	.word	0x24000d5c
 800ebe8:	24000d64 	.word	0x24000d64
 800ebec:	58021800 	.word	0x58021800
 800ebf0:	24000d6c 	.word	0x24000d6c
 800ebf4:	24000d74 	.word	0x24000d74
 800ebf8:	24000d7c 	.word	0x24000d7c
 800ebfc:	24000d84 	.word	0x24000d84
 800ec00:	24000d8c 	.word	0x24000d8c
 800ec04:	24000d94 	.word	0x24000d94
 800ec08:	24000d9c 	.word	0x24000d9c
 800ec0c:	24000da4 	.word	0x24000da4
 800ec10:	24000dac 	.word	0x24000dac
 800ec14:	24000db4 	.word	0x24000db4
 800ec18:	24000dbc 	.word	0x24000dbc
 800ec1c:	24000dc4 	.word	0x24000dc4
 800ec20:	24000dcc 	.word	0x24000dcc
 800ec24:	24000dd4 	.word	0x24000dd4
 800ec28:	24000ddc 	.word	0x24000ddc
 800ec2c:	24000de4 	.word	0x24000de4
 800ec30:	24000dec 	.word	0x24000dec
 800ec34:	58020c00 	.word	0x58020c00
 800ec38:	24000df4 	.word	0x24000df4
 800ec3c:	24000dfc 	.word	0x24000dfc
 800ec40:	24000e04 	.word	0x24000e04
 800ec44:	24000e0c 	.word	0x24000e0c
 800ec48:	24000e14 	.word	0x24000e14
 800ec4c:	24000e1c 	.word	0x24000e1c
 800ec50:	24000e24 	.word	0x24000e24
 800ec54:	24000e2c 	.word	0x24000e2c
Pin PG2(GPIOG,GPIO_Pin::PIN_2);
 800ec58:	2204      	movs	r2, #4
 800ec5a:	4995      	ldr	r1, [pc, #596]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec5c:	4895      	ldr	r0, [pc, #596]	; (800eeb4 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800ec5e:	f7ff f8f7 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG3(GPIOG,GPIO_Pin::PIN_3);
 800ec62:	2208      	movs	r2, #8
 800ec64:	4992      	ldr	r1, [pc, #584]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec66:	4894      	ldr	r0, [pc, #592]	; (800eeb8 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800ec68:	f7ff f8f2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG4(GPIOG,GPIO_Pin::PIN_4);
 800ec6c:	2210      	movs	r2, #16
 800ec6e:	4990      	ldr	r1, [pc, #576]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec70:	4892      	ldr	r0, [pc, #584]	; (800eebc <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800ec72:	f7ff f8ed 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG5(GPIOG,GPIO_Pin::PIN_5);
 800ec76:	2220      	movs	r2, #32
 800ec78:	498d      	ldr	r1, [pc, #564]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec7a:	4891      	ldr	r0, [pc, #580]	; (800eec0 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800ec7c:	f7ff f8e8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG6(GPIOG,GPIO_Pin::PIN_6);
 800ec80:	2240      	movs	r2, #64	; 0x40
 800ec82:	498b      	ldr	r1, [pc, #556]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec84:	488f      	ldr	r0, [pc, #572]	; (800eec4 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800ec86:	f7ff f8e3 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG7(GPIOG,GPIO_Pin::PIN_7);
 800ec8a:	2280      	movs	r2, #128	; 0x80
 800ec8c:	4988      	ldr	r1, [pc, #544]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec8e:	488e      	ldr	r0, [pc, #568]	; (800eec8 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800ec90:	f7ff f8de 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG8(GPIOG,GPIO_Pin::PIN_8);
 800ec94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec98:	4985      	ldr	r1, [pc, #532]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ec9a:	488c      	ldr	r0, [pc, #560]	; (800eecc <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800ec9c:	f7ff f8d8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC6(GPIOC,GPIO_Pin::PIN_6);
 800eca0:	2240      	movs	r2, #64	; 0x40
 800eca2:	498b      	ldr	r1, [pc, #556]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800eca4:	488b      	ldr	r0, [pc, #556]	; (800eed4 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 800eca6:	f7ff f8d3 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC7(GPIOC,GPIO_Pin::PIN_7);
 800ecaa:	2280      	movs	r2, #128	; 0x80
 800ecac:	4988      	ldr	r1, [pc, #544]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ecae:	488a      	ldr	r0, [pc, #552]	; (800eed8 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800ecb0:	f7ff f8ce 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC8(GPIOC,GPIO_Pin::PIN_8);
 800ecb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecb8:	4985      	ldr	r1, [pc, #532]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ecba:	4888      	ldr	r0, [pc, #544]	; (800eedc <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 800ecbc:	f7ff f8c8 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC9(GPIOC,GPIO_Pin::PIN_9);
 800ecc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecc4:	4982      	ldr	r1, [pc, #520]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ecc6:	4886      	ldr	r0, [pc, #536]	; (800eee0 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 800ecc8:	f7ff f8c2 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA8(GPIOA,GPIO_Pin::PIN_8);
 800eccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ecd0:	4984      	ldr	r1, [pc, #528]	; (800eee4 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ecd2:	4885      	ldr	r0, [pc, #532]	; (800eee8 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 800ecd4:	f7ff f8bc 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA9(GPIOA,GPIO_Pin::PIN_9);
 800ecd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ecdc:	4981      	ldr	r1, [pc, #516]	; (800eee4 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ecde:	4883      	ldr	r0, [pc, #524]	; (800eeec <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800ece0:	f7ff f8b6 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA10(GPIOA,GPIO_Pin::PIN_10);
 800ece4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ece8:	497e      	ldr	r1, [pc, #504]	; (800eee4 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ecea:	4881      	ldr	r0, [pc, #516]	; (800eef0 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 800ecec:	f7ff f8b0 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA11(GPIOA,GPIO_Pin::PIN_11);
 800ecf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecf4:	497b      	ldr	r1, [pc, #492]	; (800eee4 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ecf6:	487f      	ldr	r0, [pc, #508]	; (800eef4 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 800ecf8:	f7ff f8aa 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA12(GPIOA,GPIO_Pin::PIN_12);
 800ecfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed00:	4978      	ldr	r1, [pc, #480]	; (800eee4 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ed02:	487d      	ldr	r0, [pc, #500]	; (800eef8 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800ed04:	f7ff f8a4 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC10(GPIOC,GPIO_Pin::PIN_10);
 800ed08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed0c:	4970      	ldr	r1, [pc, #448]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ed0e:	487b      	ldr	r0, [pc, #492]	; (800eefc <_Z41__static_initialization_and_destruction_0ii+0x700>)
 800ed10:	f7ff f89e 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC11(GPIOC,GPIO_Pin::PIN_11);
 800ed14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed18:	496d      	ldr	r1, [pc, #436]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ed1a:	4879      	ldr	r0, [pc, #484]	; (800ef00 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800ed1c:	f7ff f898 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC12(GPIOC,GPIO_Pin::PIN_12);
 800ed20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ed24:	496a      	ldr	r1, [pc, #424]	; (800eed0 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ed26:	4877      	ldr	r0, [pc, #476]	; (800ef04 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800ed28:	f7ff f892 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD0(GPIOD,GPIO_Pin::PIN_0);
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	4976      	ldr	r1, [pc, #472]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed30:	4876      	ldr	r0, [pc, #472]	; (800ef0c <_Z41__static_initialization_and_destruction_0ii+0x710>)
 800ed32:	f7ff f88d 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD1(GPIOD,GPIO_Pin::PIN_1);
 800ed36:	2202      	movs	r2, #2
 800ed38:	4973      	ldr	r1, [pc, #460]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed3a:	4875      	ldr	r0, [pc, #468]	; (800ef10 <_Z41__static_initialization_and_destruction_0ii+0x714>)
 800ed3c:	f7ff f888 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD2(GPIOD,GPIO_Pin::PIN_2);
 800ed40:	2204      	movs	r2, #4
 800ed42:	4971      	ldr	r1, [pc, #452]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed44:	4873      	ldr	r0, [pc, #460]	; (800ef14 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 800ed46:	f7ff f883 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD3(GPIOD,GPIO_Pin::PIN_3);
 800ed4a:	2208      	movs	r2, #8
 800ed4c:	496e      	ldr	r1, [pc, #440]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed4e:	4872      	ldr	r0, [pc, #456]	; (800ef18 <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 800ed50:	f7ff f87e 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD4(GPIOD,GPIO_Pin::PIN_4);
 800ed54:	2210      	movs	r2, #16
 800ed56:	496c      	ldr	r1, [pc, #432]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed58:	4870      	ldr	r0, [pc, #448]	; (800ef1c <_Z41__static_initialization_and_destruction_0ii+0x720>)
 800ed5a:	f7ff f879 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD5(GPIOD,GPIO_Pin::PIN_5);
 800ed5e:	2220      	movs	r2, #32
 800ed60:	4969      	ldr	r1, [pc, #420]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed62:	486f      	ldr	r0, [pc, #444]	; (800ef20 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 800ed64:	f7ff f874 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD6(GPIOD,GPIO_Pin::PIN_6);
 800ed68:	2240      	movs	r2, #64	; 0x40
 800ed6a:	4967      	ldr	r1, [pc, #412]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed6c:	486d      	ldr	r0, [pc, #436]	; (800ef24 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800ed6e:	f7ff f86f 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD7(GPIOD,GPIO_Pin::PIN_7);
 800ed72:	2280      	movs	r2, #128	; 0x80
 800ed74:	4964      	ldr	r1, [pc, #400]	; (800ef08 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ed76:	486c      	ldr	r0, [pc, #432]	; (800ef28 <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 800ed78:	f7ff f86a 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG9(GPIOG,GPIO_Pin::PIN_9);
 800ed7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed80:	494b      	ldr	r1, [pc, #300]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ed82:	486a      	ldr	r0, [pc, #424]	; (800ef2c <_Z41__static_initialization_and_destruction_0ii+0x730>)
 800ed84:	f7ff f864 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG10(GPIOG,GPIO_Pin::PIN_10);
 800ed88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed8c:	4948      	ldr	r1, [pc, #288]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ed8e:	4868      	ldr	r0, [pc, #416]	; (800ef30 <_Z41__static_initialization_and_destruction_0ii+0x734>)
 800ed90:	f7ff f85e 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG11(GPIOG,GPIO_Pin::PIN_11);
 800ed94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed98:	4945      	ldr	r1, [pc, #276]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ed9a:	4866      	ldr	r0, [pc, #408]	; (800ef34 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 800ed9c:	f7ff f858 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG12(GPIOG,GPIO_Pin::PIN_12);
 800eda0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eda4:	4942      	ldr	r1, [pc, #264]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800eda6:	4864      	ldr	r0, [pc, #400]	; (800ef38 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 800eda8:	f7ff f852 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG13(GPIOG,GPIO_Pin::PIN_13);
 800edac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800edb0:	493f      	ldr	r1, [pc, #252]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800edb2:	4862      	ldr	r0, [pc, #392]	; (800ef3c <_Z41__static_initialization_and_destruction_0ii+0x740>)
 800edb4:	f7ff f84c 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG14(GPIOG,GPIO_Pin::PIN_14);
 800edb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800edbc:	493c      	ldr	r1, [pc, #240]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800edbe:	4860      	ldr	r0, [pc, #384]	; (800ef40 <_Z41__static_initialization_and_destruction_0ii+0x744>)
 800edc0:	f7ff f846 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG15(GPIOG,GPIO_Pin::PIN_15);
 800edc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800edc8:	4939      	ldr	r1, [pc, #228]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800edca:	485e      	ldr	r0, [pc, #376]	; (800ef44 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 800edcc:	f7ff f840 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB4(GPIOB,GPIO_Pin::PIN_4);
 800edd0:	2210      	movs	r2, #16
 800edd2:	495d      	ldr	r1, [pc, #372]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800edd4:	485d      	ldr	r0, [pc, #372]	; (800ef4c <_Z41__static_initialization_and_destruction_0ii+0x750>)
 800edd6:	f7ff f83b 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB5(GPIOB,GPIO_Pin::PIN_5);
 800edda:	2220      	movs	r2, #32
 800eddc:	495a      	ldr	r1, [pc, #360]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800edde:	485c      	ldr	r0, [pc, #368]	; (800ef50 <_Z41__static_initialization_and_destruction_0ii+0x754>)
 800ede0:	f7ff f836 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB6(GPIOB,GPIO_Pin::PIN_6);
 800ede4:	2240      	movs	r2, #64	; 0x40
 800ede6:	4958      	ldr	r1, [pc, #352]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ede8:	485a      	ldr	r0, [pc, #360]	; (800ef54 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 800edea:	f7ff f831 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB7(GPIOB,GPIO_Pin::PIN_7);
 800edee:	2280      	movs	r2, #128	; 0x80
 800edf0:	4955      	ldr	r1, [pc, #340]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800edf2:	4859      	ldr	r0, [pc, #356]	; (800ef58 <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 800edf4:	f7ff f82c 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB8(GPIOB,GPIO_Pin::PIN_8);
 800edf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800edfc:	4952      	ldr	r1, [pc, #328]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800edfe:	4857      	ldr	r0, [pc, #348]	; (800ef5c <_Z41__static_initialization_and_destruction_0ii+0x760>)
 800ee00:	f7ff f826 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB9(GPIOB,GPIO_Pin::PIN_9);
 800ee04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee08:	494f      	ldr	r1, [pc, #316]	; (800ef48 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ee0a:	4855      	ldr	r0, [pc, #340]	; (800ef60 <_Z41__static_initialization_and_destruction_0ii+0x764>)
 800ee0c:	f7ff f820 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE0(GPIOE,GPIO_Pin::PIN_0);
 800ee10:	2201      	movs	r2, #1
 800ee12:	4954      	ldr	r1, [pc, #336]	; (800ef64 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800ee14:	4854      	ldr	r0, [pc, #336]	; (800ef68 <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 800ee16:	f7ff f81b 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE1(GPIOE,GPIO_Pin::PIN_1);
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	4951      	ldr	r1, [pc, #324]	; (800ef64 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800ee1e:	4853      	ldr	r0, [pc, #332]	; (800ef6c <_Z41__static_initialization_and_destruction_0ii+0x770>)
 800ee20:	f7ff f816 	bl	800de50 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 800ee24:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ee28:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ee2c:	4a50      	ldr	r2, [pc, #320]	; (800ef70 <_Z41__static_initialization_and_destruction_0ii+0x774>)
 800ee2e:	4618      	mov	r0, r3
 800ee30:	4611      	mov	r1, r2
 800ee32:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800ee36:	461a      	mov	r2, r3
 800ee38:	f00a fc8a 	bl	8019750 <memcpy>
 800ee3c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ee40:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ee44:	f107 0214 	add.w	r2, r7, #20
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ee4e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ee52:	226e      	movs	r2, #110	; 0x6e
 800ee54:	605a      	str	r2, [r3, #4]
 800ee56:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff f96a 	bl	800e134 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 800ee60:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ee64:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800ee68:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800ee6c:	ca06      	ldmia	r2, {r1, r2}
 800ee6e:	4841      	ldr	r0, [pc, #260]	; (800ef74 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800ee70:	f7ff f977 	bl	800e162 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 800ee74:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7ff f967 	bl	800e14c <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800ee7e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ee82:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10b      	bne.n	800eea4 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800ee8c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ee90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d102      	bne.n	800eea4 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800ee9e:	4835      	ldr	r0, [pc, #212]	; (800ef74 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800eea0:	f7ff f980 	bl	800e1a4 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 800eea4:	bf00      	nop
 800eea6:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	58021800 	.word	0x58021800
 800eeb4:	24000e34 	.word	0x24000e34
 800eeb8:	24000e3c 	.word	0x24000e3c
 800eebc:	24000e44 	.word	0x24000e44
 800eec0:	24000e4c 	.word	0x24000e4c
 800eec4:	24000e54 	.word	0x24000e54
 800eec8:	24000e5c 	.word	0x24000e5c
 800eecc:	24000e64 	.word	0x24000e64
 800eed0:	58020800 	.word	0x58020800
 800eed4:	24000e6c 	.word	0x24000e6c
 800eed8:	24000e74 	.word	0x24000e74
 800eedc:	24000e7c 	.word	0x24000e7c
 800eee0:	24000e84 	.word	0x24000e84
 800eee4:	58020000 	.word	0x58020000
 800eee8:	24000e8c 	.word	0x24000e8c
 800eeec:	24000e94 	.word	0x24000e94
 800eef0:	24000e9c 	.word	0x24000e9c
 800eef4:	24000ea4 	.word	0x24000ea4
 800eef8:	24000eac 	.word	0x24000eac
 800eefc:	24000eb4 	.word	0x24000eb4
 800ef00:	24000ebc 	.word	0x24000ebc
 800ef04:	24000ec4 	.word	0x24000ec4
 800ef08:	58020c00 	.word	0x58020c00
 800ef0c:	24000ecc 	.word	0x24000ecc
 800ef10:	24000ed4 	.word	0x24000ed4
 800ef14:	24000edc 	.word	0x24000edc
 800ef18:	24000ee4 	.word	0x24000ee4
 800ef1c:	24000eec 	.word	0x24000eec
 800ef20:	24000ef4 	.word	0x24000ef4
 800ef24:	24000efc 	.word	0x24000efc
 800ef28:	24000f04 	.word	0x24000f04
 800ef2c:	24000f0c 	.word	0x24000f0c
 800ef30:	24000f14 	.word	0x24000f14
 800ef34:	24000f1c 	.word	0x24000f1c
 800ef38:	24000f24 	.word	0x24000f24
 800ef3c:	24000f2c 	.word	0x24000f2c
 800ef40:	24000f34 	.word	0x24000f34
 800ef44:	24000f3c 	.word	0x24000f3c
 800ef48:	58020400 	.word	0x58020400
 800ef4c:	24000f44 	.word	0x24000f44
 800ef50:	24000f4c 	.word	0x24000f4c
 800ef54:	24000f54 	.word	0x24000f54
 800ef58:	24000f5c 	.word	0x24000f5c
 800ef5c:	24000f64 	.word	0x24000f64
 800ef60:	24000f6c 	.word	0x24000f6c
 800ef64:	58021000 	.word	0x58021000
 800ef68:	24000f74 	.word	0x24000f74
 800ef6c:	24000f7c 	.word	0x24000f7c
 800ef70:	08019acc 	.word	0x08019acc
 800ef74:	24000f84 	.word	0x24000f84

0800ef78 <_GLOBAL__sub_I__ZN3PinC2Ev>:
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef80:	2001      	movs	r0, #1
 800ef82:	f7ff fc3b 	bl	800e7fc <_Z41__static_initialization_and_destruction_0ii>
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <_GLOBAL__sub_D__ZN3PinC2Ev>:
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ef90:	2000      	movs	r0, #0
 800ef92:	f7ff fc33 	bl	800e7fc <_Z41__static_initialization_and_destruction_0ii>
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f000 f805 	bl	800efb6 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800efb6:	b480      	push	{r7}
 800efb8:	b083      	sub	sp, #12
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800efc4:	687a      	ldr	r2, [r7, #4]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	611a      	str	r2, [r3, #16]
    }
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 800efe2:	b480      	push	{r7}
 800efe4:	b083      	sub	sp, #12
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	6078      	str	r0, [r7, #4]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	bf0c      	ite	eq
 800eff2:	2301      	moveq	r3, #1
 800eff4:	2300      	movne	r3, #0
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	4618      	mov	r0, r3
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr

0800f004 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 f9fa 	bl	800f406 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4618      	mov	r0, r3
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4618      	mov	r0, r3
 800f028:	f000 f9d8 	bl	800f3dc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4618      	mov	r0, r3
 800f030:	3708      	adds	r7, #8
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800f036:	b580      	push	{r7, lr}
 800f038:	b082      	sub	sp, #8
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4618      	mov	r0, r3
 800f042:	f7ff ffeb 	bl	800f01c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4618      	mov	r0, r3
 800f05c:	f000 f9de 	bl	800f41c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	4618      	mov	r0, r3
 800f064:	3708      	adds	r7, #8
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>:
#include "EXTI/EXTI.hpp"

forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};

ExternalInterrupt::Instance::Instance(IRQn_Type interrupt_request_number) :
 800f06a:	b580      	push	{r7, lr}
 800f06c:	b082      	sub	sp, #8
 800f06e:	af00      	add	r7, sp, #0
 800f070:	6078      	str	r0, [r7, #4]
 800f072:	460b      	mov	r3, r1
 800f074:	807b      	strh	r3, [r7, #2]
		interrupt_request_number(interrupt_request_number) {}
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	887a      	ldrh	r2, [r7, #2]
 800f07a:	801a      	strh	r2, [r3, #0]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	3304      	adds	r3, #4
 800f080:	2100      	movs	r1, #0
 800f082:	4618      	mov	r0, r3
 800f084:	f000 f94a 	bl	800f31c <_ZNSt8functionIFvvEEC1EDn>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2201      	movs	r2, #1
 800f08c:	751a      	strb	r2, [r3, #20]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4618      	mov	r0, r3
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	80fb      	strh	r3, [r7, #6]
	ExternalInterrupt::Instance& exti = ExternalInterrupt::instances[GPIO_Pin];
 800f0a2:	1dbb      	adds	r3, r7, #6
 800f0a4:	4619      	mov	r1, r3
 800f0a6:	4808      	ldr	r0, [pc, #32]	; (800f0c8 <HAL_GPIO_EXTI_Callback+0x30>)
 800f0a8:	f000 f9ce 	bl	800f448 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>
 800f0ac:	60f8      	str	r0, [r7, #12]
	if (exti.is_on) {
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	7d1b      	ldrb	r3, [r3, #20]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d004      	beq.n	800f0c0 <HAL_GPIO_EXTI_Callback+0x28>
		exti.action();
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 fa20 	bl	800f500 <_ZNKSt8functionIFvvEEclEv>
	}
}
 800f0c0:	bf00      	nop
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	240011a4 	.word	0x240011a4

0800f0cc <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE>:

optional<uint8_t> ExternalInterrupt::inscribe(Pin& pin, function<void()>&& action) {
 800f0cc:	b590      	push	{r4, r7, lr}
 800f0ce:	b087      	sub	sp, #28
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
	if (not instances.contains(pin.gpio_pin)) {
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	889b      	ldrh	r3, [r3, #4]
 800f0da:	817b      	strh	r3, [r7, #10]
 800f0dc:	f107 030a 	add.w	r3, r7, #10
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4828      	ldr	r0, [pc, #160]	; (800f184 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xb8>)
 800f0e4:	f000 fa22 	bl	800f52c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8containsERS5_>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	f083 0301 	eor.w	r3, r3, #1
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d008      	beq.n	800f106 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0x3a>
		return nullopt;
 800f0f4:	f107 0310 	add.w	r3, r7, #16
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 fa6d 	bl	800f5da <_ZNSt8optionalIhEC1ESt9nullopt_t>
 800f100:	8a3b      	ldrh	r3, [r7, #16]
 800f102:	81bb      	strh	r3, [r7, #12]
 800f104:	e033      	b.n	800f16e <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xa2>
	}

	Pin::inscribe(pin, EXTERNAL_INTERRUPT);
 800f106:	2104      	movs	r1, #4
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7fe feb8 	bl	800de7e <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = id_manager.front();
 800f10e:	481e      	ldr	r0, [pc, #120]	; (800f188 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xbc>)
 800f110:	f000 fa71 	bl	800f5f6 <_ZNSt12forward_listIhSaIhEE5frontEv>
 800f114:	4603      	mov	r3, r0
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	727b      	strb	r3, [r7, #9]
	id_manager.pop_front();
 800f11a:	481b      	ldr	r0, [pc, #108]	; (800f188 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xbc>)
 800f11c:	f000 fa7a 	bl	800f614 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	service_ids[id] = pin;
 800f120:	f107 0309 	add.w	r3, r7, #9
 800f124:	4619      	mov	r1, r3
 800f126:	4819      	ldr	r0, [pc, #100]	; (800f18c <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xc0>)
 800f128:	f000 fa82 	bl	800f630 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f12c:	4603      	mov	r3, r0
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	6811      	ldr	r1, [r2, #0]
 800f132:	6019      	str	r1, [r3, #0]
 800f134:	8891      	ldrh	r1, [r2, #4]
 800f136:	7992      	ldrb	r2, [r2, #6]
 800f138:	8099      	strh	r1, [r3, #4]
 800f13a:	719a      	strb	r2, [r3, #6]
	instances[pin.gpio_pin].action = action;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	889b      	ldrh	r3, [r3, #4]
 800f140:	827b      	strh	r3, [r7, #18]
 800f142:	f107 0312 	add.w	r3, r7, #18
 800f146:	4619      	mov	r1, r3
 800f148:	480e      	ldr	r0, [pc, #56]	; (800f184 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xb8>)
 800f14a:	f000 facd 	bl	800f6e8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt>
 800f14e:	4603      	mov	r3, r0
 800f150:	3304      	adds	r3, #4
 800f152:	6839      	ldr	r1, [r7, #0]
 800f154:	4618      	mov	r0, r3
 800f156:	f000 fb27 	bl	800f7a8 <_ZNSt8functionIFvvEEaSERKS1_>

	return id;
 800f15a:	f107 0209 	add.w	r2, r7, #9
 800f15e:	f107 0314 	add.w	r3, r7, #20
 800f162:	4611      	mov	r1, r2
 800f164:	4618      	mov	r0, r3
 800f166:	f000 fb3a 	bl	800f7de <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 800f16a:	8abb      	ldrh	r3, [r7, #20]
 800f16c:	81bb      	strh	r3, [r7, #12]
}
 800f16e:	2300      	movs	r3, #0
 800f170:	7b3a      	ldrb	r2, [r7, #12]
 800f172:	f362 0307 	bfi	r3, r2, #0, #8
 800f176:	7b7a      	ldrb	r2, [r7, #13]
 800f178:	f362 230f 	bfi	r3, r2, #8, #8
 800f17c:	4618      	mov	r0, r3
 800f17e:	371c      	adds	r7, #28
 800f180:	46bd      	mov	sp, r7
 800f182:	bd90      	pop	{r4, r7, pc}
 800f184:	240011a4 	.word	0x240011a4
 800f188:	24000f90 	.word	0x24000f90
 800f18c:	24000f94 	.word	0x24000f94

0800f190 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	801a      	strh	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f000 fb76 	bl	800f8a0 <_ZNSt8functionIFvvEEC1ERKS1_>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	7d1a      	ldrb	r2, [r3, #20]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	751a      	strb	r2, [r3, #20]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <_ZN17ExternalInterrupt8InstanceD1Ev>:
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f2 fa3f 	bl	8001656 <_ZNSt8functionIFvvEED1Ev>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
	explicit constexpr pair(const pair<_U1, _U2>& __p)
	: first(__p.first), second(__p.second) { }
#endif

#if __cplusplus >= 201103L
      constexpr pair(const pair&) = default;	///< Copy constructor
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b082      	sub	sp, #8
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
 800f1ea:	6039      	str	r1, [r7, #0]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	881a      	ldrh	r2, [r3, #0]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	801a      	strh	r2, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	1d1a      	adds	r2, r3, #4
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4610      	mov	r0, r2
 800f200:	f7ff ffc6 	bl	800f190 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4618      	mov	r0, r3
 800f208:	3708      	adds	r7, #8
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 800f20e:	b580      	push	{r7, lr}
 800f210:	b082      	sub	sp, #8
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	3304      	adds	r3, #4
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7ff ffd3 	bl	800f1c6 <_ZN17ExternalInterrupt8InstanceD1Ev>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	4618      	mov	r0, r3
 800f224:	3708      	adds	r7, #8
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
	...

0800f22c <_ZN17ExternalInterrupt5startEv>:

void ExternalInterrupt::start() {
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b08c      	sub	sp, #48	; 0x30
 800f230:	af00      	add	r7, sp, #0
	for(auto id_instance : instances) {
 800f232:	4b23      	ldr	r3, [pc, #140]	; (800f2c0 <_ZN17ExternalInterrupt5startEv+0x94>)
 800f234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f236:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f238:	f000 fae5 	bl	800f806 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE5beginEv>
 800f23c:	4603      	mov	r3, r0
 800f23e:	60bb      	str	r3, [r7, #8]
 800f240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f242:	f000 faed 	bl	800f820 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 800f246:	4603      	mov	r3, r0
 800f248:	607b      	str	r3, [r7, #4]
 800f24a:	1d3a      	adds	r2, r7, #4
 800f24c:	f107 0308 	add.w	r3, r7, #8
 800f250:	4611      	mov	r1, r2
 800f252:	4618      	mov	r0, r3
 800f254:	f000 faf1 	bl	800f83a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800f258:	4603      	mov	r3, r0
 800f25a:	f083 0301 	eor.w	r3, r3, #1
 800f25e:	b2db      	uxtb	r3, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d028      	beq.n	800f2b6 <_ZN17ExternalInterrupt5startEv+0x8a>
 800f264:	f107 0308 	add.w	r3, r7, #8
 800f268:	4618      	mov	r0, r3
 800f26a:	f000 fb0b 	bl	800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 800f26e:	4602      	mov	r2, r0
 800f270:	f107 030c 	add.w	r3, r7, #12
 800f274:	4611      	mov	r1, r2
 800f276:	4618      	mov	r0, r3
 800f278:	f7ff ffb3 	bl	800f1e2 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
		Instance& instance = id_instance.second;
 800f27c:	f107 030c 	add.w	r3, r7, #12
 800f280:	3304      	adds	r3, #4
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
		  HAL_NVIC_SetPriority(instance.interrupt_request_number, 0, 0);
 800f284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f28a:	2200      	movs	r2, #0
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f7f6 f841 	bl	8005316 <HAL_NVIC_SetPriority>
		  HAL_NVIC_EnableIRQ(instance.interrupt_request_number);
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7f6 f855 	bl	800534a <HAL_NVIC_EnableIRQ>
	for(auto id_instance : instances) {
 800f2a0:	f107 030c 	add.w	r3, r7, #12
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7ff ffb2 	bl	800f20e <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
 800f2aa:	f107 0308 	add.w	r3, r7, #8
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 fad7 	bl	800f862 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 800f2b4:	e7c9      	b.n	800f24a <_ZN17ExternalInterrupt5startEv+0x1e>
	}
}
 800f2b6:	bf00      	nop
 800f2b8:	3730      	adds	r7, #48	; 0x30
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	240011a4 	.word	0x240011a4

0800f2c4 <_ZN17ExternalInterrupt7turn_onEh>:

void ExternalInterrupt::turn_on(uint8_t id) {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	71fb      	strb	r3, [r7, #7]
	if (not service_ids.contains(id)) {
 800f2ce:	1dfb      	adds	r3, r7, #7
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	4810      	ldr	r0, [pc, #64]	; (800f314 <_ZN17ExternalInterrupt7turn_onEh+0x50>)
 800f2d4:	f000 fb06 	bl	800f8e4 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	f083 0301 	eor.w	r3, r3, #1
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d112      	bne.n	800f30a <_ZN17ExternalInterrupt7turn_onEh+0x46>
		return; //TODO: error handler
	}

	Instance& instance = instances[service_ids[id].gpio_pin];
 800f2e4:	1dfb      	adds	r3, r7, #7
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	480a      	ldr	r0, [pc, #40]	; (800f314 <_ZN17ExternalInterrupt7turn_onEh+0x50>)
 800f2ea:	f000 f9a1 	bl	800f630 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	889b      	ldrh	r3, [r3, #4]
 800f2f2:	817b      	strh	r3, [r7, #10]
 800f2f4:	f107 030a 	add.w	r3, r7, #10
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4807      	ldr	r0, [pc, #28]	; (800f318 <_ZN17ExternalInterrupt7turn_onEh+0x54>)
 800f2fc:	f000 f9f4 	bl	800f6e8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt>
 800f300:	60f8      	str	r0, [r7, #12]
	instance.is_on = true;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2201      	movs	r2, #1
 800f306:	751a      	strb	r2, [r3, #20]
 800f308:	e000      	b.n	800f30c <_ZN17ExternalInterrupt7turn_onEh+0x48>
		return; //TODO: error handler
 800f30a:	bf00      	nop
}
 800f30c:	3710      	adds	r7, #16
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	24000f94 	.word	0x24000f94
 800f318:	240011a4 	.word	0x240011a4

0800f31c <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7f2 f973 	bl	8001614 <_ZNSt14_Function_baseC1Ev>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 faf1 	bl	800f928 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  @param  __al  An allocator object.
       *
       *  Create a %forward_list consisting of copies of the elements
       *  in the initializer_list @a __il.  This is linear in __il.size().
       */
      forward_list(std::initializer_list<_Tp> __il,
 800f366:	b590      	push	{r4, r7, lr}
 800f368:	b087      	sub	sp, #28
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	60f8      	str	r0, [r7, #12]
 800f36e:	1d38      	adds	r0, r7, #4
 800f370:	e880 0006 	stmia.w	r0, {r1, r2}
 800f374:	603b      	str	r3, [r7, #0]
		   const _Alloc& __al = _Alloc())
      : _Base(_Node_alloc_type(__al))
 800f376:	68fc      	ldr	r4, [r7, #12]
 800f378:	f107 0314 	add.w	r3, r7, #20
 800f37c:	6839      	ldr	r1, [r7, #0]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 fadd 	bl	800f93e <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>
 800f384:	f107 0314 	add.w	r3, r7, #20
 800f388:	4619      	mov	r1, r3
 800f38a:	4620      	mov	r0, r4
 800f38c:	f000 fafb 	bl	800f986 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>
 800f390:	f107 0314 	add.w	r3, r7, #20
 800f394:	4618      	mov	r0, r3
 800f396:	f000 fadf 	bl	800f958 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
      { _M_range_initialize(__il.begin(), __il.end()); }
 800f39a:	1d3b      	adds	r3, r7, #4
 800f39c:	4618      	mov	r0, r3
 800f39e:	f000 fb18 	bl	800f9d2 <_ZNKSt16initializer_listIhE5beginEv>
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	1d3b      	adds	r3, r7, #4
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 fb1f 	bl	800f9ea <_ZNKSt16initializer_listIhE3endEv>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	68f8      	ldr	r0, [r7, #12]
 800f3b4:	f000 fb2a 	bl	800fa0c <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd90      	pop	{r4, r7, pc}

0800f3c2 <_ZNSt12forward_listIhSaIhEED1Ev>:

      /**
       *  @brief  The forward_list dtor.
       */
      ~forward_list() noexcept
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
      { }
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f000 faed 	bl	800f9ac <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3708      	adds	r7, #8
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd80      	pop	{r7, pc}

0800f3dc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fb30 	bl	800fa4a <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 fb38 	bl	800fa62 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff fdce 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4618      	mov	r0, r3
 800f400:	3708      	adds	r7, #8
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}

0800f406 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>:
 800f406:	b480      	push	{r7}
 800f408:	b083      	sub	sp, #12
 800f40a:	af00      	add	r7, sp, #0
 800f40c:	6078      	str	r0, [r7, #4]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fb46 	bl	800fab6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 800f42a:	4603      	mov	r3, r0
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fb22 	bl	800fa78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff fde4 	bl	800f004 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4618      	mov	r0, r3
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
	...

0800f448 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 800f448:	b590      	push	{r4, r7, lr}
 800f44a:	b08b      	sub	sp, #44	; 0x2c
 800f44c:	af02      	add	r7, sp, #8
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fb3a 	bl	800face <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 800f45a:	4603      	mov	r3, r0
 800f45c:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f000 f9de 	bl	800f820 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 800f464:	4603      	mov	r3, r0
 800f466:	60fb      	str	r3, [r7, #12]
 800f468:	f107 020c 	add.w	r2, r7, #12
 800f46c:	f107 0308 	add.w	r3, r7, #8
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f000 f9e1 	bl	800f83a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d112      	bne.n	800f4a4 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f000 fb34 	bl	800faec <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 800f484:	f107 0308 	add.w	r3, r7, #8
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 f9fb 	bl	800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 800f48e:	4603      	mov	r3, r0
 800f490:	461a      	mov	r2, r3
 800f492:	f107 0310 	add.w	r3, r7, #16
 800f496:	6839      	ldr	r1, [r7, #0]
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 fb34 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d001      	beq.n	800f4a8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e000      	b.n	800f4aa <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d01b      	beq.n	800f4e6 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f4ae:	687c      	ldr	r4, [r7, #4]
 800f4b0:	f107 0208 	add.w	r2, r7, #8
 800f4b4:	f107 0314 	add.w	r3, r7, #20
 800f4b8:	4611      	mov	r1, r2
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fb47 	bl	800fb4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 800f4c0:	f107 0318 	add.w	r3, r7, #24
 800f4c4:	6839      	ldr	r1, [r7, #0]
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 fb32 	bl	800fb30 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f4cc:	f107 0218 	add.w	r2, r7, #24
 800f4d0:	f107 031c 	add.w	r3, r7, #28
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	4a08      	ldr	r2, [pc, #32]	; (800f4fc <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 800f4da:	6979      	ldr	r1, [r7, #20]
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f000 fb46 	bl	800fb6e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 800f4e6:	f107 0308 	add.w	r3, r7, #8
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f000 f9ca 	bl	800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	3304      	adds	r3, #4
      }
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3724      	adds	r7, #36	; 0x24
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd90      	pop	{r4, r7, pc}
 800f4fc:	08019ff0 	.word	0x08019ff0

0800f500 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff fd69 	bl	800efe2 <_ZNKSt14_Function_base8_M_emptyEv>
 800f510:	4603      	mov	r3, r0
 800f512:	2b00      	cmp	r3, #0
 800f514:	d001      	beq.n	800f51a <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800f516:	f00a f8cd 	bl	80196b4 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	68db      	ldr	r3, [r3, #12]
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4610      	mov	r0, r2
 800f522:	4798      	blx	r3
 800f524:	bf00      	nop
    }
 800f526:	3708      	adds	r7, #8
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8containsERS5_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6839      	ldr	r1, [r7, #0]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f000 fb55 	bl	800fbea <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_>
 800f540:	4603      	mov	r3, r0
 800f542:	60bb      	str	r3, [r7, #8]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	4618      	mov	r0, r3
 800f548:	f000 fb8b 	bl	800fc62 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800f54c:	4603      	mov	r3, r0
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	f107 020c 	add.w	r2, r7, #12
 800f554:	f107 0308 	add.w	r3, r7, #8
 800f558:	4611      	mov	r1, r2
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fb92 	bl	800fc84 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800f560:	4603      	mov	r3, r0
 800f562:	f083 0301 	eor.w	r3, r3, #1
 800f566:	b2db      	uxtb	r3, r3
 800f568:	4618      	mov	r0, r3
 800f56a:	3710      	adds	r7, #16
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4618      	mov	r0, r3
 800f57c:	370c      	adds	r7, #12
 800f57e:	46bd      	mov	sp, r7
 800f580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f584:	4770      	bx	lr

0800f586 <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff ffed 	bl	800f570 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2200      	movs	r2, #0
 800f59a:	705a      	strb	r2, [r3, #1]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3708      	adds	r7, #8
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b082      	sub	sp, #8
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7ff ffe8 	bl	800f586 <_ZNSt22_Optional_payload_baseIhEC1Ev>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7ff ffeb 	bl	800f5a6 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <_ZNSt8optionalIhEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b082      	sub	sp, #8
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
 800f5e2:	7039      	strb	r1, [r7, #0]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff ffea 	bl	800f5c0 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <_ZNSt12forward_listIhSaIhEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %forward_list.
       */
      reference
      front()
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b084      	sub	sp, #16
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
      {
	_Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	60fb      	str	r3, [r7, #12]
	return *__front->_M_valptr();
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f000 fb51 	bl	800fcac <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 800f60a:	4603      	mov	r3, r0
      }
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front()
 800f614:	b580      	push	{r7, lr}
 800f616:	b082      	sub	sp, #8
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
      { this->_M_erase_after(&this->_M_impl._M_head); }
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	687a      	ldr	r2, [r7, #4]
 800f620:	4611      	mov	r1, r2
 800f622:	4618      	mov	r0, r3
 800f624:	f000 fb50 	bl	800fcc8 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>
 800f628:	bf00      	nop
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b08b      	sub	sp, #44	; 0x2c
 800f634:	af02      	add	r7, sp, #8
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 fb65 	bl	800fd0c <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 800f642:	4603      	mov	r3, r0
 800f644:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fb6f 	bl	800fd2a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	60fb      	str	r3, [r7, #12]
 800f650:	f107 020c 	add.w	r2, r7, #12
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	4611      	mov	r1, r2
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 fb72 	bl	800fd44 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d112      	bne.n	800f68c <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fb80 	bl	800fd6c <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 800f66c:	f107 0308 	add.w	r3, r7, #8
 800f670:	4618      	mov	r0, r3
 800f672:	f000 fb88 	bl	800fd86 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 800f676:	4603      	mov	r3, r0
 800f678:	461a      	mov	r2, r3
 800f67a:	f107 0310 	add.w	r3, r7, #16
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	4618      	mov	r0, r3
 800f682:	f000 fb8e 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 800f68c:	2301      	movs	r3, #1
 800f68e:	e000      	b.n	800f692 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 800f690:	2300      	movs	r3, #0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01b      	beq.n	800f6ce <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f696:	687c      	ldr	r4, [r7, #4]
 800f698:	f107 0208 	add.w	r2, r7, #8
 800f69c:	f107 0314 	add.w	r3, r7, #20
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fba1 	bl	800fdea <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 800f6a8:	f107 0318 	add.w	r3, r7, #24
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 fb8c 	bl	800fdcc <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f6b4:	f107 0218 	add.w	r2, r7, #24
 800f6b8:	f107 031c 	add.w	r3, r7, #28
 800f6bc:	9300      	str	r3, [sp, #0]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	4a08      	ldr	r2, [pc, #32]	; (800f6e4 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 800f6c2:	6979      	ldr	r1, [r7, #20]
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	f000 fba0 	bl	800fe0a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800f6ce:	f107 0308 	add.w	r3, r7, #8
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f000 fb57 	bl	800fd86 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	3304      	adds	r3, #4
      }
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3724      	adds	r7, #36	; 0x24
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd90      	pop	{r4, r7, pc}
 800f6e4:	08019ff0 	.word	0x08019ff0

0800f6e8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt>:
      operator[](key_type&& __k)
 800f6e8:	b590      	push	{r4, r7, lr}
 800f6ea:	b08b      	sub	sp, #44	; 0x2c
 800f6ec:	af02      	add	r7, sp, #8
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 f9ea 	bl	800face <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f88e 	bl	800f820 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 800f704:	4603      	mov	r3, r0
 800f706:	60fb      	str	r3, [r7, #12]
 800f708:	f107 020c 	add.w	r2, r7, #12
 800f70c:	f107 0308 	add.w	r3, r7, #8
 800f710:	4611      	mov	r1, r2
 800f712:	4618      	mov	r0, r3
 800f714:	f000 f891 	bl	800f83a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d112      	bne.n	800f744 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x5c>
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 f9e4 	bl	800faec <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 800f724:	f107 0308 	add.w	r3, r7, #8
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f8ab 	bl	800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	f107 0310 	add.w	r3, r7, #16
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 f9e4 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d001      	beq.n	800f748 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x60>
 800f744:	2301      	movs	r3, #1
 800f746:	e000      	b.n	800f74a <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x62>
 800f748:	2300      	movs	r3, #0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d01f      	beq.n	800f78e <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f74e:	687c      	ldr	r4, [r7, #4]
 800f750:	f107 0208 	add.w	r2, r7, #8
 800f754:	f107 0314 	add.w	r3, r7, #20
 800f758:	4611      	mov	r1, r2
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 f9f7 	bl	800fb4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					std::forward_as_tuple(std::move(__k)),
 800f760:	6838      	ldr	r0, [r7, #0]
 800f762:	f000 fb90 	bl	800fe86 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 800f766:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f768:	f107 0318 	add.w	r3, r7, #24
 800f76c:	4611      	mov	r1, r2
 800f76e:	4618      	mov	r0, r3
 800f770:	f000 fb94 	bl	800fe9c <_ZSt16forward_as_tupleIJtEESt5tupleIJDpOT_EES3_>
 800f774:	f107 0218 	add.w	r2, r7, #24
 800f778:	f107 031c 	add.w	r3, r7, #28
 800f77c:	9300      	str	r3, [sp, #0]
 800f77e:	4613      	mov	r3, r2
 800f780:	4a08      	ldr	r2, [pc, #32]	; (800f7a4 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0xbc>)
 800f782:	6979      	ldr	r1, [r7, #20]
 800f784:	4620      	mov	r0, r4
 800f786:	f000 fb9a 	bl	800febe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 800f78a:	4603      	mov	r3, r0
 800f78c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800f78e:	f107 0308 	add.w	r3, r7, #8
 800f792:	4618      	mov	r0, r3
 800f794:	f000 f876 	bl	800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 800f798:	4603      	mov	r3, r0
 800f79a:	3304      	adds	r3, #4
      }
 800f79c:	4618      	mov	r0, r3
 800f79e:	3724      	adds	r7, #36	; 0x24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd90      	pop	{r4, r7, pc}
 800f7a4:	08019ff0 	.word	0x08019ff0

0800f7a8 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800f7b2:	f107 0308 	add.w	r3, r7, #8
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 f871 	bl	800f8a0 <_ZNSt8functionIFvvEEC1ERKS1_>
 800f7be:	f107 0308 	add.w	r3, r7, #8
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f000 fbb8 	bl	800ff3a <_ZNSt8functionIFvvEE4swapERS1_>
 800f7ca:	f107 0308 	add.w	r3, r7, #8
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7f1 ff41 	bl	8001656 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800f7d4:	687b      	ldr	r3, [r7, #4]
      }
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3718      	adds	r7, #24
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}

0800f7de <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
	optional(_Up&& __t)
 800f7de:	b5b0      	push	{r4, r5, r7, lr}
 800f7e0:	b082      	sub	sp, #8
 800f7e2:	af00      	add	r7, sp, #0
 800f7e4:	6078      	str	r0, [r7, #4]
 800f7e6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800f7e8:	687c      	ldr	r4, [r7, #4]
 800f7ea:	6838      	ldr	r0, [r7, #0]
 800f7ec:	f000 fbc6 	bl	800ff7c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	4620      	mov	r0, r4
 800f7f8:	f000 fbdc 	bl	800ffb4 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bdb0      	pop	{r4, r5, r7, pc}

0800f806 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f806:	b580      	push	{r7, lr}
 800f808:	b082      	sub	sp, #8
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4618      	mov	r0, r3
 800f812:	f000 fbe4 	bl	800ffde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 800f816:	4603      	mov	r3, r0
 800f818:	4618      	mov	r0, r3
 800f81a:	3708      	adds	r7, #8
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 fbe8 	bl	8010000 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800f830:	4603      	mov	r3, r0
 800f832:	4618      	mov	r0, r3
 800f834:	3708      	adds	r7, #8
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800f83a:	b480      	push	{r7}
 800f83c:	b083      	sub	sp, #12
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	bf0c      	ite	eq
 800f850:	2301      	moveq	r3, #1
 800f852:	2300      	movne	r3, #0
 800f854:	b2db      	uxtb	r3, r3
 800f856:	4618      	mov	r0, r3
 800f858:	370c      	adds	r7, #12
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4618      	mov	r0, r3
 800f870:	f009 febb 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800f874:	4602      	mov	r2, r0
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	601a      	str	r2, [r3, #0]
	return *this;
 800f87a:	687b      	ldr	r3, [r7, #4]
      }
 800f87c:	4618      	mov	r0, r3
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f000 fbc6 	bl	8010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 800f896:	4603      	mov	r3, r0
 800f898:	4618      	mov	r0, r3
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f7f1 feb1 	bl	8001614 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800f8b2:	6838      	ldr	r0, [r7, #0]
 800f8b4:	f000 fbc3 	bl	801003e <_ZNKSt8functionIFvvEEcvbEv>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00d      	beq.n	800f8da <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	2202      	movs	r2, #2
 800f8c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	68da      	ldr	r2, [r3, #12]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	609a      	str	r2, [r3, #8]
    }
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3708      	adds	r7, #8
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>:
      contains(const key_type& __x) const
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6839      	ldr	r1, [r7, #0]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 fbb3 	bl	801005e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	60bb      	str	r3, [r7, #8]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4618      	mov	r0, r3
 800f900:	f000 fbe9 	bl	80100d6 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 800f904:	4603      	mov	r3, r0
 800f906:	60fb      	str	r3, [r7, #12]
 800f908:	f107 020c 	add.w	r2, r7, #12
 800f90c:	f107 0308 	add.w	r3, r7, #8
 800f910:	4611      	mov	r1, r2
 800f912:	4618      	mov	r0, r3
 800f914:	f000 fbf0 	bl	80100f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 800f918:	4603      	mov	r3, r0
 800f91a:	f083 0301 	eor.w	r3, r3, #1
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4618      	mov	r0, r3
 800f934:	370c      	adds	r7, #12
 800f936:	46bd      	mov	sp, r7
 800f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93c:	4770      	bx	lr

0800f93e <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800f93e:	b580      	push	{r7, lr}
 800f940:	b082      	sub	sp, #8
 800f942:	af00      	add	r7, sp, #0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	6039      	str	r1, [r7, #0]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fbe9 	bl	8010120 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	4618      	mov	r0, r3
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f958:	b480      	push	{r7}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4618      	mov	r0, r3
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>:
      struct _Fwd_list_impl
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f7ff ffee 	bl	800f958 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4618      	mov	r0, r3
 800f980:	3708      	adds	r7, #8
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}

0800f986 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>:
      _Fwd_list_base(_Node_alloc_type&& __a)
 800f986:	b590      	push	{r4, r7, lr}
 800f988:	b083      	sub	sp, #12
 800f98a:	af00      	add	r7, sp, #0
 800f98c:	6078      	str	r0, [r7, #4]
 800f98e:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a)) { }
 800f990:	687c      	ldr	r4, [r7, #4]
 800f992:	6838      	ldr	r0, [r7, #0]
 800f994:	f000 fbcf 	bl	8010136 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800f998:	4603      	mov	r3, r0
 800f99a:	4619      	mov	r1, r3
 800f99c:	4620      	mov	r0, r4
 800f99e:	f000 fbe3 	bl	8010168 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd90      	pop	{r4, r7, pc}

0800f9ac <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>:
      ~_Fwd_list_base()
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
      { _M_erase_after(&_M_impl._M_head, nullptr); }
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 fbed 	bl	801019a <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7ff ffd3 	bl	800f96e <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZNKSt16initializer_listIhE5beginEv>:
      begin() const noexcept { return _M_array; }
 800f9d2:	b480      	push	{r7}
 800f9d4:	b083      	sub	sp, #12
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	6078      	str	r0, [r7, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	370c      	adds	r7, #12
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <_ZNKSt16initializer_listIhE3endEv>:
      end() const noexcept { return begin() + size(); }
 800f9ea:	b590      	push	{r4, r7, lr}
 800f9ec:	b083      	sub	sp, #12
 800f9ee:	af00      	add	r7, sp, #0
 800f9f0:	6078      	str	r0, [r7, #4]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f7ff ffed 	bl	800f9d2 <_ZNKSt16initializer_listIhE5beginEv>
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fbf8 	bl	80101f0 <_ZNKSt16initializer_listIhE4sizeEv>
 800fa00:	4603      	mov	r3, r0
 800fa02:	4423      	add	r3, r4
 800fa04:	4618      	mov	r0, r3
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd90      	pop	{r4, r7, pc}

0800fa0c <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>:

  // Called by the range constructor to implement [23.3.4.2]/9
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      forward_list<_Tp, _Alloc>::
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b086      	sub	sp, #24
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	60b9      	str	r1, [r7, #8]
 800fa16:	607a      	str	r2, [r7, #4]
      _M_range_initialize(_InputIterator __first, _InputIterator __last)
      {
	_Node_base* __to = &this->_M_impl._M_head;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 800fa1c:	68ba      	ldr	r2, [r7, #8]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d00e      	beq.n	800fa42 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x36>
	  {
	    __to->_M_next = this->_M_create_node(*__first);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	68b9      	ldr	r1, [r7, #8]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f000 fbfa 	bl	8010222 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	601a      	str	r2, [r3, #0]
	    __to = __to->_M_next;
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	60bb      	str	r3, [r7, #8]
 800fa40:	e7ec      	b.n	800fa1c <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x10>
	  }
      }
 800fa42:	bf00      	nop
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b082      	sub	sp, #8
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f000 fc0d 	bl	8010272 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3708      	adds	r7, #8
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}

0800fa62 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
      { }
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	370c      	adds	r7, #12
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b084      	sub	sp, #16
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d012      	beq.n	800faae <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800fa88:	6838      	ldr	r0, [r7, #0]
 800fa8a:	f000 fbfd 	bl	8010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	4619      	mov	r1, r3
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff fff0 	bl	800fa78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800fa98:	6838      	ldr	r0, [r7, #0]
 800fa9a:	f000 fc01 	bl	80102a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800fa9e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800faa0:	6839      	ldr	r1, [r7, #0]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	f000 fc08 	bl	80102b8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800faac:	e7e9      	b.n	800fa82 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 800faae:	bf00      	nop
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800fab6:	b480      	push	{r7}
 800fab8:	b083      	sub	sp, #12
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	4618      	mov	r0, r3
 800fac4:	370c      	adds	r7, #12
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr

0800face <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800face:	b580      	push	{r7, lr}
 800fad0:	b082      	sub	sp, #8
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	4618      	mov	r0, r3
 800fade:	f000 fbfc 	bl	80102da <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 800fae2:	4603      	mov	r3, r0
 800fae4:	4618      	mov	r0, r3
 800fae6:	3708      	adds	r7, #8
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 800faec:	b590      	push	{r4, r7, lr}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f000 fc06 	bl	8010308 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 800fafc:	bf00      	nop
 800fafe:	4620      	mov	r0, r4
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd90      	pop	{r4, r7, pc}

0800fb06 <_ZNKSt4lessItEclERKtS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800fb06:	b480      	push	{r7}
 800fb08:	b085      	sub	sp, #20
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	60f8      	str	r0, [r7, #12]
 800fb0e:	60b9      	str	r1, [r7, #8]
 800fb10:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	881a      	ldrh	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	bf34      	ite	cc
 800fb1e:	2301      	movcc	r3, #1
 800fb20:	2300      	movcs	r3, #0
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	4618      	mov	r0, r3
 800fb26:	3714      	adds	r7, #20
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6839      	ldr	r1, [r7, #0]
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f000 fbed 	bl	801031e <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	4618      	mov	r0, r3
 800fb48:	3708      	adds	r7, #8
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800fb4e:	b480      	push	{r7}
 800fb50:	b083      	sub	sp, #12
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
 800fb56:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	681a      	ldr	r2, [r3, #0]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	601a      	str	r2, [r3, #0]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4618      	mov	r0, r3
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fb6e:	b5b0      	push	{r4, r5, r7, lr}
 800fb70:	b088      	sub	sp, #32
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	60f8      	str	r0, [r7, #12]
 800fb76:	60b9      	str	r1, [r7, #8]
 800fb78:	607a      	str	r2, [r7, #4]
 800fb7a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fbdd 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800fb82:	4604      	mov	r4, r0
 800fb84:	6838      	ldr	r0, [r7, #0]
 800fb86:	f000 fbe4 	bl	8010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fb8a:	4605      	mov	r5, r0
 800fb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb8e:	f000 fbeb 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800fb92:	4603      	mov	r3, r0
 800fb94:	462a      	mov	r2, r5
 800fb96:	4621      	mov	r1, r4
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f000 fbf0 	bl	801037e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 800fb9e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800fba0:	69f8      	ldr	r0, [r7, #28]
 800fba2:	f000 fd32 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800fba6:	4603      	mov	r3, r0
 800fba8:	f107 0010 	add.w	r0, r7, #16
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	68f9      	ldr	r1, [r7, #12]
 800fbb0:	f000 fc08 	bl	80103c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>

	    if (__res.second)
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d007      	beq.n	800fbca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800fbba:	6939      	ldr	r1, [r7, #16]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f000 fd35 	bl	8010630 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	e00b      	b.n	800fbe2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>

	    _M_drop_node(__z);
 800fbca:	69f9      	ldr	r1, [r7, #28]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f000 fd6c 	bl	80106aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 800fbd2:	693a      	ldr	r2, [r7, #16]
 800fbd4:	f107 0318 	add.w	r3, r7, #24
 800fbd8:	4611      	mov	r1, r2
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f000 fd76 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800fbe0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3720      	adds	r7, #32
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bdb0      	pop	{r4, r5, r7, pc}

0800fbea <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fbea:	b590      	push	{r4, r7, lr}
 800fbec:	b085      	sub	sp, #20
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f000 fd78 	bl	80106ea <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fd80 	bl	8010702 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 800fc02:	4602      	mov	r2, r0
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	4621      	mov	r1, r4
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fd86 	bl	801071a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f825 	bl	800fc62 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	60fb      	str	r3, [r7, #12]
 800fc1c:	f107 020c 	add.w	r2, r7, #12
 800fc20:	f107 0308 	add.w	r3, r7, #8
 800fc24:	4611      	mov	r1, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f000 f82c 	bl	800fc84 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 800fc2c:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10d      	bne.n	800fc4e <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 800fc32:	687c      	ldr	r4, [r7, #4]
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	4618      	mov	r0, r3
 800fc38:	f000 fda0 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	461a      	mov	r2, r3
 800fc40:	6839      	ldr	r1, [r7, #0]
 800fc42:	4620      	mov	r0, r4
 800fc44:	f7ff ff5f 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d004      	beq.n	800fc58 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f807 	bl	800fc62 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800fc54:	4603      	mov	r3, r0
 800fc56:	e000      	b.n	800fc5a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x70>
 800fc58:	68bb      	ldr	r3, [r7, #8]
    }
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	3714      	adds	r7, #20
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}

0800fc62 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b084      	sub	sp, #16
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	1d1a      	adds	r2, r3, #4
 800fc6e:	f107 030c 	add.w	r3, r7, #12
 800fc72:	4611      	mov	r1, r2
 800fc74:	4618      	mov	r0, r3
 800fc76:	f000 fd8d 	bl	8010794 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	bf0c      	ite	eq
 800fc9a:	2301      	moveq	r3, #1
 800fc9c:	2300      	movne	r3, #0
 800fc9e:	b2db      	uxtb	r3, r3
 800fca0:	4618      	mov	r0, r3
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>:
      _M_valptr() noexcept
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f000 fd7a 	bl	80107b2 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>:
    _Fwd_list_base<_Tp, _Alloc>::
 800fcc8:	b590      	push	{r4, r7, lr}
 800fcca:	b085      	sub	sp, #20
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	60fb      	str	r3, [r7, #12]
      __pos->_M_next = __curr->_M_next;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	601a      	str	r2, [r3, #0]
      _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 fd72 	bl	80107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 800fce6:	4604      	mov	r4, r0
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f7ff ffdf 	bl	800fcac <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	f000 fd74 	bl	80107e0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
      _M_put_node(__curr);
 800fcf8:	68f9      	ldr	r1, [r7, #12]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fd88 	bl	8010810 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      return __pos->_M_next;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	681b      	ldr	r3, [r3, #0]
    }
 800fd04:	4618      	mov	r0, r3
 800fd06:	3714      	adds	r7, #20
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd90      	pop	{r4, r7, pc}

0800fd0c <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6839      	ldr	r1, [r7, #0]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f000 fd8e 	bl	801083c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 800fd20:	4603      	mov	r3, r0
 800fd22:	4618      	mov	r0, r3
 800fd24:	3708      	adds	r7, #8
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}

0800fd2a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800fd2a:	b580      	push	{r7, lr}
 800fd2c:	b082      	sub	sp, #8
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f000 fd98 	bl	801086a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681a      	ldr	r2, [r3, #0]
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	bf0c      	ite	eq
 800fd5a:	2301      	moveq	r3, #1
 800fd5c:	2300      	movne	r3, #0
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	4618      	mov	r0, r3
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 800fd6c:	b590      	push	{r4, r7, lr}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f000 fd88 	bl	801088c <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 800fd7c:	bf00      	nop
 800fd7e:	4620      	mov	r0, r4
 800fd80:	370c      	adds	r7, #12
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd90      	pop	{r4, r7, pc}

0800fd86 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fd86:	b580      	push	{r7, lr}
 800fd88:	b082      	sub	sp, #8
 800fd8a:	af00      	add	r7, sp, #0
 800fd8c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4618      	mov	r0, r3
 800fd94:	f000 fd85 	bl	80108a2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3708      	adds	r7, #8
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <_ZNKSt4lessIhEclERKhS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800fda2:	b480      	push	{r7}
 800fda4:	b085      	sub	sp, #20
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	60f8      	str	r0, [r7, #12]
 800fdaa:	60b9      	str	r1, [r7, #8]
 800fdac:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	bf34      	ite	cc
 800fdba:	2301      	movcc	r3, #1
 800fdbc:	2300      	movcs	r3, #0
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3714      	adds	r7, #20
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	4618      	mov	r0, r3
 800fddc:	f000 fd6f 	bl	80108be <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4618      	mov	r0, r3
 800fde4:	3708      	adds	r7, #8
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800fdea:	b480      	push	{r7}
 800fdec:	b083      	sub	sp, #12
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	601a      	str	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4618      	mov	r0, r3
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr

0800fe0a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fe0a:	b5b0      	push	{r4, r5, r7, lr}
 800fe0c:	b088      	sub	sp, #32
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	60f8      	str	r0, [r7, #12]
 800fe12:	60b9      	str	r1, [r7, #8]
 800fe14:	607a      	str	r2, [r7, #4]
 800fe16:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 fa8f 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800fe1e:	4604      	mov	r4, r0
 800fe20:	6838      	ldr	r0, [r7, #0]
 800fe22:	f000 fd5b 	bl	80108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800fe26:	4605      	mov	r5, r0
 800fe28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe2a:	f000 fa9d 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	462a      	mov	r2, r5
 800fe32:	4621      	mov	r1, r4
 800fe34:	68f8      	ldr	r0, [r7, #12]
 800fe36:	f000 fd5c 	bl	80108f2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800fe3a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800fe3c:	69f8      	ldr	r0, [r7, #28]
 800fe3e:	f000 fe9e 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f107 0010 	add.w	r0, r7, #16
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	68f9      	ldr	r1, [r7, #12]
 800fe4c:	f000 fd74 	bl	8010938 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d007      	beq.n	800fe66 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800fe56:	6939      	ldr	r1, [r7, #16]
 800fe58:	697a      	ldr	r2, [r7, #20]
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f000 fea1 	bl	8010ba4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 800fe62:	4603      	mov	r3, r0
 800fe64:	e00b      	b.n	800fe7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 800fe66:	69f9      	ldr	r1, [r7, #28]
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f000 fa25 	bl	80102b8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 800fe6e:	693a      	ldr	r2, [r7, #16]
 800fe70:	f107 0318 	add.w	r3, r7, #24
 800fe74:	4611      	mov	r1, r2
 800fe76:	4618      	mov	r0, r3
 800fe78:	f000 fed1 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 800fe7c:	69bb      	ldr	r3, [r7, #24]
      }
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3720      	adds	r7, #32
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bdb0      	pop	{r4, r5, r7, pc}

0800fe86 <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 800fe86:	b480      	push	{r7}
 800fe88:	b083      	sub	sp, #12
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	370c      	adds	r7, #12
 800fe94:	46bd      	mov	sp, r7
 800fe96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9a:	4770      	bx	lr

0800fe9c <_ZSt16forward_as_tupleIJtEESt5tupleIJDpOT_EES3_>:
  // _GLIBCXX_RESOLVE_LIB_DEFECTS
  // 2275. Why is forward_as_tuple not constexpr?
  /// std::forward_as_tuple
  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 800fea6:	6838      	ldr	r0, [r7, #0]
 800fea8:	f000 fec8 	bl	8010c3c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800feac:	4603      	mov	r3, r0
 800feae:	4619      	mov	r1, r3
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fece 	bl	8010c52 <_ZNSt5tupleIJOtEEC1IJtELb1ELb1EEEDpOT_>
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	3708      	adds	r7, #8
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}

0800febe <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800febe:	b5b0      	push	{r4, r5, r7, lr}
 800fec0:	b088      	sub	sp, #32
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	60f8      	str	r0, [r7, #12]
 800fec6:	60b9      	str	r1, [r7, #8]
 800fec8:	607a      	str	r2, [r7, #4]
 800feca:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fa35 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800fed2:	4604      	mov	r4, r0
 800fed4:	6838      	ldr	r0, [r7, #0]
 800fed6:	f000 fecf 	bl	8010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 800feda:	4605      	mov	r5, r0
 800fedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fede:	f000 fa43 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800fee2:	4603      	mov	r3, r0
 800fee4:	462a      	mov	r2, r5
 800fee6:	4621      	mov	r1, r4
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	f000 fed0 	bl	8010c8e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 800feee:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800fef0:	69f8      	ldr	r0, [r7, #28]
 800fef2:	f000 fb8a 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 800fef6:	4603      	mov	r3, r0
 800fef8:	f107 0010 	add.w	r0, r7, #16
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	68f9      	ldr	r1, [r7, #12]
 800ff00:	f000 fa60 	bl	80103c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800ff0a:	6939      	ldr	r1, [r7, #16]
 800ff0c:	697a      	ldr	r2, [r7, #20]
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f000 fb8d 	bl	8010630 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 800ff16:	4603      	mov	r3, r0
 800ff18:	e00b      	b.n	800ff32 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 800ff1a:	69f9      	ldr	r1, [r7, #28]
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f000 fbc4 	bl	80106aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 800ff22:	693a      	ldr	r2, [r7, #16]
 800ff24:	f107 0318 	add.w	r3, r7, #24
 800ff28:	4611      	mov	r1, r2
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f000 fbce 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800ff30:	69bb      	ldr	r3, [r7, #24]
      }
 800ff32:	4618      	mov	r0, r3
 800ff34:	3720      	adds	r7, #32
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bdb0      	pop	{r4, r5, r7, pc}

0800ff3a <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b082      	sub	sp, #8
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	4611      	mov	r1, r2
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f000 fec2 	bl	8010cd4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f103 0208 	add.w	r2, r3, #8
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	3308      	adds	r3, #8
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	f000 fee0 	bl	8010d22 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f103 020c 	add.w	r2, r3, #12
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	330c      	adds	r3, #12
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	4610      	mov	r0, r2
 800ff70:	f000 fef6 	bl	8010d60 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4618      	mov	r0, r3
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800ff92:	b590      	push	{r4, r7, lr}
 800ff94:	b085      	sub	sp, #20
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	60f8      	str	r0, [r7, #12]
 800ff9a:	7239      	strb	r1, [r7, #8]
 800ff9c:	607a      	str	r2, [r7, #4]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	687a      	ldr	r2, [r7, #4]
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 ff0c 	bl	8010dc2 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	4618      	mov	r0, r3
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd90      	pop	{r4, r7, pc}

0800ffb4 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800ffb4:	b5b0      	push	{r4, r5, r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	7239      	strb	r1, [r7, #8]
 800ffbe:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800ffc0:	68fc      	ldr	r4, [r7, #12]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff ffda 	bl	800ff7c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4629      	mov	r1, r5
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f7ff ffdf 	bl	800ff92 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3710      	adds	r7, #16
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bdb0      	pop	{r4, r5, r7, pc}

0800ffde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ffde:	b580      	push	{r7, lr}
 800ffe0:	b084      	sub	sp, #16
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	68da      	ldr	r2, [r3, #12]
 800ffea:	f107 030c 	add.w	r3, r7, #12
 800ffee:	4611      	mov	r1, r2
 800fff0:	4618      	mov	r0, r3
 800fff2:	f000 fb6b 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	1d1a      	adds	r2, r3, #4
 801000c:	f107 030c 	add.w	r3, r7, #12
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f000 fb5a 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4618      	mov	r0, r3
 801001c:	3710      	adds	r7, #16
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}

08010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8010022:	b580      	push	{r7, lr}
 8010024:	b082      	sub	sp, #8
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	3310      	adds	r3, #16
 801002e:	4618      	mov	r0, r3
 8010030:	f000 fedf 	bl	8010df2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 8010034:	4603      	mov	r3, r0
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801003e:	b580      	push	{r7, lr}
 8010040:	b082      	sub	sp, #8
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	f7fe ffca 	bl	800efe2 <_ZNKSt14_Function_base8_M_emptyEv>
 801004e:	4603      	mov	r3, r0
 8010050:	f083 0301 	eor.w	r3, r3, #1
 8010054:	b2db      	uxtb	r3, r3
 8010056:	4618      	mov	r0, r3
 8010058:	3708      	adds	r7, #8
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801005e:	b590      	push	{r4, r7, lr}
 8010060:	b085      	sub	sp, #20
 8010062:	af00      	add	r7, sp, #0
 8010064:	6078      	str	r0, [r7, #4]
 8010066:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fece 	bl	8010e0a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801006e:	4604      	mov	r4, r0
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fed6 	bl	8010e22 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010076:	4602      	mov	r2, r0
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	4621      	mov	r1, r4
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f000 fedc 	bl	8010e3a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 8010082:	4603      	mov	r3, r0
 8010084:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 f825 	bl	80100d6 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801008c:	4603      	mov	r3, r0
 801008e:	60fb      	str	r3, [r7, #12]
 8010090:	f107 020c 	add.w	r2, r7, #12
 8010094:	f107 0308 	add.w	r3, r7, #8
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f000 f82c 	bl	80100f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 80100a0:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d10d      	bne.n	80100c2 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 80100a6:	687c      	ldr	r4, [r7, #4]
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 fef6 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80100b0:	4603      	mov	r3, r0
 80100b2:	461a      	mov	r2, r3
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7ff fe73 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 80100bc:	4603      	mov	r3, r0
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d004      	beq.n	80100cc <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 f807 	bl	80100d6 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 80100c8:	4603      	mov	r3, r0
 80100ca:	e000      	b.n	80100ce <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x70>
 80100cc:	68bb      	ldr	r3, [r7, #8]
    }
 80100ce:	4618      	mov	r0, r3
 80100d0:	3714      	adds	r7, #20
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd90      	pop	{r4, r7, pc}

080100d6 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b084      	sub	sp, #16
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	1d1a      	adds	r2, r3, #4
 80100e2:	f107 030c 	add.w	r3, r7, #12
 80100e6:	4611      	mov	r1, r2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 fee3 	bl	8010eb4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	4618      	mov	r0, r3
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}

080100f8 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	429a      	cmp	r2, r3
 801010c:	bf0c      	ite	eq
 801010e:	2301      	moveq	r3, #1
 8010110:	2300      	movne	r3, #0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	4618      	mov	r0, r3
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>:
 8010120:	b480      	push	{r7}
 8010122:	b083      	sub	sp, #12
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4618      	mov	r0, r3
 801012c:	370c      	adds	r7, #12
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr

08010136 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8010136:	b480      	push	{r7}
 8010138:	b083      	sub	sp, #12
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <_ZNSt19_Fwd_list_node_baseC1Ev>:
    _Fwd_list_node_base() = default;
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4618      	mov	r0, r3
 801015e:	370c      	adds	r7, #12
 8010160:	46bd      	mov	sp, r7
 8010162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010166:	4770      	bx	lr

08010168 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>:
	_Fwd_list_impl(_Node_alloc_type&& __a)
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
 8010170:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a)), _M_head()
 8010172:	6838      	ldr	r0, [r7, #0]
 8010174:	f7ff ffdf 	bl	8010136 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8010178:	4603      	mov	r3, r0
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 fea8 	bl	8010ed2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	4618      	mov	r0, r3
 801018c:	f7ff ffde 	bl	801014c <_ZNSt19_Fwd_list_node_baseC1Ev>
	{ }
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4618      	mov	r0, r3
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>:
    _Fwd_list_base<_Tp, _Alloc>::
 801019a:	b590      	push	{r4, r7, lr}
 801019c:	b087      	sub	sp, #28
 801019e:	af00      	add	r7, sp, #0
 80101a0:	60f8      	str	r0, [r7, #12]
 80101a2:	60b9      	str	r1, [r7, #8]
 80101a4:	607a      	str	r2, [r7, #4]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	617b      	str	r3, [r7, #20]
      while (__curr != __last)
 80101ac:	697a      	ldr	r2, [r7, #20]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d015      	beq.n	80101e0 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x46>
	  _Node* __temp = __curr;
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	613b      	str	r3, [r7, #16]
	  __curr = static_cast<_Node*>(__curr->_M_next);
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	617b      	str	r3, [r7, #20]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f000 fb03 	bl	80107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80101c4:	4604      	mov	r4, r0
 80101c6:	6938      	ldr	r0, [r7, #16]
 80101c8:	f7ff fd70 	bl	800fcac <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 80101cc:	4603      	mov	r3, r0
 80101ce:	4619      	mov	r1, r3
 80101d0:	4620      	mov	r0, r4
 80101d2:	f000 fb05 	bl	80107e0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__temp);
 80101d6:	6939      	ldr	r1, [r7, #16]
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f000 fb19 	bl	8010810 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      while (__curr != __last)
 80101de:	e7e5      	b.n	80101ac <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x12>
      __pos->_M_next = __last;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	601a      	str	r2, [r3, #0]
      return __last;
 80101e6:	687b      	ldr	r3, [r7, #4]
    }
 80101e8:	4618      	mov	r0, r3
 80101ea:	371c      	adds	r7, #28
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd90      	pop	{r4, r7, pc}

080101f0 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <_ZNSt14_Fwd_list_nodeIhEC1Ev>:
      _Fwd_list_node() = default;
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff ff9a 	bl	801014c <_ZNSt19_Fwd_list_node_baseC1Ev>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4618      	mov	r0, r3
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 8010222:	b5b0      	push	{r4, r5, r7, lr}
 8010224:	b084      	sub	sp, #16
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f000 fe5e 	bl	8010eee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 8010232:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	4619      	mov	r1, r3
 8010238:	2008      	movs	r0, #8
 801023a:	f7f1 f9c5 	bl	80015c8 <_ZnwjPv>
 801023e:	4603      	mov	r3, r0
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ffe1 	bl	8010208 <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fabf 	bl	80107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 801024c:	4604      	mov	r4, r0
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f7ff fd2c 	bl	800fcac <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8010254:	4605      	mov	r5, r0
 8010256:	6838      	ldr	r0, [r7, #0]
 8010258:	f000 fe5e 	bl	8010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801025c:	4603      	mov	r3, r0
 801025e:	461a      	mov	r2, r3
 8010260:	4629      	mov	r1, r5
 8010262:	4620      	mov	r0, r4
 8010264:	f000 fe79 	bl	8010f5a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>
	  return __node;
 8010268:	68fb      	ldr	r3, [r7, #12]
	}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bdb0      	pop	{r4, r5, r7, pc}

08010272 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
 8010272:	b480      	push	{r7}
 8010274:	b083      	sub	sp, #12
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4618      	mov	r0, r3
 801027e:	370c      	adds	r7, #12
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	4618      	mov	r0, r3
 8010296:	370c      	adds	r7, #12
 8010298:	46bd      	mov	sp, r7
 801029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029e:	4770      	bx	lr

080102a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b082      	sub	sp, #8
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80102c2:	6839      	ldr	r1, [r7, #0]
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fe5a 	bl	8010f7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 80102ca:	6839      	ldr	r1, [r7, #0]
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 fe6b 	bl	8010fa8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 80102d2:	bf00      	nop
 80102d4:	3708      	adds	r7, #8
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}

080102da <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 80102da:	b590      	push	{r4, r7, lr}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
 80102e2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 fe71 	bl	8010fcc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80102ea:	4604      	mov	r4, r0
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 fe79 	bl	8010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80102f2:	4602      	mov	r2, r0
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	4621      	mov	r1, r4
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f000 fe7f 	bl	8010ffc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80102fe:	4603      	mov	r3, r0
 8010300:	4618      	mov	r0, r3
 8010302:	370c      	adds	r7, #12
 8010304:	46bd      	mov	sp, r7
 8010306:	bd90      	pop	{r4, r7, pc}

08010308 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010310:	bf00      	nop
 8010312:	4618      	mov	r0, r3
 8010314:	370c      	adds	r7, #12
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 801031e:	b580      	push	{r7, lr}
 8010320:	b082      	sub	sp, #8
 8010322:	af00      	add	r7, sp, #0
 8010324:	6078      	str	r0, [r7, #4]
 8010326:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6839      	ldr	r1, [r7, #0]
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fe96 	bl	801105e <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4618      	mov	r0, r3
 8010348:	370c      	adds	r7, #12
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010352:	b480      	push	{r7}
 8010354:	b083      	sub	sp, #12
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	4618      	mov	r0, r3
 801035e:	370c      	adds	r7, #12
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010368:	b480      	push	{r7}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801037e:	b5b0      	push	{r4, r5, r7, lr}
 8010380:	b088      	sub	sp, #32
 8010382:	af02      	add	r7, sp, #8
 8010384:	60f8      	str	r0, [r7, #12]
 8010386:	60b9      	str	r1, [r7, #8]
 8010388:	607a      	str	r2, [r7, #4]
 801038a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801038c:	68f8      	ldr	r0, [r7, #12]
 801038e:	f000 fe75 	bl	801107c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8010392:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010394:	68b8      	ldr	r0, [r7, #8]
 8010396:	f7ff ffd1 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801039a:	4604      	mov	r4, r0
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff ffd8 	bl	8010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80103a2:	4605      	mov	r5, r0
 80103a4:	6838      	ldr	r0, [r7, #0]
 80103a6:	f7ff ffdf 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80103aa:	4603      	mov	r3, r0
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	462b      	mov	r3, r5
 80103b0:	4622      	mov	r2, r4
 80103b2:	6979      	ldr	r1, [r7, #20]
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f000 fe72 	bl	801109e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 80103ba:	697b      	ldr	r3, [r7, #20]
	}
 80103bc:	4618      	mov	r0, r3
 80103be:	3718      	adds	r7, #24
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bdb0      	pop	{r4, r5, r7, pc}

080103c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80103c4:	b590      	push	{r4, r7, lr}
 80103c6:	b08d      	sub	sp, #52	; 0x34
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80103d2:	1d3b      	adds	r3, r7, #4
 80103d4:	4618      	mov	r0, r3
 80103d6:	f000 fe8f 	bl	80110f8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 80103da:	4603      	mov	r3, r0
 80103dc:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80103de:	69bc      	ldr	r4, [r7, #24]
 80103e0:	68b8      	ldr	r0, [r7, #8]
 80103e2:	f000 fdff 	bl	8010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80103e6:	4603      	mov	r3, r0
 80103e8:	429c      	cmp	r4, r3
 80103ea:	bf0c      	ite	eq
 80103ec:	2301      	moveq	r3, #1
 80103ee:	2300      	movne	r3, #0
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d030      	beq.n	8010458 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 80103f6:	68b8      	ldr	r0, [r7, #8]
 80103f8:	f000 fe8f 	bl	801111a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 80103fc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d013      	beq.n	801042a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8010402:	68bc      	ldr	r4, [r7, #8]
 8010404:	68b8      	ldr	r0, [r7, #8]
 8010406:	f000 fe94 	bl	8011132 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801040a:	4603      	mov	r3, r0
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4618      	mov	r0, r3
 8010410:	f000 f9b4 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010414:	4603      	mov	r3, r0
 8010416:	683a      	ldr	r2, [r7, #0]
 8010418:	4619      	mov	r1, r3
 801041a:	4620      	mov	r0, r4
 801041c:	f7ff fb73 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8010426:	2301      	movs	r3, #1
 8010428:	e000      	b.n	801042c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 801042a:	2300      	movs	r3, #0
	  if (size() > 0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d00c      	beq.n	801044a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8010430:	2300      	movs	r3, #0
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	68b8      	ldr	r0, [r7, #8]
 8010436:	f000 fe7c 	bl	8011132 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801043a:	4602      	mov	r2, r0
 801043c:	f107 031c 	add.w	r3, r7, #28
 8010440:	4619      	mov	r1, r3
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f000 fe81 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010448:	e0db      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	683a      	ldr	r2, [r7, #0]
 801044e:	68b9      	ldr	r1, [r7, #8]
 8010450:	4618      	mov	r0, r3
 8010452:	f000 fe90 	bl	8011176 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8010456:	e0d4      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8010458:	68bc      	ldr	r4, [r7, #8]
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	4618      	mov	r0, r3
 801045e:	f000 f98d 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010462:	4603      	mov	r3, r0
 8010464:	461a      	mov	r2, r3
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	4620      	mov	r0, r4
 801046a:	f7ff fb4c 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d057      	beq.n	8010524 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8010478:	69bc      	ldr	r4, [r7, #24]
 801047a:	68b8      	ldr	r0, [r7, #8]
 801047c:	f000 ff00 	bl	8011280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8010480:	4603      	mov	r3, r0
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	429c      	cmp	r4, r3
 8010486:	bf0c      	ite	eq
 8010488:	2301      	moveq	r3, #1
 801048a:	2300      	movne	r3, #0
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00d      	beq.n	80104ae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8010492:	68b8      	ldr	r0, [r7, #8]
 8010494:	f000 fef4 	bl	8011280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8010498:	4604      	mov	r4, r0
 801049a:	68b8      	ldr	r0, [r7, #8]
 801049c:	f000 fef0 	bl	8011280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80104a0:	4603      	mov	r3, r0
 80104a2:	461a      	mov	r2, r3
 80104a4:	4621      	mov	r1, r4
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f000 fef6 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80104ac:	e0a9      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80104ae:	68bc      	ldr	r4, [r7, #8]
 80104b0:	f107 0314 	add.w	r3, r7, #20
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 ff08 	bl	80112ca <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 80104ba:	4603      	mov	r3, r0
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 f95c 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80104c4:	4603      	mov	r3, r0
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	4619      	mov	r1, r3
 80104ca:	4620      	mov	r0, r4
 80104cc:	f7ff fb1b 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 80104d0:	4603      	mov	r3, r0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d01f      	beq.n	8010516 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 ff07 	bl	80112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	bf0c      	ite	eq
 80104e4:	2301      	moveq	r3, #1
 80104e6:	2300      	movne	r3, #0
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00a      	beq.n	8010504 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80104ee:	2300      	movs	r3, #0
 80104f0:	623b      	str	r3, [r7, #32]
 80104f2:	f107 0214 	add.w	r2, r7, #20
 80104f6:	f107 0320 	add.w	r3, r7, #32
 80104fa:	4619      	mov	r1, r3
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f000 fe24 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010502:	e07e      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8010504:	f107 0218 	add.w	r2, r7, #24
 8010508:	f107 0318 	add.w	r3, r7, #24
 801050c:	4619      	mov	r1, r3
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f000 fec2 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010514:	e075      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	683a      	ldr	r2, [r7, #0]
 801051a:	68b9      	ldr	r1, [r7, #8]
 801051c:	4618      	mov	r0, r3
 801051e:	f000 fe2a 	bl	8011176 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8010522:	e06e      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8010524:	68bc      	ldr	r4, [r7, #8]
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	4618      	mov	r0, r3
 801052a:	f000 f927 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801052e:	4603      	mov	r3, r0
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	4619      	mov	r1, r3
 8010534:	4620      	mov	r0, r4
 8010536:	f7ff fae6 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d056      	beq.n	80105ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8010544:	69bc      	ldr	r4, [r7, #24]
 8010546:	68b8      	ldr	r0, [r7, #8]
 8010548:	f000 fdf3 	bl	8011132 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801054c:	4603      	mov	r3, r0
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	429c      	cmp	r4, r3
 8010552:	bf0c      	ite	eq
 8010554:	2301      	moveq	r3, #1
 8010556:	2300      	movne	r3, #0
 8010558:	b2db      	uxtb	r3, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00c      	beq.n	8010578 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801055e:	2300      	movs	r3, #0
 8010560:	627b      	str	r3, [r7, #36]	; 0x24
 8010562:	68b8      	ldr	r0, [r7, #8]
 8010564:	f000 fde5 	bl	8011132 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8010568:	4602      	mov	r2, r0
 801056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801056e:	4619      	mov	r1, r3
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f000 fdea 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010576:	e044      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8010578:	68bc      	ldr	r4, [r7, #8]
 801057a:	f107 0310 	add.w	r3, r7, #16
 801057e:	4618      	mov	r0, r3
 8010580:	f7ff f96f 	bl	800f862 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 8010584:	4603      	mov	r3, r0
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4618      	mov	r0, r3
 801058a:	f000 f8f7 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801058e:	4603      	mov	r3, r0
 8010590:	461a      	mov	r2, r3
 8010592:	6839      	ldr	r1, [r7, #0]
 8010594:	4620      	mov	r0, r4
 8010596:	f7ff fab6 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d01f      	beq.n	80105e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f000 fea2 	bl	80112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80105a8:	4603      	mov	r3, r0
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	bf0c      	ite	eq
 80105ae:	2301      	moveq	r3, #1
 80105b0:	2300      	movne	r3, #0
 80105b2:	b2db      	uxtb	r3, r3
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00a      	beq.n	80105ce <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80105b8:	2300      	movs	r3, #0
 80105ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80105bc:	f107 0218 	add.w	r2, r7, #24
 80105c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80105c4:	4619      	mov	r1, r3
 80105c6:	68f8      	ldr	r0, [r7, #12]
 80105c8:	f000 fdbf 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80105cc:	e019      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80105ce:	f107 0210 	add.w	r2, r7, #16
 80105d2:	f107 0310 	add.w	r3, r7, #16
 80105d6:	4619      	mov	r1, r3
 80105d8:	68f8      	ldr	r0, [r7, #12]
 80105da:	f000 fe5d 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80105de:	e010      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	683a      	ldr	r2, [r7, #0]
 80105e4:	68b9      	ldr	r1, [r7, #8]
 80105e6:	4618      	mov	r0, r3
 80105e8:	f000 fdc5 	bl	8011176 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80105ec:	e009      	b.n	8010602 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80105ee:	2300      	movs	r3, #0
 80105f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80105f6:	f107 0318 	add.w	r3, r7, #24
 80105fa:	4619      	mov	r1, r3
 80105fc:	68f8      	ldr	r0, [r7, #12]
 80105fe:	f000 fe81 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	3734      	adds	r7, #52	; 0x34
 8010606:	46bd      	mov	sp, r7
 8010608:	bd90      	pop	{r4, r7, pc}

0801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801060a:	b580      	push	{r7, lr}
 801060c:	b084      	sub	sp, #16
 801060e:	af00      	add	r7, sp, #0
 8010610:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f000 fe8c 	bl	8011330 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8010618:	4602      	mov	r2, r0
 801061a:	f107 030c 	add.w	r3, r7, #12
 801061e:	4611      	mov	r1, r2
 8010620:	4618      	mov	r0, r3
 8010622:	f000 fe93 	bl	801134c <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8010626:	4603      	mov	r3, r0
      }
 8010628:	4618      	mov	r0, r3
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010630:	b5b0      	push	{r4, r5, r7, lr}
 8010632:	b086      	sub	sp, #24
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	607a      	str	r2, [r7, #4]
 801063c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d117      	bne.n	8010674 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f000 fccd 	bl	8010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801064a:	4602      	mov	r2, r0
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	4293      	cmp	r3, r2
 8010650:	d010      	beq.n	8010674 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8010652:	68fc      	ldr	r4, [r7, #12]
 8010654:	6838      	ldr	r0, [r7, #0]
 8010656:	f7ff ffd8 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801065a:	4605      	mov	r5, r0
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 f88d 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010662:	4603      	mov	r3, r0
 8010664:	461a      	mov	r2, r3
 8010666:	4629      	mov	r1, r5
 8010668:	4620      	mov	r0, r4
 801066a:	f7ff fa4c 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 801066e:	4603      	mov	r3, r0
 8010670:	2b00      	cmp	r3, #0
 8010672:	d001      	beq.n	8010678 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8010674:	2301      	movs	r3, #1
 8010676:	e000      	b.n	801067a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8010678:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801067a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8010680:	7df8      	ldrb	r0, [r7, #23]
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	6839      	ldr	r1, [r7, #0]
 8010686:	f008 ffb4 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	695b      	ldr	r3, [r3, #20]
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8010694:	f107 0310 	add.w	r3, r7, #16
 8010698:	6839      	ldr	r1, [r7, #0]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 f816 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80106a0:	693b      	ldr	r3, [r7, #16]
    }
 80106a2:	4618      	mov	r0, r3
 80106a4:	3718      	adds	r7, #24
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bdb0      	pop	{r4, r5, r7, pc}

080106aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80106aa:	b580      	push	{r7, lr}
 80106ac:	b082      	sub	sp, #8
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
 80106b2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80106b4:	6839      	ldr	r1, [r7, #0]
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f000 fe54 	bl	8011364 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80106bc:	6839      	ldr	r1, [r7, #0]
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 fe65 	bl	801138e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80106c4:	bf00      	nop
 80106c6:	3708      	adds	r7, #8
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}

080106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80106cc:	b480      	push	{r7}
 80106ce:	b083      	sub	sp, #12
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	601a      	str	r2, [r3, #0]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4618      	mov	r0, r3
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80106ea:	b480      	push	{r7}
 80106ec:	b083      	sub	sp, #12
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	689b      	ldr	r3, [r3, #8]
      }
 80106f6:	4618      	mov	r0, r3
 80106f8:	370c      	adds	r7, #12
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr

08010702 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8010702:	b480      	push	{r7}
 8010704:	b083      	sub	sp, #12
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3304      	adds	r3, #4
 801070e:	4618      	mov	r0, r3
 8010710:	370c      	adds	r7, #12
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr

0801071a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801071a:	b590      	push	{r4, r7, lr}
 801071c:	b087      	sub	sp, #28
 801071e:	af00      	add	r7, sp, #0
 8010720:	60f8      	str	r0, [r7, #12]
 8010722:	60b9      	str	r1, [r7, #8]
 8010724:	607a      	str	r2, [r7, #4]
 8010726:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d01b      	beq.n	8010766 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801072e:	68fc      	ldr	r4, [r7, #12]
 8010730:	68b8      	ldr	r0, [r7, #8]
 8010732:	f7ff ff6a 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010736:	4603      	mov	r3, r0
 8010738:	683a      	ldr	r2, [r7, #0]
 801073a:	4619      	mov	r1, r3
 801073c:	4620      	mov	r0, r4
 801073e:	f7ff f9e2 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 8010742:	4603      	mov	r3, r0
 8010744:	f083 0301 	eor.w	r3, r3, #1
 8010748:	b2db      	uxtb	r3, r3
 801074a:	2b00      	cmp	r3, #0
 801074c:	d006      	beq.n	801075c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	607b      	str	r3, [r7, #4]
 8010752:	68b8      	ldr	r0, [r7, #8]
 8010754:	f000 fe2d 	bl	80113b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8010758:	60b8      	str	r0, [r7, #8]
 801075a:	e7e5      	b.n	8010728 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801075c:	68b8      	ldr	r0, [r7, #8]
 801075e:	f000 fe34 	bl	80113ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8010762:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8010764:	e7e0      	b.n	8010728 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8010766:	f107 0314 	add.w	r3, r7, #20
 801076a:	6879      	ldr	r1, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f000 f811 	bl	8010794 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8010772:	697b      	ldr	r3, [r7, #20]
    }
 8010774:	4618      	mov	r0, r3
 8010776:	371c      	adds	r7, #28
 8010778:	46bd      	mov	sp, r7
 801077a:	bd90      	pop	{r4, r7, pc}

0801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff ff40 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801078a:	4603      	mov	r3, r0
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	683a      	ldr	r2, [r7, #0]
 80107a2:	601a      	str	r2, [r3, #0]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4618      	mov	r0, r3
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr

080107b2 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 80107b2:	b580      	push	{r7, lr}
 80107b4:	b082      	sub	sp, #8
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fe11 	bl	80113e2 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>
 80107c0:	4603      	mov	r3, r0
 80107c2:	4618      	mov	r0, r3
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() noexcept
 80107ca:	b480      	push	{r7}
 80107cc:	b083      	sub	sp, #12
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80107ea:	6838      	ldr	r0, [r7, #0]
 80107ec:	f000 fe04 	bl	80113f8 <_ZSt10destroy_atIhEvPT_>
	}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fe03 	bl	801140c <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 8010806:	4603      	mov	r3, r0
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>:
      _M_put_node(_Node* __p)
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
	auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);
 801081a:	6838      	ldr	r0, [r7, #0]
 801081c:	f7ff ffec 	bl	80107f8 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>
 8010820:	60f8      	str	r0, [r7, #12]
	_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff ffd1 	bl	80107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8010828:	4603      	mov	r3, r0
 801082a:	2201      	movs	r2, #1
 801082c:	68f9      	ldr	r1, [r7, #12]
 801082e:	4618      	mov	r0, r3
 8010830:	f000 fdf8 	bl	8011424 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>
      }
 8010834:	bf00      	nop
 8010836:	3710      	adds	r7, #16
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801083c:	b590      	push	{r4, r7, lr}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f7ff f935 	bl	800fab6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801084c:	4604      	mov	r4, r0
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fe07 	bl	8011462 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010854:	4602      	mov	r2, r0
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	4621      	mov	r1, r4
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 fe0d 	bl	801147a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 8010860:	4603      	mov	r3, r0
 8010862:	4618      	mov	r0, r3
 8010864:	370c      	adds	r7, #12
 8010866:	46bd      	mov	sp, r7
 8010868:	bd90      	pop	{r4, r7, pc}

0801086a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801086a:	b580      	push	{r7, lr}
 801086c:	b084      	sub	sp, #16
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	1d1a      	adds	r2, r3, #4
 8010876:	f107 030c 	add.w	r3, r7, #12
 801087a:	4611      	mov	r1, r2
 801087c:	4618      	mov	r0, r3
 801087e:	f000 f9ce 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	4618      	mov	r0, r3
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010894:	bf00      	nop
 8010896:	4618      	mov	r0, r3
 8010898:	370c      	adds	r7, #12
 801089a:	46bd      	mov	sp, r7
 801089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a0:	4770      	bx	lr

080108a2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr()
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b082      	sub	sp, #8
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	3310      	adds	r3, #16
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 fe14 	bl	80114dc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 80108b4:	4603      	mov	r3, r0
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80108be:	b580      	push	{r7, lr}
 80108c0:	b082      	sub	sp, #8
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
 80108c6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6839      	ldr	r1, [r7, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f000 fe11 	bl	80114f4 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	4618      	mov	r0, r3
 80108e8:	370c      	adds	r7, #12
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80108f2:	b5b0      	push	{r4, r5, r7, lr}
 80108f4:	b088      	sub	sp, #32
 80108f6:	af02      	add	r7, sp, #8
 80108f8:	60f8      	str	r0, [r7, #12]
 80108fa:	60b9      	str	r1, [r7, #8]
 80108fc:	607a      	str	r2, [r7, #4]
 80108fe:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f000 fe06 	bl	8011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 8010906:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010908:	68b8      	ldr	r0, [r7, #8]
 801090a:	f7ff fd17 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801090e:	4604      	mov	r4, r0
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff ffe3 	bl	80108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010916:	4605      	mov	r5, r0
 8010918:	6838      	ldr	r0, [r7, #0]
 801091a:	f7ff fd25 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801091e:	4603      	mov	r3, r0
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	462b      	mov	r3, r5
 8010924:	4622      	mov	r2, r4
 8010926:	6979      	ldr	r1, [r7, #20]
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f000 fe03 	bl	8011534 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 801092e:	697b      	ldr	r3, [r7, #20]
	}
 8010930:	4618      	mov	r0, r3
 8010932:	3718      	adds	r7, #24
 8010934:	46bd      	mov	sp, r7
 8010936:	bdb0      	pop	{r4, r5, r7, pc}

08010938 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010938:	b590      	push	{r4, r7, lr}
 801093a:	b08d      	sub	sp, #52	; 0x34
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8010946:	1d3b      	adds	r3, r7, #4
 8010948:	4618      	mov	r0, r3
 801094a:	f000 fe20 	bl	801158e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>
 801094e:	4603      	mov	r3, r0
 8010950:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8010952:	69bc      	ldr	r4, [r7, #24]
 8010954:	68b8      	ldr	r0, [r7, #8]
 8010956:	f000 fd84 	bl	8011462 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801095a:	4603      	mov	r3, r0
 801095c:	429c      	cmp	r4, r3
 801095e:	bf0c      	ite	eq
 8010960:	2301      	moveq	r3, #1
 8010962:	2300      	movne	r3, #0
 8010964:	b2db      	uxtb	r3, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	d030      	beq.n	80109cc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 801096a:	68b8      	ldr	r0, [r7, #8]
 801096c:	f000 fe20 	bl	80115b0 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 8010970:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8010972:	2b00      	cmp	r3, #0
 8010974:	d013      	beq.n	801099e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8010976:	68bc      	ldr	r4, [r7, #8]
 8010978:	68b8      	ldr	r0, [r7, #8]
 801097a:	f000 fe25 	bl	80115c8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801097e:	4603      	mov	r3, r0
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4618      	mov	r0, r3
 8010984:	f000 fa8a 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010988:	4603      	mov	r3, r0
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	4619      	mov	r1, r3
 801098e:	4620      	mov	r0, r4
 8010990:	f7ff fa07 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d001      	beq.n	801099e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 801099a:	2301      	movs	r3, #1
 801099c:	e000      	b.n	80109a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 801099e:	2300      	movs	r3, #0
	  if (size() > 0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00c      	beq.n	80109be <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80109a4:	2300      	movs	r3, #0
 80109a6:	61fb      	str	r3, [r7, #28]
 80109a8:	68b8      	ldr	r0, [r7, #8]
 80109aa:	f000 fe0d 	bl	80115c8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 80109ae:	4602      	mov	r2, r0
 80109b0:	f107 031c 	add.w	r3, r7, #28
 80109b4:	4619      	mov	r1, r3
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f000 fbc7 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80109bc:	e0db      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	683a      	ldr	r2, [r7, #0]
 80109c2:	68b9      	ldr	r1, [r7, #8]
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fe0b 	bl	80115e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 80109ca:	e0d4      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80109cc:	68bc      	ldr	r4, [r7, #8]
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 fa63 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80109d6:	4603      	mov	r3, r0
 80109d8:	461a      	mov	r2, r3
 80109da:	6839      	ldr	r1, [r7, #0]
 80109dc:	4620      	mov	r0, r4
 80109de:	f7ff f9e0 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d057      	beq.n	8010a98 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80109ec:	69bc      	ldr	r4, [r7, #24]
 80109ee:	68b8      	ldr	r0, [r7, #8]
 80109f0:	f000 fe7b 	bl	80116ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 80109f4:	4603      	mov	r3, r0
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	429c      	cmp	r4, r3
 80109fa:	bf0c      	ite	eq
 80109fc:	2301      	moveq	r3, #1
 80109fe:	2300      	movne	r3, #0
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00d      	beq.n	8010a22 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8010a06:	68b8      	ldr	r0, [r7, #8]
 8010a08:	f000 fe6f 	bl	80116ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	68b8      	ldr	r0, [r7, #8]
 8010a10:	f000 fe6b 	bl	80116ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010a14:	4603      	mov	r3, r0
 8010a16:	461a      	mov	r2, r3
 8010a18:	4621      	mov	r1, r4
 8010a1a:	68f8      	ldr	r0, [r7, #12]
 8010a1c:	f000 fc3c 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010a20:	e0a9      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8010a22:	68bc      	ldr	r4, [r7, #8]
 8010a24:	f107 0314 	add.w	r3, r7, #20
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 fe6a 	bl	8011702 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f000 fa32 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	683a      	ldr	r2, [r7, #0]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7ff f9af 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d01f      	beq.n	8010a8a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8010a4a:	697b      	ldr	r3, [r7, #20]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7ff fc1b 	bl	8010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	bf0c      	ite	eq
 8010a58:	2301      	moveq	r3, #1
 8010a5a:	2300      	movne	r3, #0
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00a      	beq.n	8010a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8010a62:	2300      	movs	r3, #0
 8010a64:	623b      	str	r3, [r7, #32]
 8010a66:	f107 0214 	add.w	r2, r7, #20
 8010a6a:	f107 0320 	add.w	r3, r7, #32
 8010a6e:	4619      	mov	r1, r3
 8010a70:	68f8      	ldr	r0, [r7, #12]
 8010a72:	f000 fb6a 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010a76:	e07e      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8010a78:	f107 0218 	add.w	r2, r7, #24
 8010a7c:	f107 0318 	add.w	r3, r7, #24
 8010a80:	4619      	mov	r1, r3
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 fc08 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010a88:	e075      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	68b9      	ldr	r1, [r7, #8]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 fda5 	bl	80115e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010a96:	e06e      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8010a98:	68bc      	ldr	r4, [r7, #8]
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 f9fd 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	683a      	ldr	r2, [r7, #0]
 8010aa6:	4619      	mov	r1, r3
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	f7ff f97a 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d056      	beq.n	8010b62 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8010ab4:	69bb      	ldr	r3, [r7, #24]
 8010ab6:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8010ab8:	69bc      	ldr	r4, [r7, #24]
 8010aba:	68b8      	ldr	r0, [r7, #8]
 8010abc:	f000 fd84 	bl	80115c8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	429c      	cmp	r4, r3
 8010ac6:	bf0c      	ite	eq
 8010ac8:	2301      	moveq	r3, #1
 8010aca:	2300      	movne	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00c      	beq.n	8010aec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8010ad6:	68b8      	ldr	r0, [r7, #8]
 8010ad8:	f000 fd76 	bl	80115c8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010adc:	4602      	mov	r2, r0
 8010ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	68f8      	ldr	r0, [r7, #12]
 8010ae6:	f000 fb30 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010aea:	e044      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8010aec:	68bc      	ldr	r4, [r7, #8]
 8010aee:	f107 0310 	add.w	r3, r7, #16
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 fe16 	bl	8011724 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>
 8010af8:	4603      	mov	r3, r0
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 f9cd 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	6839      	ldr	r1, [r7, #0]
 8010b08:	4620      	mov	r0, r4
 8010b0a:	f7ff f94a 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d01f      	beq.n	8010b54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7ff fbb6 	bl	8010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	bf0c      	ite	eq
 8010b22:	2301      	moveq	r3, #1
 8010b24:	2300      	movne	r3, #0
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d00a      	beq.n	8010b42 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b30:	f107 0218 	add.w	r2, r7, #24
 8010b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b38:	4619      	mov	r1, r3
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f000 fb05 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010b40:	e019      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8010b42:	f107 0210 	add.w	r2, r7, #16
 8010b46:	f107 0310 	add.w	r3, r7, #16
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f000 fba3 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010b52:	e010      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	683a      	ldr	r2, [r7, #0]
 8010b58:	68b9      	ldr	r1, [r7, #8]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f000 fd40 	bl	80115e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010b60:	e009      	b.n	8010b76 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8010b62:	2300      	movs	r3, #0
 8010b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010b6a:	f107 0318 	add.w	r3, r7, #24
 8010b6e:	4619      	mov	r1, r3
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 fbc7 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8010b76:	68f8      	ldr	r0, [r7, #12]
 8010b78:	3734      	adds	r7, #52	; 0x34
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd90      	pop	{r4, r7, pc}

08010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b084      	sub	sp, #16
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fddd 	bl	8011746 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8010b8c:	4602      	mov	r2, r0
 8010b8e:	f107 030c 	add.w	r3, r7, #12
 8010b92:	4611      	mov	r1, r2
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 fde4 	bl	8011762 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>
 8010b9a:	4603      	mov	r3, r0
      }
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010ba4:	b5b0      	push	{r4, r5, r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d117      	bne.n	8010be8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	f000 fc52 	bl	8011462 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010bbe:	4602      	mov	r2, r0
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d010      	beq.n	8010be8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8010bc6:	68fc      	ldr	r4, [r7, #12]
 8010bc8:	6838      	ldr	r0, [r7, #0]
 8010bca:	f7ff ffd8 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010bce:	4605      	mov	r5, r0
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f000 f963 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	461a      	mov	r2, r3
 8010bda:	4629      	mov	r1, r5
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7ff f8e0 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8010be8:	2301      	movs	r3, #1
 8010bea:	e000      	b.n	8010bee <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8010bec:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010bee:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8010bf4:	7df8      	ldrb	r0, [r7, #23]
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	6839      	ldr	r1, [r7, #0]
 8010bfa:	f008 fcfa 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	695b      	ldr	r3, [r3, #20]
 8010c02:	1c5a      	adds	r2, r3, #1
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8010c08:	f107 0310 	add.w	r3, r7, #16
 8010c0c:	6839      	ldr	r1, [r7, #0]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f000 f805 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8010c14:	693b      	ldr	r3, [r7, #16]
    }
 8010c16:	4618      	mov	r0, r3
 8010c18:	3718      	adds	r7, #24
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bdb0      	pop	{r4, r5, r7, pc}

08010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	601a      	str	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <_ZNSt5tupleIJOtEEC1IJtELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8010c52:	b590      	push	{r4, r7, lr}
 8010c54:	b083      	sub	sp, #12
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8010c5c:	687c      	ldr	r4, [r7, #4]
 8010c5e:	6838      	ldr	r0, [r7, #0]
 8010c60:	f7ff ffec 	bl	8010c3c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8010c64:	4603      	mov	r3, r0
 8010c66:	4619      	mov	r1, r3
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 fd86 	bl	801177a <_ZNSt11_Tuple_implILj0EJOtEEC1ItEEOT_>
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd90      	pop	{r4, r7, pc}

08010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4618      	mov	r0, r3
 8010c84:	370c      	adds	r7, #12
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010c8e:	b5b0      	push	{r4, r5, r7, lr}
 8010c90:	b088      	sub	sp, #32
 8010c92:	af02      	add	r7, sp, #8
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	60b9      	str	r1, [r7, #8]
 8010c98:	607a      	str	r2, [r7, #4]
 8010c9a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010c9c:	68f8      	ldr	r0, [r7, #12]
 8010c9e:	f000 f9ed 	bl	801107c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8010ca2:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010ca4:	68b8      	ldr	r0, [r7, #8]
 8010ca6:	f7ff fb49 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010caa:	4604      	mov	r4, r0
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff ffe3 	bl	8010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8010cb2:	4605      	mov	r5, r0
 8010cb4:	6838      	ldr	r0, [r7, #0]
 8010cb6:	f7ff fb57 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	462b      	mov	r3, r5
 8010cc0:	4622      	mov	r2, r4
 8010cc2:	6979      	ldr	r1, [r7, #20]
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f000 fd6b 	bl	80117a0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8010cca:	697b      	ldr	r3, [r7, #20]
	}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bdb0      	pop	{r4, r5, r7, pc}

08010cd4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fd8b 	bl	80117fa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	f107 0308 	add.w	r3, r7, #8
 8010cea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cee:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8010cf2:	6838      	ldr	r0, [r7, #0]
 8010cf4:	f000 fd81 	bl	80117fa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d00:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8010d04:	f107 0308 	add.w	r3, r7, #8
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 fd76 	bl	80117fa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010d16:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8010d1a:	bf00      	nop
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b084      	sub	sp, #16
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
 8010d2a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 fd6f 	bl	8011810 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010d32:	4603      	mov	r3, r0
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010d38:	6838      	ldr	r0, [r7, #0]
 8010d3a:	f000 fd69 	bl	8011810 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	681a      	ldr	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010d46:	f107 030c 	add.w	r3, r7, #12
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 fd60 	bl	8011810 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8010d50:	4603      	mov	r3, r0
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	601a      	str	r2, [r3, #0]
    }
 8010d58:	bf00      	nop
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f000 fd5b 	bl	8011826 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8010d70:	4603      	mov	r3, r0
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010d76:	6838      	ldr	r0, [r7, #0]
 8010d78:	f000 fd55 	bl	8011826 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	681a      	ldr	r2, [r3, #0]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8010d84:	f107 030c 	add.w	r3, r7, #12
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f000 fd4c 	bl	8011826 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	601a      	str	r2, [r3, #0]
    }
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b084      	sub	sp, #16
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	60f8      	str	r0, [r7, #12]
 8010da6:	7239      	strb	r1, [r7, #8]
 8010da8:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f7ff f8e6 	bl	800ff7c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8010db0:	4603      	mov	r3, r0
 8010db2:	781a      	ldrb	r2, [r3, #0]
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	701a      	strb	r2, [r3, #0]
	    { }
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8010dc2:	b5b0      	push	{r4, r5, r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	60f8      	str	r0, [r7, #12]
 8010dca:	7239      	strb	r1, [r7, #8]
 8010dcc:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8010dce:	68fc      	ldr	r4, [r7, #12]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff f8d3 	bl	800ff7c <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f7ff ffde 	bl	8010d9e <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2201      	movs	r2, #1
 8010de6:	705a      	strb	r2, [r3, #1]
	{ }
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	4618      	mov	r0, r3
 8010dec:	3710      	adds	r7, #16
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bdb0      	pop	{r4, r5, r7, pc}

08010df2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8010df2:	b580      	push	{r7, lr}
 8010df4:	b082      	sub	sp, #8
 8010df6:	af00      	add	r7, sp, #0
 8010df8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 fd1e 	bl	801183c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 8010e00:	4603      	mov	r3, r0
 8010e02:	4618      	mov	r0, r3
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8010e0a:	b480      	push	{r7}
 8010e0c:	b083      	sub	sp, #12
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	689b      	ldr	r3, [r3, #8]
      }
 8010e16:	4618      	mov	r0, r3
 8010e18:	370c      	adds	r7, #12
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8010e22:	b480      	push	{r7}
 8010e24:	b083      	sub	sp, #12
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	4618      	mov	r0, r3
 8010e30:	370c      	adds	r7, #12
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr

08010e3a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010e3a:	b590      	push	{r4, r7, lr}
 8010e3c:	b087      	sub	sp, #28
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	60f8      	str	r0, [r7, #12]
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	607a      	str	r2, [r7, #4]
 8010e46:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d01b      	beq.n	8010e86 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8010e4e:	68fc      	ldr	r4, [r7, #12]
 8010e50:	68b8      	ldr	r0, [r7, #8]
 8010e52:	f7ff fe94 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010e56:	4603      	mov	r3, r0
 8010e58:	683a      	ldr	r2, [r7, #0]
 8010e5a:	4619      	mov	r1, r3
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f7fe ffa0 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8010e62:	4603      	mov	r3, r0
 8010e64:	f083 0301 	eor.w	r3, r3, #1
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d006      	beq.n	8010e7c <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	607b      	str	r3, [r7, #4]
 8010e72:	68b8      	ldr	r0, [r7, #8]
 8010e74:	f000 fced 	bl	8011852 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8010e78:	60b8      	str	r0, [r7, #8]
 8010e7a:	e7e5      	b.n	8010e48 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8010e7c:	68b8      	ldr	r0, [r7, #8]
 8010e7e:	f000 fcf4 	bl	801186a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8010e82:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8010e84:	e7e0      	b.n	8010e48 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8010e86:	f107 0314 	add.w	r3, r7, #20
 8010e8a:	6879      	ldr	r1, [r7, #4]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f000 f811 	bl	8010eb4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 8010e92:	697b      	ldr	r3, [r7, #20]
    }
 8010e94:	4618      	mov	r0, r3
 8010e96:	371c      	adds	r7, #28
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd90      	pop	{r4, r7, pc}

08010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7ff fe6a 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	683a      	ldr	r2, [r7, #0]
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
 8010eda:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8010edc:	6839      	ldr	r1, [r7, #0]
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f000 fccf 	bl	8011882 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3708      	adds	r7, #8
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd80      	pop	{r7, pc}

08010eee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>:
      _M_get_node()
 8010eee:	b580      	push	{r7, lr}
 8010ef0:	b084      	sub	sp, #16
 8010ef2:	af00      	add	r7, sp, #0
 8010ef4:	6078      	str	r0, [r7, #4]
	auto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7ff fc67 	bl	80107ca <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8010efc:	4603      	mov	r3, r0
 8010efe:	2101      	movs	r1, #1
 8010f00:	4618      	mov	r0, r3
 8010f02:	f000 fcca 	bl	801189a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>
 8010f06:	60f8      	str	r0, [r7, #12]
	return std::__to_address(__ptr);
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f000 fce6 	bl	80118da <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>
 8010f0e:	4603      	mov	r3, r0
      }
 8010f10:	4618      	mov	r0, r3
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	370c      	adds	r7, #12
 8010f26:	46bd      	mov	sp, r7
 8010f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2c:	4770      	bx	lr

08010f2e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8010f2e:	b590      	push	{r4, r7, lr}
 8010f30:	b083      	sub	sp, #12
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010f38:	6838      	ldr	r0, [r7, #0]
 8010f3a:	f7ff ffed 	bl	8010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	781c      	ldrb	r4, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	4619      	mov	r1, r3
 8010f46:	2001      	movs	r0, #1
 8010f48:	f7f0 fb3e 	bl	80015c8 <_ZnwjPv>
 8010f4c:	4603      	mov	r3, r0
 8010f4e:	4622      	mov	r2, r4
 8010f50:	701a      	strb	r2, [r3, #0]
 8010f52:	4618      	mov	r0, r3
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd90      	pop	{r4, r7, pc}

08010f5a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b084      	sub	sp, #16
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	60f8      	str	r0, [r7, #12]
 8010f62:	60b9      	str	r1, [r7, #8]
 8010f64:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7ff ffd6 	bl	8010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	4619      	mov	r1, r3
 8010f70:	68b8      	ldr	r0, [r7, #8]
 8010f72:	f7ff ffdc 	bl	8010f2e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8010f76:	bf00      	nop
 8010f78:	3710      	adds	r7, #16
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8010f7e:	b590      	push	{r4, r7, lr}
 8010f80:	b083      	sub	sp, #12
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
 8010f86:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fcb1 	bl	80118f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	6838      	ldr	r0, [r7, #0]
 8010f92:	f7ff fc86 	bl	80108a2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8010f96:	4603      	mov	r3, r0
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f000 fcb3 	bl	8011906 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>
      }
 8010fa0:	bf00      	nop
 8010fa2:	370c      	adds	r7, #12
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd90      	pop	{r4, r7, pc}

08010fa8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b082      	sub	sp, #8
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
 8010fb0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f000 fc9c 	bl	80118f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2201      	movs	r2, #1
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f000 fcad 	bl	801191e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>
 8010fc4:	bf00      	nop
 8010fc6:	3708      	adds	r7, #8
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}

08010fcc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8010fcc:	b480      	push	{r7}
 8010fce:	b083      	sub	sp, #12
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010ffc:	b590      	push	{r4, r7, lr}
 8010ffe:	b087      	sub	sp, #28
 8011000:	af00      	add	r7, sp, #0
 8011002:	60f8      	str	r0, [r7, #12]
 8011004:	60b9      	str	r1, [r7, #8]
 8011006:	607a      	str	r2, [r7, #4]
 8011008:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01b      	beq.n	8011048 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011010:	68fc      	ldr	r4, [r7, #12]
 8011012:	68b8      	ldr	r0, [r7, #8]
 8011014:	f7ff faf9 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011018:	4603      	mov	r3, r0
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	4619      	mov	r1, r3
 801101e:	4620      	mov	r0, r4
 8011020:	f7fe fd71 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 8011024:	4603      	mov	r3, r0
 8011026:	f083 0301 	eor.w	r3, r3, #1
 801102a:	b2db      	uxtb	r3, r3
 801102c:	2b00      	cmp	r3, #0
 801102e:	d006      	beq.n	801103e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	607b      	str	r3, [r7, #4]
 8011034:	68b8      	ldr	r0, [r7, #8]
 8011036:	f000 fc91 	bl	801195c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801103a:	60b8      	str	r0, [r7, #8]
 801103c:	e7e5      	b.n	801100a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801103e:	68b8      	ldr	r0, [r7, #8]
 8011040:	f000 f954 	bl	80112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011044:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011046:	e7e0      	b.n	801100a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8011048:	f107 0314 	add.w	r3, r7, #20
 801104c:	6879      	ldr	r1, [r7, #4]
 801104e:	4618      	mov	r0, r3
 8011050:	f7ff fb3c 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8011054:	697b      	ldr	r3, [r7, #20]
    }
 8011056:	4618      	mov	r0, r3
 8011058:	371c      	adds	r7, #28
 801105a:	46bd      	mov	sp, r7
 801105c:	bd90      	pop	{r4, r7, pc}

0801105e <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 801105e:	b480      	push	{r7}
 8011060:	b083      	sub	sp, #12
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	683a      	ldr	r2, [r7, #0]
 801106c:	601a      	str	r2, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 fc75 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 801108a:	4603      	mov	r3, r0
 801108c:	2101      	movs	r1, #1
 801108e:	4618      	mov	r0, r3
 8011090:	f000 fc7b 	bl	801198a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 8011094:	4603      	mov	r3, r0
 8011096:	4618      	mov	r0, r3
 8011098:	3708      	adds	r7, #8
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	4619      	mov	r1, r3
 80110b2:	202c      	movs	r0, #44	; 0x2c
 80110b4:	f7f0 fa88 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f000 fc5b 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80110be:	4604      	mov	r4, r0
 80110c0:	68b8      	ldr	r0, [r7, #8]
 80110c2:	f7fe ffae 	bl	8010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 80110c6:	4605      	mov	r5, r0
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f7ff f937 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80110ce:	4606      	mov	r6, r0
 80110d0:	6838      	ldr	r0, [r7, #0]
 80110d2:	f7ff f93e 	bl	8010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80110d6:	4680      	mov	r8, r0
 80110d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80110da:	f7ff f945 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80110de:	4603      	mov	r3, r0
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4643      	mov	r3, r8
 80110e4:	4632      	mov	r2, r6
 80110e6:	4629      	mov	r1, r5
 80110e8:	4620      	mov	r0, r4
 80110ea:	f000 fcaa 	bl	8011a42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80110ee:	bf00      	nop
 80110f0:	3710      	adds	r7, #16
 80110f2:	46bd      	mov	sp, r7
 80110f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110f8 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	f107 030c 	add.w	r3, r7, #12
 8011108:	4611      	mov	r1, r2
 801110a:	4618      	mov	r0, r3
 801110c:	f7ff fade 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}

0801111a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801111a:	b480      	push	{r7}
 801111c:	b083      	sub	sp, #12
 801111e:	af00      	add	r7, sp, #0
 8011120:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	695b      	ldr	r3, [r3, #20]
 8011126:	4618      	mov	r0, r3
 8011128:	370c      	adds	r7, #12
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr

08011132 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8011132:	b480      	push	{r7}
 8011134:	b083      	sub	sp, #12
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	3310      	adds	r3, #16
 801113e:	4618      	mov	r0, r3
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 801114a:	b580      	push	{r7, lr}
 801114c:	b084      	sub	sp, #16
 801114e:	af00      	add	r7, sp, #0
 8011150:	60f8      	str	r0, [r7, #12]
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	601a      	str	r2, [r3, #0]
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f000 fc8b 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011164:	4603      	mov	r3, r0
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	605a      	str	r2, [r3, #4]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	4618      	mov	r0, r3
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011176:	b590      	push	{r4, r7, lr}
 8011178:	b08b      	sub	sp, #44	; 0x2c
 801117a:	af00      	add	r7, sp, #0
 801117c:	60f8      	str	r0, [r7, #12]
 801117e:	60b9      	str	r1, [r7, #8]
 8011180:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8011182:	68b8      	ldr	r0, [r7, #8]
 8011184:	f7ff ff22 	bl	8010fcc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8011188:	4603      	mov	r3, r0
 801118a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801118c:	68b8      	ldr	r0, [r7, #8]
 801118e:	f7ff ff29 	bl	8010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8011192:	4603      	mov	r3, r0
 8011194:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8011196:	2301      	movs	r3, #1
 8011198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d020      	beq.n	80111e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80111a6:	68bc      	ldr	r4, [r7, #8]
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7ff fa2d 	bl	801060a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80111b0:	4603      	mov	r3, r0
 80111b2:	461a      	mov	r2, r3
 80111b4:	6879      	ldr	r1, [r7, #4]
 80111b6:	4620      	mov	r0, r4
 80111b8:	f7fe fca5 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 80111bc:	4603      	mov	r3, r0
 80111be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80111c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d005      	beq.n	80111d6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fbc5 	bl	801195c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80111d2:	4603      	mov	r3, r0
 80111d4:	e004      	b.n	80111e0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	4618      	mov	r0, r3
 80111da:	f000 f887 	bl	80112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80111de:	4603      	mov	r3, r0
 80111e0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80111e2:	e7db      	b.n	801119c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	f107 0310 	add.w	r3, r7, #16
 80111ea:	4611      	mov	r1, r2
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7ff fa6d 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80111f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d01d      	beq.n	8011236 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80111fa:	68b8      	ldr	r0, [r7, #8]
 80111fc:	f7fe feef 	bl	800ffde <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8011200:	4603      	mov	r3, r0
 8011202:	61fb      	str	r3, [r7, #28]
 8011204:	f107 021c 	add.w	r2, r7, #28
 8011208:	f107 0310 	add.w	r3, r7, #16
 801120c:	4611      	mov	r1, r2
 801120e:	4618      	mov	r0, r3
 8011210:	f7fe fb13 	bl	800f83a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8011214:	4603      	mov	r3, r0
 8011216:	2b00      	cmp	r3, #0
 8011218:	d008      	beq.n	801122c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801121a:	f107 0214 	add.w	r2, r7, #20
 801121e:	f107 0318 	add.w	r3, r7, #24
 8011222:	4619      	mov	r1, r3
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f000 fc33 	bl	8011a90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 801122a:	e025      	b.n	8011278 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801122c:	f107 0310 	add.w	r3, r7, #16
 8011230:	4618      	mov	r0, r3
 8011232:	f000 f84a 	bl	80112ca <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8011236:	68bc      	ldr	r4, [r7, #8]
 8011238:	693b      	ldr	r3, [r7, #16]
 801123a:	4618      	mov	r0, r3
 801123c:	f7ff fa9e 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011240:	4603      	mov	r3, r0
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	4619      	mov	r1, r3
 8011246:	4620      	mov	r0, r4
 8011248:	f7fe fc5d 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 801124c:	4603      	mov	r3, r0
 801124e:	2b00      	cmp	r3, #0
 8011250:	d008      	beq.n	8011264 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8011252:	f107 0214 	add.w	r2, r7, #20
 8011256:	f107 0318 	add.w	r3, r7, #24
 801125a:	4619      	mov	r1, r3
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f000 fc17 	bl	8011a90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 8011262:	e009      	b.n	8011278 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8011264:	2300      	movs	r3, #0
 8011266:	623b      	str	r3, [r7, #32]
 8011268:	f107 0220 	add.w	r2, r7, #32
 801126c:	f107 0310 	add.w	r3, r7, #16
 8011270:	4619      	mov	r1, r3
 8011272:	68f8      	ldr	r0, [r7, #12]
 8011274:	f000 f846 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011278:	68f8      	ldr	r0, [r7, #12]
 801127a:	372c      	adds	r7, #44	; 0x2c
 801127c:	46bd      	mov	sp, r7
 801127e:	bd90      	pop	{r4, r7, pc}

08011280 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8011280:	b480      	push	{r7}
 8011282:	b083      	sub	sp, #12
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	330c      	adds	r3, #12
 801128c:	4618      	mov	r0, r3
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr

08011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80112a4:	68b8      	ldr	r0, [r7, #8]
 80112a6:	f000 fbe8 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80112aa:	4603      	mov	r3, r0
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	601a      	str	r2, [r3, #0]
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 fbe1 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80112b8:	4603      	mov	r3, r0
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	605a      	str	r2, [r3, #4]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b082      	sub	sp, #8
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f008 f989 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80112dc:	4602      	mov	r2, r0
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	601a      	str	r2, [r3, #0]
	return *this;
 80112e2:	687b      	ldr	r3, [r7, #4]
      }
 80112e4:	4618      	mov	r0, r3
 80112e6:	3708      	adds	r7, #8
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}

080112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80112ec:	b480      	push	{r7}
 80112ee:	b083      	sub	sp, #12
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8011310:	68b8      	ldr	r0, [r7, #8]
 8011312:	f000 fbb2 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011316:	4603      	mov	r3, r0
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	601a      	str	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	605a      	str	r2, [r3, #4]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	3310      	adds	r3, #16
 801133c:	4618      	mov	r0, r3
 801133e:	f000 fbc0 	bl	8011ac2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 8011342:	4603      	mov	r3, r0
 8011344:	4618      	mov	r0, r3
 8011346:	3708      	adds	r7, #8
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	4618      	mov	r0, r3
 801135a:	370c      	adds	r7, #12
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011364:	b590      	push	{r4, r7, lr}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
 801136c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 fb00 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8011374:	4604      	mov	r4, r0
 8011376:	6838      	ldr	r0, [r7, #0]
 8011378:	f7fe fe53 	bl	8010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 801137c:	4603      	mov	r3, r0
 801137e:	4619      	mov	r1, r3
 8011380:	4620      	mov	r0, r4
 8011382:	f000 fbaa 	bl	8011ada <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8011386:	bf00      	nop
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	bd90      	pop	{r4, r7, pc}

0801138e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801138e:	b580      	push	{r7, lr}
 8011390:	b082      	sub	sp, #8
 8011392:	af00      	add	r7, sp, #0
 8011394:	6078      	str	r0, [r7, #4]
 8011396:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f000 faeb 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 801139e:	4603      	mov	r3, r0
 80113a0:	2201      	movs	r2, #1
 80113a2:	6839      	ldr	r1, [r7, #0]
 80113a4:	4618      	mov	r0, r3
 80113a6:	f000 fba4 	bl	8011af2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 80113aa:	bf00      	nop
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}

080113b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80113b2:	b480      	push	{r7}
 80113b4:	b083      	sub	sp, #12
 80113b6:	af00      	add	r7, sp, #0
 80113b8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	4618      	mov	r0, r3
 80113c0:	370c      	adds	r7, #12
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr

080113ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80113ca:	b480      	push	{r7}
 80113cc:	b083      	sub	sp, #12
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	4618      	mov	r0, r3
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>:
      _M_addr() noexcept
 80113e2:	b480      	push	{r7}
 80113e4:	b083      	sub	sp, #12
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80113ea:	687b      	ldr	r3, [r7, #4]
      }
 80113ec:	4618      	mov	r0, r3
 80113ee:	370c      	adds	r7, #12
 80113f0:	46bd      	mov	sp, r7
 80113f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f6:	4770      	bx	lr

080113f8 <_ZSt10destroy_atIhEvPT_>:
    destroy_at(_Tp* __location)
 80113f8:	b480      	push	{r7}
 80113fa:	b083      	sub	sp, #12
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
    }
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    addressof(_Tp& __r) noexcept
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f000 fb8b 	bl	8011b30 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 801141a:	4603      	mov	r3, r0
 801141c:	4618      	mov	r0, r3
 801141e:	3708      	adds	r7, #8
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	607a      	str	r2, [r7, #4]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	61fb      	str	r3, [r7, #28]
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	61bb      	str	r3, [r7, #24]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801143c:	f7fc fcde 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d003      	beq.n	801144e <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8011446:	69b8      	ldr	r0, [r7, #24]
 8011448:	f008 f866 	bl	8019518 <_ZdlPv>
	    return;
 801144c:	e005      	b.n	801145a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	69b9      	ldr	r1, [r7, #24]
 8011452:	69f8      	ldr	r0, [r7, #28]
 8011454:	f000 fd24 	bl	8011ea0 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8011458:	bf00      	nop
 801145a:	bf00      	nop
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}

08011462 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8011462:	b480      	push	{r7}
 8011464:	b083      	sub	sp, #12
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	3304      	adds	r3, #4
 801146e:	4618      	mov	r0, r3
 8011470:	370c      	adds	r7, #12
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr

0801147a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801147a:	b590      	push	{r4, r7, lr}
 801147c:	b087      	sub	sp, #28
 801147e:	af00      	add	r7, sp, #0
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	60b9      	str	r1, [r7, #8]
 8011484:	607a      	str	r2, [r7, #4]
 8011486:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d01b      	beq.n	80114c6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801148e:	68fc      	ldr	r4, [r7, #12]
 8011490:	68b8      	ldr	r0, [r7, #8]
 8011492:	f7ff fb74 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011496:	4603      	mov	r3, r0
 8011498:	683a      	ldr	r2, [r7, #0]
 801149a:	4619      	mov	r1, r3
 801149c:	4620      	mov	r0, r4
 801149e:	f7fe fc80 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 80114a2:	4603      	mov	r3, r0
 80114a4:	f083 0301 	eor.w	r3, r3, #1
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d006      	beq.n	80114bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	607b      	str	r3, [r7, #4]
 80114b2:	68b8      	ldr	r0, [r7, #8]
 80114b4:	f7fe fef4 	bl	80102a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80114b8:	60b8      	str	r0, [r7, #8]
 80114ba:	e7e5      	b.n	8011488 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80114bc:	68b8      	ldr	r0, [r7, #8]
 80114be:	f7fe fee3 	bl	8010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 80114c2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80114c4:	e7e0      	b.n	8011488 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 80114c6:	f107 0314 	add.w	r3, r7, #20
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7ff fba6 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80114d2:	697b      	ldr	r3, [r7, #20]
    }
 80114d4:	4618      	mov	r0, r3
 80114d6:	371c      	adds	r7, #28
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd90      	pop	{r4, r7, pc}

080114dc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() noexcept
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fb2e 	bl	8011b46 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 80114ea:	4603      	mov	r3, r0
 80114ec:	4618      	mov	r0, r3
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	683a      	ldr	r2, [r7, #0]
 8011502:	601a      	str	r2, [r3, #0]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	4618      	mov	r0, r3
 8011508:	370c      	adds	r7, #12
 801150a:	46bd      	mov	sp, r7
 801150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011510:	4770      	bx	lr

08011512 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8011512:	b580      	push	{r7, lr}
 8011514:	b082      	sub	sp, #8
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f9e8 	bl	80118f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011520:	4603      	mov	r3, r0
 8011522:	2101      	movs	r1, #1
 8011524:	4618      	mov	r0, r3
 8011526:	f000 fb19 	bl	8011b5c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>
 801152a:	4603      	mov	r3, r0
 801152c:	4618      	mov	r0, r3
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8011534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011538:	b086      	sub	sp, #24
 801153a:	af02      	add	r7, sp, #8
 801153c:	60f8      	str	r0, [r7, #12]
 801153e:	60b9      	str	r1, [r7, #8]
 8011540:	607a      	str	r2, [r7, #4]
 8011542:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	4619      	mov	r1, r3
 8011548:	201c      	movs	r0, #28
 801154a:	f7f0 f83d 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f000 f9ce 	bl	80118f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011554:	4604      	mov	r4, r0
 8011556:	68b8      	ldr	r0, [r7, #8]
 8011558:	f7ff f9a3 	bl	80108a2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 801155c:	4605      	mov	r5, r0
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7fe feec 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011564:	4606      	mov	r6, r0
 8011566:	6838      	ldr	r0, [r7, #0]
 8011568:	f7ff f9b8 	bl	80108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801156c:	4680      	mov	r8, r0
 801156e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011570:	f7fe fefa 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011574:	4603      	mov	r3, r0
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	4643      	mov	r3, r8
 801157a:	4632      	mov	r2, r6
 801157c:	4629      	mov	r1, r5
 801157e:	4620      	mov	r0, r4
 8011580:	f000 fb49 	bl	8011c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8011584:	bf00      	nop
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801158e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801158e:	b580      	push	{r7, lr}
 8011590:	b084      	sub	sp, #16
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	f107 030c 	add.w	r3, r7, #12
 801159e:	4611      	mov	r1, r2
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7ff fb3c 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	4618      	mov	r0, r3
 80115aa:	3710      	adds	r7, #16
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	695b      	ldr	r3, [r3, #20]
 80115bc:	4618      	mov	r0, r3
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	3310      	adds	r3, #16
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80115e0:	b590      	push	{r4, r7, lr}
 80115e2:	b08b      	sub	sp, #44	; 0x2c
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	60b9      	str	r1, [r7, #8]
 80115ea:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80115ec:	68b8      	ldr	r0, [r7, #8]
 80115ee:	f7fe fa62 	bl	800fab6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 80115f2:	4603      	mov	r3, r0
 80115f4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80115f6:	68b8      	ldr	r0, [r7, #8]
 80115f8:	f7ff ff33 	bl	8011462 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 80115fc:	4603      	mov	r3, r0
 80115fe:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8011600:	2301      	movs	r3, #1
 8011602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d020      	beq.n	801164e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8011610:	68bc      	ldr	r4, [r7, #8]
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff fab2 	bl	8010b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801161a:	4603      	mov	r3, r0
 801161c:	461a      	mov	r2, r3
 801161e:	6879      	ldr	r1, [r7, #4]
 8011620:	4620      	mov	r0, r4
 8011622:	f7fe fbbe 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 8011626:	4603      	mov	r3, r0
 8011628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011630:	2b00      	cmp	r3, #0
 8011632:	d005      	beq.n	8011640 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	4618      	mov	r0, r3
 8011638:	f7fe fe32 	bl	80102a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801163c:	4603      	mov	r3, r0
 801163e:	e004      	b.n	801164a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe fe20 	bl	8010288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011648:	4603      	mov	r3, r0
 801164a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801164c:	e7db      	b.n	8011606 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	f107 0310 	add.w	r3, r7, #16
 8011654:	4611      	mov	r1, r2
 8011656:	4618      	mov	r0, r3
 8011658:	f7ff fae1 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801165c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011660:	2b00      	cmp	r3, #0
 8011662:	d01d      	beq.n	80116a0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8011664:	68b8      	ldr	r0, [r7, #8]
 8011666:	f000 faf2 	bl	8011c4e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 801166a:	4603      	mov	r3, r0
 801166c:	61fb      	str	r3, [r7, #28]
 801166e:	f107 021c 	add.w	r2, r7, #28
 8011672:	f107 0310 	add.w	r3, r7, #16
 8011676:	4611      	mov	r1, r2
 8011678:	4618      	mov	r0, r3
 801167a:	f7fe fb63 	bl	800fd44 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d008      	beq.n	8011696 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8011684:	f107 0214 	add.w	r2, r7, #20
 8011688:	f107 0318 	add.w	r3, r7, #24
 801168c:	4619      	mov	r1, r3
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f000 faee 	bl	8011c70 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 8011694:	e025      	b.n	80116e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8011696:	f107 0310 	add.w	r3, r7, #16
 801169a:	4618      	mov	r0, r3
 801169c:	f000 f831 	bl	8011702 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80116a0:	68bc      	ldr	r4, [r7, #8]
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7ff fbf9 	bl	8010e9c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80116aa:	4603      	mov	r3, r0
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	4619      	mov	r1, r3
 80116b0:	4620      	mov	r0, r4
 80116b2:	f7fe fb76 	bl	800fda2 <_ZNKSt4lessIhEclERKhS2_>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d008      	beq.n	80116ce <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80116bc:	f107 0214 	add.w	r2, r7, #20
 80116c0:	f107 0318 	add.w	r3, r7, #24
 80116c4:	4619      	mov	r1, r3
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f000 fad2 	bl	8011c70 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 80116cc:	e009      	b.n	80116e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80116ce:	2300      	movs	r3, #0
 80116d0:	623b      	str	r3, [r7, #32]
 80116d2:	f107 0220 	add.w	r2, r7, #32
 80116d6:	f107 0310 	add.w	r3, r7, #16
 80116da:	4619      	mov	r1, r3
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff fe11 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	372c      	adds	r7, #44	; 0x2c
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd90      	pop	{r4, r7, pc}

080116ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80116ea:	b480      	push	{r7}
 80116ec:	b083      	sub	sp, #12
 80116ee:	af00      	add	r7, sp, #0
 80116f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	330c      	adds	r3, #12
 80116f6:	4618      	mov	r0, r3
 80116f8:	370c      	adds	r7, #12
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr

08011702 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8011702:	b580      	push	{r7, lr}
 8011704:	b082      	sub	sp, #8
 8011706:	af00      	add	r7, sp, #0
 8011708:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4618      	mov	r0, r3
 8011710:	f007 ff6d 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8011714:	4602      	mov	r2, r0
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	601a      	str	r2, [r3, #0]
	return *this;
 801171a:	687b      	ldr	r3, [r7, #4]
      }
 801171c:	4618      	mov	r0, r3
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4618      	mov	r0, r3
 8011732:	f007 ff5a 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8011736:	4602      	mov	r2, r0
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	601a      	str	r2, [r3, #0]
	return *this;
 801173c:	687b      	ldr	r3, [r7, #4]
      }
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr() const
 8011746:	b580      	push	{r7, lr}
 8011748:	b082      	sub	sp, #8
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	3310      	adds	r3, #16
 8011752:	4618      	mov	r0, r3
 8011754:	f000 faa5 	bl	8011ca2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 8011758:	4603      	mov	r3, r0
 801175a:	4618      	mov	r0, r3
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>:
      operator()(const _Pair& __x) const
 8011762:	b480      	push	{r7}
 8011764:	b083      	sub	sp, #12
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	4618      	mov	r0, r3
 8011770:	370c      	adds	r7, #12
 8011772:	46bd      	mov	sp, r7
 8011774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011778:	4770      	bx	lr

0801177a <_ZNSt11_Tuple_implILj0EJOtEEC1ItEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 801177a:	b590      	push	{r4, r7, lr}
 801177c:	b083      	sub	sp, #12
 801177e:	af00      	add	r7, sp, #0
 8011780:	6078      	str	r0, [r7, #4]
 8011782:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8011784:	687c      	ldr	r4, [r7, #4]
 8011786:	6838      	ldr	r0, [r7, #0]
 8011788:	f7ff fa58 	bl	8010c3c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 801178c:	4603      	mov	r3, r0
 801178e:	4619      	mov	r1, r3
 8011790:	4620      	mov	r0, r4
 8011792:	f000 fa92 	bl	8011cba <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	bd90      	pop	{r4, r7, pc}

080117a0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80117a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a4:	b086      	sub	sp, #24
 80117a6:	af02      	add	r7, sp, #8
 80117a8:	60f8      	str	r0, [r7, #12]
 80117aa:	60b9      	str	r1, [r7, #8]
 80117ac:	607a      	str	r2, [r7, #4]
 80117ae:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	4619      	mov	r1, r3
 80117b4:	202c      	movs	r0, #44	; 0x2c
 80117b6:	f7ef ff07 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80117ba:	68f8      	ldr	r0, [r7, #12]
 80117bc:	f000 f8da 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80117c0:	4604      	mov	r4, r0
 80117c2:	68b8      	ldr	r0, [r7, #8]
 80117c4:	f7fe fc2d 	bl	8010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 80117c8:	4605      	mov	r5, r0
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f7fe fdb6 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80117d0:	4606      	mov	r6, r0
 80117d2:	6838      	ldr	r0, [r7, #0]
 80117d4:	f7ff fa50 	bl	8010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80117d8:	4680      	mov	r8, r0
 80117da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117dc:	f7fe fdc4 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80117e0:	4603      	mov	r3, r0
 80117e2:	9300      	str	r3, [sp, #0]
 80117e4:	4643      	mov	r3, r8
 80117e6:	4632      	mov	r2, r6
 80117e8:	4629      	mov	r1, r5
 80117ea:	4620      	mov	r0, r4
 80117ec:	f000 faaf 	bl	8011d4e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOtEESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80117f0:	bf00      	nop
 80117f2:	3710      	adds	r7, #16
 80117f4:	46bd      	mov	sp, r7
 80117f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117fa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80117fa:	b480      	push	{r7}
 80117fc:	b083      	sub	sp, #12
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	4618      	mov	r0, r3
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4618      	mov	r0, r3
 801181c:	370c      	adds	r7, #12
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011826:	b480      	push	{r7}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4618      	mov	r0, r3
 8011832:	370c      	adds	r7, #12
 8011834:	46bd      	mov	sp, r7
 8011836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183a:	4770      	bx	lr

0801183c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801183c:	b480      	push	{r7}
 801183e:	b083      	sub	sp, #12
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4618      	mov	r0, r3
 8011848:	370c      	adds	r7, #12
 801184a:	46bd      	mov	sp, r7
 801184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011850:	4770      	bx	lr

08011852 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011852:	b480      	push	{r7}
 8011854:	b083      	sub	sp, #12
 8011856:	af00      	add	r7, sp, #0
 8011858:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	689b      	ldr	r3, [r3, #8]
 801185e:	4618      	mov	r0, r3
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr

0801186a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801186a:	b480      	push	{r7}
 801186c:	b083      	sub	sp, #12
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	4618      	mov	r0, r3
 8011878:	370c      	adds	r7, #12
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr

08011882 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8011882:	b480      	push	{r7}
 8011884:	b083      	sub	sp, #12
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	6039      	str	r1, [r7, #0]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4618      	mov	r0, r3
 8011890:	370c      	adds	r7, #12
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr

0801189a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801189a:	b580      	push	{r7, lr}
 801189c:	b084      	sub	sp, #16
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
 80118a2:	6039      	str	r1, [r7, #0]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	60fb      	str	r3, [r7, #12]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80118ac:	f7fc faa6 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d006      	beq.n	80118c4 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	4618      	mov	r0, r3
 80118bc:	f007 fe30 	bl	8019520 <_Znwj>
 80118c0:	4603      	mov	r3, r0
 80118c2:	e006      	b.n	80118d2 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80118c4:	2200      	movs	r2, #0
 80118c6:	68b9      	ldr	r1, [r7, #8]
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f000 fba5 	bl	8012018 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>
 80118ce:	4603      	mov	r3, r0
 80118d0:	bf00      	nop
      { return __a.allocate(__n); }
 80118d2:	4618      	mov	r0, r3
 80118d4:	3710      	adds	r7, #16
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd80      	pop	{r7, pc}

080118da <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 80118da:	b480      	push	{r7}
 80118dc:	b083      	sub	sp, #12
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 80118e2:	687b      	ldr	r3, [r7, #4]
    }
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4618      	mov	r0, r3
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8011906:	b580      	push	{r7, lr}
 8011908:	b082      	sub	sp, #8
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
 801190e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8011910:	6838      	ldr	r0, [r7, #0]
 8011912:	f000 fa38 	bl	8011d86 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>
	}
 8011916:	bf00      	nop
 8011918:	3708      	adds	r7, #8
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}

0801191e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801191e:	b580      	push	{r7, lr}
 8011920:	b088      	sub	sp, #32
 8011922:	af00      	add	r7, sp, #0
 8011924:	60f8      	str	r0, [r7, #12]
 8011926:	60b9      	str	r1, [r7, #8]
 8011928:	607a      	str	r2, [r7, #4]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	61fb      	str	r3, [r7, #28]
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	61bb      	str	r3, [r7, #24]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011936:	f7fc fa61 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d003      	beq.n	8011948 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8011940:	69b8      	ldr	r0, [r7, #24]
 8011942:	f007 fde9 	bl	8019518 <_ZdlPv>
	    return;
 8011946:	e005      	b.n	8011954 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011948:	697a      	ldr	r2, [r7, #20]
 801194a:	69b9      	ldr	r1, [r7, #24]
 801194c:	69f8      	ldr	r0, [r7, #28]
 801194e:	f000 fb82 	bl	8012056 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8011952:	bf00      	nop
 8011954:	bf00      	nop
 8011956:	3720      	adds	r7, #32
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801195c:	b480      	push	{r7}
 801195e:	b083      	sub	sp, #12
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	689b      	ldr	r3, [r3, #8]
 8011968:	4618      	mov	r0, r3
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4618      	mov	r0, r3
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801198a:	b580      	push	{r7, lr}
 801198c:	b084      	sub	sp, #16
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]
 8011992:	6039      	str	r1, [r7, #0]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	60fb      	str	r3, [r7, #12]
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801199c:	f7fc fa2e 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d008      	beq.n	80119b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	222c      	movs	r2, #44	; 0x2c
 80119aa:	fb02 f303 	mul.w	r3, r2, r3
 80119ae:	4618      	mov	r0, r3
 80119b0:	f007 fdb6 	bl	8019520 <_Znwj>
 80119b4:	4603      	mov	r3, r0
 80119b6:	e006      	b.n	80119c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80119b8:	2200      	movs	r2, #0
 80119ba:	68b9      	ldr	r1, [r7, #8]
 80119bc:	68f8      	ldr	r0, [r7, #12]
 80119be:	f000 fb5c 	bl	801207a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 80119c2:	4603      	mov	r3, r0
 80119c4:	bf00      	nop
      { return __a.allocate(__n); }
 80119c6:	4618      	mov	r0, r3
 80119c8:	3710      	adds	r7, #16
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b082      	sub	sp, #8
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	6039      	str	r1, [r7, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	683a      	ldr	r2, [r7, #0]
 80119dc:	4611      	mov	r1, r2
 80119de:	4618      	mov	r0, r3
 80119e0:	f000 f9db 	bl	8011d9a <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	4618      	mov	r0, r3
 80119e8:	3708      	adds	r7, #8
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80119ee:	b5b0      	push	{r4, r5, r7, lr}
 80119f0:	b088      	sub	sp, #32
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	60f8      	str	r0, [r7, #12]
 80119f6:	60b9      	str	r1, [r7, #8]
 80119f8:	607a      	str	r2, [r7, #4]
 80119fa:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f7fe fc9d 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7fe fca5 	bl	8010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	f107 0318 	add.w	r3, r7, #24
 8011a0e:	4611      	mov	r1, r2
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7ff ffdc 	bl	80119ce <_ZNSt5tupleIJRKtEEC1EOS2_>
 8011a16:	f107 0418 	add.w	r4, r7, #24
 8011a1a:	6838      	ldr	r0, [r7, #0]
 8011a1c:	f7fe fca4 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	4619      	mov	r1, r3
 8011a24:	201c      	movs	r0, #28
 8011a26:	f7ef fdcf 	bl	80015c8 <_ZnwjPv>
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	7f3b      	ldrb	r3, [r7, #28]
 8011a2e:	4622      	mov	r2, r4
 8011a30:	7d39      	ldrb	r1, [r7, #20]
 8011a32:	4628      	mov	r0, r5
 8011a34:	f000 f9ff 	bl	8011e36 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8011a38:	462b      	mov	r3, r5
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3720      	adds	r7, #32
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bdb0      	pop	{r4, r5, r7, pc}

08011a42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011a42:	b5b0      	push	{r4, r5, r7, lr}
 8011a44:	b084      	sub	sp, #16
 8011a46:	af00      	add	r7, sp, #0
 8011a48:	60f8      	str	r0, [r7, #12]
 8011a4a:	60b9      	str	r1, [r7, #8]
 8011a4c:	607a      	str	r2, [r7, #4]
 8011a4e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7fe fc73 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a56:	4604      	mov	r4, r0
 8011a58:	6838      	ldr	r0, [r7, #0]
 8011a5a:	f7fe fc7a 	bl	8010352 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011a5e:	4605      	mov	r5, r0
 8011a60:	6a38      	ldr	r0, [r7, #32]
 8011a62:	f7fe fc81 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a66:	4603      	mov	r3, r0
 8011a68:	462a      	mov	r2, r5
 8011a6a:	4621      	mov	r1, r4
 8011a6c:	68b8      	ldr	r0, [r7, #8]
 8011a6e:	f7ff ffbe 	bl	80119ee <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8011a72:	bf00      	nop
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bdb0      	pop	{r4, r5, r7, pc}

08011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011a7a:	b480      	push	{r7}
 8011a7c:	b083      	sub	sp, #12
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	4618      	mov	r0, r3
 8011a86:	370c      	adds	r7, #12
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr

08011a90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8011a9c:	68b8      	ldr	r0, [r7, #8]
 8011a9e:	f000 f9de 	bl	8011e5e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	601a      	str	r2, [r3, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f7ff ffe5 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	605a      	str	r2, [r3, #4]
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	4618      	mov	r0, r3
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f000 f9d2 	bl	8011e74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8011ae4:	6838      	ldr	r0, [r7, #0]
 8011ae6:	f000 f9d0 	bl	8011e8a <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 8011aea:	bf00      	nop
 8011aec:	3708      	adds	r7, #8
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b088      	sub	sp, #32
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	60f8      	str	r0, [r7, #12]
 8011afa:	60b9      	str	r1, [r7, #8]
 8011afc:	607a      	str	r2, [r7, #4]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	61fb      	str	r3, [r7, #28]
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	61bb      	str	r3, [r7, #24]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011b0a:	f7fc f977 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d003      	beq.n	8011b1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8011b14:	69b8      	ldr	r0, [r7, #24]
 8011b16:	f007 fcff 	bl	8019518 <_ZdlPv>
	    return;
 8011b1a:	e005      	b.n	8011b28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	69b9      	ldr	r1, [r7, #24]
 8011b20:	69f8      	ldr	r0, [r7, #28]
 8011b22:	f000 faf0 	bl	8012106 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8011b26:	bf00      	nop
 8011b28:	bf00      	nop
 8011b2a:	3720      	adds	r7, #32
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011b30:	b480      	push	{r7}
 8011b32:	b083      	sub	sp, #12
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	370c      	adds	r7, #12
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr

08011b46 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() noexcept
 8011b46:	b480      	push	{r7}
 8011b48:	b083      	sub	sp, #12
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	4618      	mov	r0, r3
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr

08011b5c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b084      	sub	sp, #16
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	6039      	str	r1, [r7, #0]
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	60fb      	str	r3, [r7, #12]
 8011b6a:	683b      	ldr	r3, [r7, #0]
 8011b6c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8011b6e:	f7fc f945 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d009      	beq.n	8011b8c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011b78:	68ba      	ldr	r2, [r7, #8]
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	1a9b      	subs	r3, r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	4618      	mov	r0, r3
 8011b84:	f007 fccc 	bl	8019520 <_Znwj>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	e006      	b.n	8011b9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	68b9      	ldr	r1, [r7, #8]
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f000 fac9 	bl	8012128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>
 8011b96:	4603      	mov	r3, r0
 8011b98:	bf00      	nop
      { return __a.allocate(__n); }
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3710      	adds	r7, #16
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <_ZNSt5tupleIJRKhEEC1EOS2_>:
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	6039      	str	r1, [r7, #0]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	683a      	ldr	r2, [r7, #0]
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f000 f983 	bl	8011ebe <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011bc2:	b5b0      	push	{r4, r5, r7, lr}
 8011bc4:	b088      	sub	sp, #32
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
 8011bce:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011bd0:	68b8      	ldr	r0, [r7, #8]
 8011bd2:	f7fe fbb3 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7fe fe80 	bl	80108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011bdc:	4602      	mov	r2, r0
 8011bde:	f107 0318 	add.w	r3, r7, #24
 8011be2:	4611      	mov	r1, r2
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7ff ffdc 	bl	8011ba2 <_ZNSt5tupleIJRKhEEC1EOS2_>
 8011bea:	f107 0418 	add.w	r4, r7, #24
 8011bee:	6838      	ldr	r0, [r7, #0]
 8011bf0:	f7fe fbba 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	200c      	movs	r0, #12
 8011bfa:	f7ef fce5 	bl	80015c8 <_ZnwjPv>
 8011bfe:	4605      	mov	r5, r0
 8011c00:	7f3b      	ldrb	r3, [r7, #28]
 8011c02:	4622      	mov	r2, r4
 8011c04:	7d39      	ldrb	r1, [r7, #20]
 8011c06:	4628      	mov	r0, r5
 8011c08:	f000 f98c 	bl	8011f24 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8011c0c:	462b      	mov	r3, r5
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3720      	adds	r7, #32
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bdb0      	pop	{r4, r5, r7, pc}

08011c16 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011c16:	b5b0      	push	{r4, r5, r7, lr}
 8011c18:	b084      	sub	sp, #16
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	60f8      	str	r0, [r7, #12]
 8011c1e:	60b9      	str	r1, [r7, #8]
 8011c20:	607a      	str	r2, [r7, #4]
 8011c22:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7fe fb89 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	6838      	ldr	r0, [r7, #0]
 8011c2e:	f7fe fe55 	bl	80108dc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011c32:	4605      	mov	r5, r0
 8011c34:	6a38      	ldr	r0, [r7, #32]
 8011c36:	f7fe fb97 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	462a      	mov	r2, r5
 8011c3e:	4621      	mov	r1, r4
 8011c40:	68b8      	ldr	r0, [r7, #8]
 8011c42:	f7ff ffbe 	bl	8011bc2 <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8011c46:	bf00      	nop
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bdb0      	pop	{r4, r5, r7, pc}

08011c4e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011c4e:	b580      	push	{r7, lr}
 8011c50:	b084      	sub	sp, #16
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	68da      	ldr	r2, [r3, #12]
 8011c5a:	f107 030c 	add.w	r3, r7, #12
 8011c5e:	4611      	mov	r1, r2
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe ffdc 	bl	8010c1e <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	60f8      	str	r0, [r7, #12]
 8011c78:	60b9      	str	r1, [r7, #8]
 8011c7a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8011c7c:	68b8      	ldr	r0, [r7, #8]
 8011c7e:	f000 f965 	bl	8011f4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8011c82:	4603      	mov	r3, r0
 8011c84:	681a      	ldr	r2, [r3, #0]
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	601a      	str	r2, [r3, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f7ff fef5 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c90:	4603      	mov	r3, r0
 8011c92:	681a      	ldr	r2, [r3, #0]
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	605a      	str	r2, [r3, #4]
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3710      	adds	r7, #16
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8011ca2:	b580      	push	{r7, lr}
 8011ca4:	b082      	sub	sp, #8
 8011ca6:	af00      	add	r7, sp, #0
 8011ca8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f000 f959 	bl	8011f62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3708      	adds	r7, #8
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b082      	sub	sp, #8
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
 8011cc2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8011cc4:	6838      	ldr	r0, [r7, #0]
 8011cc6:	f7fe ffb9 	bl	8010c3c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <_ZNSt5tupleIJOtEEC1EOS1_>:
      constexpr tuple(tuple&&) = default;
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b082      	sub	sp, #8
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
 8011ce2:	6039      	str	r1, [r7, #0]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	4611      	mov	r1, r2
 8011cea:	4618      	mov	r0, r3
 8011cec:	f000 f944 	bl	8011f78 <_ZNSt11_Tuple_implILj0EJOtEEC1EOS1_>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3708      	adds	r7, #8
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}

08011cfa <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOtEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011cfa:	b5b0      	push	{r4, r5, r7, lr}
 8011cfc:	b088      	sub	sp, #32
 8011cfe:	af00      	add	r7, sp, #0
 8011d00:	60f8      	str	r0, [r7, #12]
 8011d02:	60b9      	str	r1, [r7, #8]
 8011d04:	607a      	str	r2, [r7, #4]
 8011d06:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011d08:	68b8      	ldr	r0, [r7, #8]
 8011d0a:	f7fe fb17 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7fe ffb2 	bl	8010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d14:	4602      	mov	r2, r0
 8011d16:	f107 0318 	add.w	r3, r7, #24
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7ff ffdc 	bl	8011cda <_ZNSt5tupleIJOtEEC1EOS1_>
 8011d22:	f107 0418 	add.w	r4, r7, #24
 8011d26:	6838      	ldr	r0, [r7, #0]
 8011d28:	f7fe fb1e 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	201c      	movs	r0, #28
 8011d32:	f7ef fc49 	bl	80015c8 <_ZnwjPv>
 8011d36:	4605      	mov	r5, r0
 8011d38:	7f3b      	ldrb	r3, [r7, #28]
 8011d3a:	4622      	mov	r2, r4
 8011d3c:	7d39      	ldrb	r1, [r7, #20]
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f000 f956 	bl	8011ff0 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8011d44:	462b      	mov	r3, r5
 8011d46:	4618      	mov	r0, r3
 8011d48:	3720      	adds	r7, #32
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bdb0      	pop	{r4, r5, r7, pc}

08011d4e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOtEESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011d4e:	b5b0      	push	{r4, r5, r7, lr}
 8011d50:	b084      	sub	sp, #16
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	60f8      	str	r0, [r7, #12]
 8011d56:	60b9      	str	r1, [r7, #8]
 8011d58:	607a      	str	r2, [r7, #4]
 8011d5a:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7fe faed 	bl	801033c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d62:	4604      	mov	r4, r0
 8011d64:	6838      	ldr	r0, [r7, #0]
 8011d66:	f7fe ff87 	bl	8010c78 <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d6a:	4605      	mov	r5, r0
 8011d6c:	6a38      	ldr	r0, [r7, #32]
 8011d6e:	f7fe fafb 	bl	8010368 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011d72:	4603      	mov	r3, r0
 8011d74:	462a      	mov	r2, r5
 8011d76:	4621      	mov	r1, r4
 8011d78:	68b8      	ldr	r0, [r7, #8]
 8011d7a:	f7ff ffbe 	bl	8011cfa <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOtEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8011d7e:	bf00      	nop
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bdb0      	pop	{r4, r5, r7, pc}

08011d86 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8011d86:	b480      	push	{r7}
 8011d88:	b083      	sub	sp, #12
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
    }
 8011d8e:	bf00      	nop
 8011d90:	370c      	adds	r7, #12
 8011d92:	46bd      	mov	sp, r7
 8011d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d98:	4770      	bx	lr

08011d9a <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011d9a:	b590      	push	{r4, r7, lr}
 8011d9c:	b083      	sub	sp, #12
 8011d9e:	af00      	add	r7, sp, #0
 8011da0:	6078      	str	r0, [r7, #4]
 8011da2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8011da4:	687c      	ldr	r4, [r7, #4]
 8011da6:	6838      	ldr	r0, [r7, #0]
 8011da8:	f000 f988 	bl	80120bc <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8011dac:	4603      	mov	r3, r0
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 f991 	bl	80120d6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8011db4:	4603      	mov	r3, r0
 8011db6:	4619      	mov	r1, r3
 8011db8:	4620      	mov	r0, r4
 8011dba:	f7ff f950 	bl	801105e <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd90      	pop	{r4, r7, pc}

08011dc8 <_ZN17ExternalInterrupt8InstanceC1Ev>:
	public:
		IRQn_Type interrupt_request_number;
		function<void()> action = nullptr;
		bool is_on = true;

		Instance() = default;
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b082      	sub	sp, #8
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	3304      	adds	r3, #4
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fd faa0 	bl	800f31c <_ZNSt8functionIFvvEEC1EDn>
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2201      	movs	r2, #1
 8011de0:	751a      	strb	r2, [r3, #20]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4618      	mov	r0, r3
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	60f8      	str	r0, [r7, #12]
 8011df4:	60b9      	str	r1, [r7, #8]
 8011df6:	607a      	str	r2, [r7, #4]
 8011df8:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8011dfa:	68b8      	ldr	r0, [r7, #8]
 8011dfc:	f000 f976 	bl	80120ec <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8011e00:	4603      	mov	r3, r0
 8011e02:	4618      	mov	r0, r3
 8011e04:	f000 f967 	bl	80120d6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8011e08:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8011e0a:	881a      	ldrh	r2, [r3, #0]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	801a      	strh	r2, [r3, #0]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	3304      	adds	r3, #4
 8011e14:	2200      	movs	r2, #0
 8011e16:	601a      	str	r2, [r3, #0]
 8011e18:	605a      	str	r2, [r3, #4]
 8011e1a:	609a      	str	r2, [r3, #8]
 8011e1c:	60da      	str	r2, [r3, #12]
 8011e1e:	611a      	str	r2, [r3, #16]
 8011e20:	615a      	str	r2, [r3, #20]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	3304      	adds	r3, #4
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7ff ffce 	bl	8011dc8 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8011e36:	b5b0      	push	{r4, r5, r7, lr}
 8011e38:	b086      	sub	sp, #24
 8011e3a:	af02      	add	r7, sp, #8
 8011e3c:	60f8      	str	r0, [r7, #12]
 8011e3e:	7239      	strb	r1, [r7, #8]
 8011e40:	607a      	str	r2, [r7, #4]
 8011e42:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8011e44:	463a      	mov	r2, r7
 8011e46:	f88d 4000 	strb.w	r4, [sp]
 8011e4a:	462b      	mov	r3, r5
 8011e4c:	6879      	ldr	r1, [r7, #4]
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff ffcc 	bl	8011dec <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	4618      	mov	r0, r3
 8011e58:	3710      	adds	r7, #16
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bdb0      	pop	{r4, r5, r7, pc}

08011e5e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011e5e:	b480      	push	{r7}
 8011e60:	b083      	sub	sp, #12
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	370c      	adds	r7, #12
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8011e74:	b480      	push	{r7}
 8011e76:	b083      	sub	sp, #12
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	370c      	adds	r7, #12
 8011e82:	46bd      	mov	sp, r7
 8011e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e88:	4770      	bx	lr

08011e8a <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8011e8a:	b580      	push	{r7, lr}
 8011e8c:	b082      	sub	sp, #8
 8011e8e:	af00      	add	r7, sp, #0
 8011e90:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f7fd f9bb 	bl	800f20e <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 8011e98:	bf00      	nop
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	00db      	lsls	r3, r3, #3
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	68b8      	ldr	r0, [r7, #8]
 8011eb4:	f007 fb32 	bl	801951c <_ZdlPvj>
      }
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011ebe:	b590      	push	{r4, r7, lr}
 8011ec0:	b083      	sub	sp, #12
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]
 8011ec6:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8011ec8:	687c      	ldr	r4, [r7, #4]
 8011eca:	6838      	ldr	r0, [r7, #0]
 8011ecc:	f000 f94e 	bl	801216c <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7ff f820 	bl	8010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	4619      	mov	r1, r3
 8011edc:	4620      	mov	r0, r4
 8011ede:	f7ff fb09 	bl	80114f4 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd90      	pop	{r4, r7, pc}

08011eec <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
 8011ef8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8011efa:	68b8      	ldr	r0, [r7, #8]
 8011efc:	f000 f943 	bl	8012186 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8011f00:	4603      	mov	r3, r0
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ff f808 	bl	8010f18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011f08:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8011f0a:	781a      	ldrb	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	701a      	strb	r2, [r3, #0]
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	3304      	adds	r3, #4
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7fb ff8d 	bl	800de34 <_ZN3PinC1Ev>
      { }
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8011f24:	b5b0      	push	{r4, r5, r7, lr}
 8011f26:	b086      	sub	sp, #24
 8011f28:	af02      	add	r7, sp, #8
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	7239      	strb	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
 8011f30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8011f32:	463a      	mov	r2, r7
 8011f34:	f88d 4000 	strb.w	r4, [sp]
 8011f38:	462b      	mov	r3, r5
 8011f3a:	6879      	ldr	r1, [r7, #4]
 8011f3c:	68f8      	ldr	r0, [r7, #12]
 8011f3e:	f7ff ffd5 	bl	8011eec <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	4618      	mov	r0, r3
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bdb0      	pop	{r4, r5, r7, pc}

08011f4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	4618      	mov	r0, r3
 8011f58:	370c      	adds	r7, #12
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr

08011f62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() const noexcept
 8011f62:	b480      	push	{r7}
 8011f64:	b083      	sub	sp, #12
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	370c      	adds	r7, #12
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <_ZNSt11_Tuple_implILj0EJOtEEC1EOS1_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8011f78:	b590      	push	{r4, r7, lr}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8011f82:	687c      	ldr	r4, [r7, #4]
 8011f84:	6838      	ldr	r0, [r7, #0]
 8011f86:	f000 f90b 	bl	80121a0 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f000 f914 	bl	80121ba <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>
 8011f92:	4603      	mov	r3, r0
 8011f94:	4619      	mov	r1, r3
 8011f96:	4620      	mov	r0, r4
 8011f98:	f7ff fe8f 	bl	8011cba <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	370c      	adds	r7, #12
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd90      	pop	{r4, r7, pc}

08011fa6 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b084      	sub	sp, #16
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	60f8      	str	r0, [r7, #12]
 8011fae:	60b9      	str	r1, [r7, #8]
 8011fb0:	607a      	str	r2, [r7, #4]
 8011fb2:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8011fb4:	68b8      	ldr	r0, [r7, #8]
 8011fb6:	f000 f90b 	bl	80121d0 <_ZSt3getILj0EJOtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f000 f8fc 	bl	80121ba <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>
 8011fc2:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8011fc4:	881a      	ldrh	r2, [r3, #0]
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	801a      	strh	r2, [r3, #0]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	3304      	adds	r3, #4
 8011fce:	2200      	movs	r2, #0
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	605a      	str	r2, [r3, #4]
 8011fd4:	609a      	str	r2, [r3, #8]
 8011fd6:	60da      	str	r2, [r3, #12]
 8011fd8:	611a      	str	r2, [r3, #16]
 8011fda:	615a      	str	r2, [r3, #20]
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3304      	adds	r3, #4
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff fef1 	bl	8011dc8 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8011ff0:	b5b0      	push	{r4, r5, r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af02      	add	r7, sp, #8
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	7239      	strb	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
 8011ffc:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8011ffe:	463a      	mov	r2, r7
 8012000:	f88d 4000 	strb.w	r4, [sp]
 8012004:	462b      	mov	r3, r5
 8012006:	6879      	ldr	r1, [r7, #4]
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f7ff ffcc 	bl	8011fa6 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	4618      	mov	r0, r3
 8012012:	3710      	adds	r7, #16
 8012014:	46bd      	mov	sp, r7
 8012016:	bdb0      	pop	{r4, r5, r7, pc}

08012018 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	60f8      	str	r0, [r7, #12]
 8012020:	60b9      	str	r1, [r7, #8]
 8012022:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f000 f8e0 	bl	80121ea <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>
 801202a:	4602      	mov	r2, r0
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	4293      	cmp	r3, r2
 8012030:	bf8c      	ite	hi
 8012032:	2301      	movhi	r3, #1
 8012034:	2300      	movls	r3, #0
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b00      	cmp	r3, #0
 801203a:	d001      	beq.n	8012040 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801203c:	f007 fb34 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	4618      	mov	r0, r3
 8012046:	f007 fa6b 	bl	8019520 <_Znwj>
 801204a:	4603      	mov	r3, r0
 801204c:	bf00      	nop
      }
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}

08012056 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8012056:	b580      	push	{r7, lr}
 8012058:	b084      	sub	sp, #16
 801205a:	af00      	add	r7, sp, #0
 801205c:	60f8      	str	r0, [r7, #12]
 801205e:	60b9      	str	r1, [r7, #8]
 8012060:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	4613      	mov	r3, r2
 8012066:	00db      	lsls	r3, r3, #3
 8012068:	1a9b      	subs	r3, r3, r2
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4619      	mov	r1, r3
 801206e:	68b8      	ldr	r0, [r7, #8]
 8012070:	f007 fa54 	bl	801951c <_ZdlPvj>
      }
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}

0801207a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801207a:	b580      	push	{r7, lr}
 801207c:	b084      	sub	sp, #16
 801207e:	af00      	add	r7, sp, #0
 8012080:	60f8      	str	r0, [r7, #12]
 8012082:	60b9      	str	r1, [r7, #8]
 8012084:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f000 f8bc 	bl	8012204 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 801208c:	4602      	mov	r2, r0
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	4293      	cmp	r3, r2
 8012092:	bf8c      	ite	hi
 8012094:	2301      	movhi	r3, #1
 8012096:	2300      	movls	r3, #0
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d001      	beq.n	80120a2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801209e:	f007 fb03 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80120a2:	68bb      	ldr	r3, [r7, #8]
 80120a4:	222c      	movs	r2, #44	; 0x2c
 80120a6:	fb02 f303 	mul.w	r3, r2, r3
 80120aa:	4618      	mov	r0, r3
 80120ac:	f007 fa38 	bl	8019520 <_Znwj>
 80120b0:	4603      	mov	r3, r0
 80120b2:	bf00      	nop
      }
 80120b4:	4618      	mov	r0, r3
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}

080120bc <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 f8aa 	bl	8012220 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 80120cc:	4603      	mov	r3, r0
 80120ce:	4618      	mov	r0, r3
 80120d0:	3708      	adds	r7, #8
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80120d6:	b480      	push	{r7}
 80120d8:	b083      	sub	sp, #12
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4618      	mov	r0, r3
 80120e2:	370c      	adds	r7, #12
 80120e4:	46bd      	mov	sp, r7
 80120e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ea:	4770      	bx	lr

080120ec <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f000 f89e 	bl	8012238 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80120fc:	4603      	mov	r3, r0
 80120fe:	4618      	mov	r0, r3
 8012100:	3708      	adds	r7, #8
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8012106:	b580      	push	{r7, lr}
 8012108:	b084      	sub	sp, #16
 801210a:	af00      	add	r7, sp, #0
 801210c:	60f8      	str	r0, [r7, #12]
 801210e:	60b9      	str	r1, [r7, #8]
 8012110:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	222c      	movs	r2, #44	; 0x2c
 8012116:	fb02 f303 	mul.w	r3, r2, r3
 801211a:	4619      	mov	r1, r3
 801211c:	68b8      	ldr	r0, [r7, #8]
 801211e:	f007 f9fd 	bl	801951c <_ZdlPvj>
      }
 8012122:	3710      	adds	r7, #16
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af00      	add	r7, sp, #0
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8012134:	68f8      	ldr	r0, [r7, #12]
 8012136:	f000 f88b 	bl	8012250 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>
 801213a:	4602      	mov	r2, r0
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	4293      	cmp	r3, r2
 8012140:	bf8c      	ite	hi
 8012142:	2301      	movhi	r3, #1
 8012144:	2300      	movls	r3, #0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	d001      	beq.n	8012150 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801214c:	f007 faac 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	4613      	mov	r3, r2
 8012154:	00db      	lsls	r3, r3, #3
 8012156:	1a9b      	subs	r3, r3, r2
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	4618      	mov	r0, r3
 801215c:	f007 f9e0 	bl	8019520 <_Znwj>
 8012160:	4603      	mov	r3, r0
 8012162:	bf00      	nop
      }
 8012164:	4618      	mov	r0, r3
 8012166:	3710      	adds	r7, #16
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	4618      	mov	r0, r3
 8012178:	f000 f878 	bl	801226c <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 801217c:	4603      	mov	r3, r0
 801217e:	4618      	mov	r0, r3
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}

08012186 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8012186:	b580      	push	{r7, lr}
 8012188:	b082      	sub	sp, #8
 801218a:	af00      	add	r7, sp, #0
 801218c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4618      	mov	r0, r3
 8012192:	f000 f877 	bl	8012284 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8012196:	4603      	mov	r3, r0
 8012198:	4618      	mov	r0, r3
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f000 f876 	bl	801229c <_ZNSt10_Head_baseILj0EOtLb0EE7_M_headERS1_>
 80121b0:	4603      	mov	r3, r0
 80121b2:	4618      	mov	r0, r3
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	4618      	mov	r0, r3
 80121c6:	370c      	adds	r7, #12
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <_ZSt3getILj0EJOtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>:
    get(tuple<_Elements...>& __t) noexcept
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f000 f86a 	bl	80122b4 <_ZSt12__get_helperILj0EOtJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 80121e0:	4603      	mov	r3, r0
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80121ea:	b480      	push	{r7}
 80121ec:	b083      	sub	sp, #12
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80121f2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 80121f6:	4618      	mov	r0, r3
 80121f8:	370c      	adds	r7, #12
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr
	...

08012204 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801220c:	4b03      	ldr	r3, [pc, #12]	; (801221c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 801220e:	4618      	mov	r0, r3
 8012210:	370c      	adds	r7, #12
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	02e8ba2e 	.word	0x02e8ba2e

08012220 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	4618      	mov	r0, r3
 801222e:	370c      	adds	r7, #12
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012238:	b580      	push	{r7, lr}
 801223a:	b082      	sub	sp, #8
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7ff ff3b 	bl	80120bc <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8012246:	4603      	mov	r3, r0
 8012248:	4618      	mov	r0, r3
 801224a:	3708      	adds	r7, #8
 801224c:	46bd      	mov	sp, r7
 801224e:	bd80      	pop	{r7, pc}

08012250 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8012250:	b480      	push	{r7}
 8012252:	b083      	sub	sp, #12
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8012258:	4b03      	ldr	r3, [pc, #12]	; (8012268 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv+0x18>)
      }
 801225a:	4618      	mov	r0, r3
 801225c:	370c      	adds	r7, #12
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr
 8012266:	bf00      	nop
 8012268:	04924924 	.word	0x04924924

0801226c <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff ff6d 	bl	801216c <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 8012292:	4603      	mov	r3, r0
 8012294:	4618      	mov	r0, r3
 8012296:	3708      	adds	r7, #8
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <_ZNSt10_Head_baseILj0EOtLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4618      	mov	r0, r3
 80122aa:	370c      	adds	r7, #12
 80122ac:	46bd      	mov	sp, r7
 80122ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b2:	4770      	bx	lr

080122b4 <_ZSt12__get_helperILj0EOtJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff6f 	bl	80121a0 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>
 80122c2:	4603      	mov	r3, r0
 80122c4:	4618      	mov	r0, r3
 80122c6:	3708      	adds	r7, #8
 80122c8:	46bd      	mov	sp, r7
 80122ca:	bd80      	pop	{r7, pc}

080122cc <_Z41__static_initialization_and_destruction_0ii>:
		return nullopt; //TODO: error handler
	}

	Pin& pin = service_ids[id];
	return HAL_GPIO_ReadPin(GPIO_PORT, pin.gpio_pin);
}
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b0c6      	sub	sp, #280	; 0x118
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122da:	6018      	str	r0, [r3, #0]
 80122dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80122e4:	6019      	str	r1, [r3, #0]
 80122e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d142      	bne.n	801237a <_Z41__static_initialization_and_destruction_0ii+0xae>
 80122f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80122f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012302:	4293      	cmp	r3, r2
 8012304:	d139      	bne.n	801237a <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8012306:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801230a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230e:	4a28      	ldr	r2, [pc, #160]	; (80123b0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8012310:	4618      	mov	r0, r3
 8012312:	4611      	mov	r1, r2
 8012314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012318:	461a      	mov	r2, r3
 801231a:	f007 fa19 	bl	8019750 <memcpy>
 801231e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012326:	f107 0214 	add.w	r2, r7, #20
 801232a:	601a      	str	r2, [r3, #0]
 801232c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012338:	605a      	str	r2, [r3, #4]
 801233a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801233e:	4618      	mov	r0, r3
 8012340:	f7fc fffa 	bl	800f338 <_ZNSaIhEC1Ev>
 8012344:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8012348:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801234c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012350:	ca06      	ldmia	r2, {r1, r2}
 8012352:	4818      	ldr	r0, [pc, #96]	; (80123b4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8012354:	f7fd f807 	bl	800f366 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8012358:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801235c:	4618      	mov	r0, r3
 801235e:	f7fc fff7 	bl	800f350 <_ZNSaIhED1Ev>
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
 8012362:	4b15      	ldr	r3, [pc, #84]	; (80123b8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8012364:	461a      	mov	r2, r3
 8012366:	2300      	movs	r3, #0
 8012368:	6013      	str	r3, [r2, #0]
 801236a:	6053      	str	r3, [r2, #4]
 801236c:	6093      	str	r3, [r2, #8]
 801236e:	60d3      	str	r3, [r2, #12]
 8012370:	6113      	str	r3, [r2, #16]
 8012372:	6153      	str	r3, [r2, #20]
 8012374:	4810      	ldr	r0, [pc, #64]	; (80123b8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8012376:	f7fc fe5e 	bl	800f036 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 801237a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801237e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d10e      	bne.n	80123a6 <_Z41__static_initialization_and_destruction_0ii+0xda>
 8012388:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801238c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012396:	4293      	cmp	r3, r2
 8012398:	d105      	bne.n	80123a6 <_Z41__static_initialization_and_destruction_0ii+0xda>
 801239a:	4807      	ldr	r0, [pc, #28]	; (80123b8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801239c:	f7fc fe58 	bl	800f050 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80123a0:	4804      	ldr	r0, [pc, #16]	; (80123b4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80123a2:	f7fd f80e 	bl	800f3c2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 80123a6:	bf00      	nop
 80123a8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd80      	pop	{r7, pc}
 80123b0:	08019c84 	.word	0x08019c84
 80123b4:	24000f90 	.word	0x24000f90
 80123b8:	24000f94 	.word	0x24000f94

080123bc <_GLOBAL__sub_I__ZN17ExternalInterrupt10id_managerE>:
 80123bc:	b580      	push	{r7, lr}
 80123be:	af00      	add	r7, sp, #0
 80123c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80123c4:	2001      	movs	r0, #1
 80123c6:	f7ff ff81 	bl	80122cc <_Z41__static_initialization_and_destruction_0ii>
 80123ca:	bd80      	pop	{r7, pc}

080123cc <_GLOBAL__sub_D__ZN17ExternalInterrupt10id_managerE>:
 80123cc:	b580      	push	{r7, lr}
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80123d4:	2000      	movs	r0, #0
 80123d6:	f7ff ff79 	bl	80122cc <_Z41__static_initialization_and_destruction_0ii>
 80123da:	bd80      	pop	{r7, pc}

080123dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80123dc:	b480      	push	{r7}
 80123de:	b083      	sub	sp, #12
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	4618      	mov	r0, r3
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	7138      	strb	r0, [r7, #4]
 80123fc:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 80123fe:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	bf0c      	ite	eq
 8012406:	2301      	moveq	r3, #1
 8012408:	2300      	movne	r3, #0
 801240a:	b2db      	uxtb	r3, r3
 801240c:	4618      	mov	r0, r3
 801240e:	370c      	adds	r7, #12
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	7138      	strb	r0, [r7, #4]
 8012420:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8012422:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8012426:	b2db      	uxtb	r3, r3
 8012428:	09db      	lsrs	r3, r3, #7
 801242a:	b2db      	uxtb	r3, r3
 801242c:	4618      	mov	r0, r3
 801242e:	370c      	adds	r7, #12
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr

08012438 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8012438:	b580      	push	{r7, lr}
 801243a:	b082      	sub	sp, #8
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 f91d 	bl	8012680 <_ZNSaImED1Ev>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      _Vector_base() = default;
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	f000 f900 	bl	8012660 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	4618      	mov	r0, r3
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}

0801246a <_ZNSt6vectorImSaImEEC1Ev>:
      vector() = default;
 801246a:	b580      	push	{r7, lr}
 801246c:	b082      	sub	sp, #8
 801246e:	af00      	add	r7, sp, #0
 8012470:	6078      	str	r0, [r7, #4]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	4618      	mov	r0, r3
 8012476:	f7ff ffeb 	bl	8012450 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	4618      	mov	r0, r3
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 8012484:	b480      	push	{r7}
 8012486:	b083      	sub	sp, #12
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	429a      	cmp	r2, r3
 8012498:	d109      	bne.n	80124ae <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	889a      	ldrh	r2, [r3, #4]
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	889b      	ldrh	r3, [r3, #4]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	bf34      	ite	cc
 80124a6:	2301      	movcc	r3, #1
 80124a8:	2300      	movcs	r3, #0
 80124aa:	b2db      	uxtb	r3, r3
 80124ac:	e008      	b.n	80124c0 <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	429a      	cmp	r2, r3
 80124b8:	bf34      	ite	cc
 80124ba:	2301      	movcc	r3, #1
 80124bc:	2300      	movcs	r3, #0
 80124be:	b2db      	uxtb	r3, r3
	}
 80124c0:	4618      	mov	r0, r3
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>:
public:
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_HandleTypeDef* handle, uint16_t period) : handle(handle), period(period) {};
 80124cc:	b480      	push	{r7}
 80124ce:	b085      	sub	sp, #20
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	60f8      	str	r0, [r7, #12]
 80124d4:	60b9      	str	r1, [r7, #8]
 80124d6:	4613      	mov	r3, r2
 80124d8:	80fb      	strh	r3, [r7, #6]
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	68ba      	ldr	r2, [r7, #8]
 80124de:	601a      	str	r2, [r3, #0]
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	88fa      	ldrh	r2, [r7, #6]
 80124e4:	809a      	strh	r2, [r3, #4]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	4618      	mov	r0, r3
 80124ea:	3714      	adds	r7, #20
 80124ec:	46bd      	mov	sp, r7
 80124ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f2:	4770      	bx	lr

080124f4 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	4618      	mov	r0, r3
 8012500:	f000 f984 	bl	801280c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4618      	mov	r0, r3
 8012508:	3708      	adds	r7, #8
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}

0801250e <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 801250e:	b580      	push	{r7, lr}
 8012510:	b084      	sub	sp, #16
 8012512:	af00      	add	r7, sp, #0
 8012514:	60f8      	str	r0, [r7, #12]
 8012516:	60b9      	str	r1, [r7, #8]
 8012518:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 801251a:	68b8      	ldr	r0, [r7, #8]
 801251c:	f000 f812 	bl	8012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012520:	4602      	mov	r2, r0
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012528:	e883 0003 	stmia.w	r3, {r0, r1}
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	687a      	ldr	r2, [r7, #4]
 8012530:	3308      	adds	r3, #8
 8012532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012536:	e883 0003 	stmia.w	r3, {r0, r1}
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	4618      	mov	r0, r3
 801253e:	3710      	adds	r7, #16
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012544:	b480      	push	{r7}
 8012546:	b083      	sub	sp, #12
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4618      	mov	r0, r3
 8012550:	370c      	adds	r7, #12
 8012552:	46bd      	mov	sp, r7
 8012554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012558:	4770      	bx	lr

0801255a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>:
 801255a:	b580      	push	{r7, lr}
 801255c:	b082      	sub	sp, #8
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	4618      	mov	r0, r3
 8012566:	f000 f9ad 	bl	80128c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8012574:	b580      	push	{r7, lr}
 8012576:	b082      	sub	sp, #8
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f000 f9cb 	bl	8012918 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	4618      	mov	r0, r3
 8012598:	f000 f9a9 	bl	80128ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	3708      	adds	r7, #8
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>:
      map() = default;
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff ffeb 	bl	801258c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4618      	mov	r0, r3
 80125ba:	3708      	adds	r7, #8
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>:
      ~map() = default;
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b082      	sub	sp, #8
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f000 fa1b 	bl	8012a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f000 fa98 	bl	8012b1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	4618      	mov	r0, r3
 80125ee:	3708      	adds	r7, #8
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <_ZN3ADC8InitDataD1Ev>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	330c      	adds	r3, #12
 8012600:	4618      	mov	r0, r3
 8012602:	f000 f861 	bl	80126c8 <_ZNSt6vectorImSaImEED1Ev>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	3310      	adds	r3, #16
 801261c:	4618      	mov	r0, r3
 801261e:	f7ff ffe9 	bl	80125f4 <_ZN3ADC8InitDataD1Ev>
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	4618      	mov	r0, r3
 8012626:	3708      	adds	r7, #8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}

0801262c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 801262c:	b580      	push	{r7, lr}
 801262e:	b082      	sub	sp, #8
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4618      	mov	r0, r3
 8012638:	f000 faf4 	bl	8012c24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4618      	mov	r0, r3
 8012640:	3708      	adds	r7, #8
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}

08012646 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
 8012646:	b580      	push	{r7, lr}
 8012648:	b082      	sub	sp, #8
 801264a:	af00      	add	r7, sp, #0
 801264c:	6078      	str	r0, [r7, #4]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	4618      	mov	r0, r3
 8012652:	f000 fb91 	bl	8012d78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	4618      	mov	r0, r3
 801265a:	3708      	adds	r7, #8
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	f000 fb9a 	bl	8012da2 <_ZNSaImEC1Ev>
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	f000 fba2 	bl	8012dba <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4618      	mov	r0, r3
 801268c:	370c      	adds	r7, #12
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr

08012696 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012696:	b580      	push	{r7, lr}
 8012698:	b082      	sub	sp, #8
 801269a:	af00      	add	r7, sp, #0
 801269c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	689a      	ldr	r2, [r3, #8]
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	1ad3      	subs	r3, r2, r3
 80126ac:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80126ae:	461a      	mov	r2, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 fb96 	bl	8012de2 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7ff febd 	bl	8012438 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	4618      	mov	r0, r3
 80126c2:	3708      	adds	r7, #8
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80126c8:	b5b0      	push	{r4, r5, r7, lr}
 80126ca:	b082      	sub	sp, #8
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681c      	ldr	r4, [r3, #0]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 fb94 	bl	8012e08 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80126e0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80126e2:	461a      	mov	r2, r3
 80126e4:	4629      	mov	r1, r5
 80126e6:	4620      	mov	r0, r4
 80126e8:	f000 fb99 	bl	8012e1e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7ff ffd1 	bl	8012696 <_ZNSt12_Vector_baseImSaImEED1Ev>
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bdb0      	pop	{r4, r5, r7, pc}

080126fe <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80126fe:	b580      	push	{r7, lr}
 8012700:	b084      	sub	sp, #16
 8012702:	af00      	add	r7, sp, #0
 8012704:	60f8      	str	r0, [r7, #12]
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801270a:	68b8      	ldr	r0, [r7, #8]
 801270c:	f7ff ff1a 	bl	8012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012710:	4602      	mov	r2, r0
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012718:	e883 0003 	stmia.w	r3, {r0, r1}
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff ff11 	bl	8012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012722:	4602      	mov	r2, r0
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	3308      	adds	r3, #8
 8012728:	e892 0003 	ldmia.w	r2, {r0, r1}
 801272c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	4618      	mov	r0, r3
 8012734:	3710      	adds	r7, #16
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}

0801273a <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 801273a:	b490      	push	{r4, r7}
 801273c:	b084      	sub	sp, #16
 801273e:	af00      	add	r7, sp, #0
 8012740:	60f8      	str	r0, [r7, #12]
 8012742:	60b9      	str	r1, [r7, #8]
 8012744:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8012746:	68fa      	ldr	r2, [r7, #12]
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	4614      	mov	r4, r2
 801274c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801274e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	611a      	str	r2, [r3, #16]
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	4618      	mov	r0, r3
 801275e:	3710      	adds	r7, #16
 8012760:	46bd      	mov	sp, r7
 8012762:	bc90      	pop	{r4, r7}
 8012764:	4770      	bx	lr

08012766 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012766:	b580      	push	{r7, lr}
 8012768:	b082      	sub	sp, #8
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f000 fb63 	bl	8012e3a <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}

0801277e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801277e:	b480      	push	{r7}
 8012780:	b083      	sub	sp, #12
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	370c      	adds	r7, #12
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr

08012794 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 8012794:	b5b0      	push	{r4, r5, r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	1d38      	adds	r0, r7, #4
 801279e:	e880 0006 	stmia.w	r0, {r1, r2}
 80127a2:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80127a4:	68fc      	ldr	r4, [r7, #12]
 80127a6:	f107 0314 	add.w	r3, r7, #20
 80127aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 fb4f 	bl	8012e50 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>
 80127b2:	f107 0314 	add.w	r3, r7, #20
 80127b6:	461a      	mov	r2, r3
 80127b8:	6839      	ldr	r1, [r7, #0]
 80127ba:	4620      	mov	r0, r4
 80127bc:	f000 fb56 	bl	8012e6c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 80127c0:	f107 0314 	add.w	r3, r7, #20
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff ffda 	bl	801277e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80127ca:	68fc      	ldr	r4, [r7, #12]
 80127cc:	1d3b      	adds	r3, r7, #4
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fb6a 	bl	8012ea8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 80127d4:	4605      	mov	r5, r0
 80127d6:	1d3b      	adds	r3, r7, #4
 80127d8:	4618      	mov	r0, r3
 80127da:	f000 fb71 	bl	8012ec0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>
 80127de:	4603      	mov	r3, r0
 80127e0:	461a      	mov	r2, r3
 80127e2:	4629      	mov	r1, r5
 80127e4:	4620      	mov	r0, r4
 80127e6:	f000 fb80 	bl	8012eea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	4618      	mov	r0, r3
 80127ee:	3718      	adds	r7, #24
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bdb0      	pop	{r4, r5, r7, pc}

080127f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fba0 	bl	8012f42 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4618      	mov	r0, r3
 8012806:	3708      	adds	r7, #8
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}

0801280c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801280c:	b580      	push	{r7, lr}
 801280e:	b082      	sub	sp, #8
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 fbbe 	bl	8012f96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 801281a:	4603      	mov	r3, r0
 801281c:	4619      	mov	r1, r3
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 fb9a 	bl	8012f58 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4618      	mov	r0, r3
 8012828:	f7ff ffe4 	bl	80127f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}

08012836 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012836:	b580      	push	{r7, lr}
 8012838:	b082      	sub	sp, #8
 801283a:	af00      	add	r7, sp, #0
 801283c:	6078      	str	r0, [r7, #4]
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 fbb5 	bl	8012fae <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	4618      	mov	r0, r3
 8012848:	3708      	adds	r7, #8
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}

0801284e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801284e:	b480      	push	{r7}
 8012850:	b083      	sub	sp, #12
 8012852:	af00      	add	r7, sp, #0
 8012854:	6078      	str	r0, [r7, #4]
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	4618      	mov	r0, r3
 801285a:	370c      	adds	r7, #12
 801285c:	46bd      	mov	sp, r7
 801285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012862:	4770      	bx	lr

08012864 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 8012864:	b5b0      	push	{r4, r5, r7, lr}
 8012866:	b086      	sub	sp, #24
 8012868:	af00      	add	r7, sp, #0
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	1d38      	adds	r0, r7, #4
 801286e:	e880 0006 	stmia.w	r0, {r1, r2}
 8012872:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8012874:	68fc      	ldr	r4, [r7, #12]
 8012876:	f107 0314 	add.w	r3, r7, #20
 801287a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801287c:	4618      	mov	r0, r3
 801287e:	f000 fba1 	bl	8012fc4 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>
 8012882:	f107 0314 	add.w	r3, r7, #20
 8012886:	461a      	mov	r2, r3
 8012888:	6839      	ldr	r1, [r7, #0]
 801288a:	4620      	mov	r0, r4
 801288c:	f000 fba8 	bl	8012fe0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>
 8012890:	f107 0314 	add.w	r3, r7, #20
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff ffda 	bl	801284e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 801289a:	68fc      	ldr	r4, [r7, #12]
 801289c:	1d3b      	adds	r3, r7, #4
 801289e:	4618      	mov	r0, r3
 80128a0:	f000 fbbc 	bl	801301c <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 80128a4:	4605      	mov	r5, r0
 80128a6:	1d3b      	adds	r3, r7, #4
 80128a8:	4618      	mov	r0, r3
 80128aa:	f000 fbc3 	bl	8013034 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>
 80128ae:	4603      	mov	r3, r0
 80128b0:	461a      	mov	r2, r3
 80128b2:	4629      	mov	r1, r5
 80128b4:	4620      	mov	r0, r4
 80128b6:	f000 fbcf 	bl	8013058 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bdb0      	pop	{r4, r5, r7, pc}

080128c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 fc0e 	bl	80130ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 80128d2:	4603      	mov	r3, r0
 80128d4:	4619      	mov	r1, r3
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f000 fbea 	bl	80130b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	4618      	mov	r0, r3
 80128e0:	f7ff fe48 	bl	8012574 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	4618      	mov	r0, r3
 80128e8:	3708      	adds	r7, #8
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}

080128ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80128ee:	b580      	push	{r7, lr}
 80128f0:	b082      	sub	sp, #8
 80128f2:	af00      	add	r7, sp, #0
 80128f4:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 fc05 	bl	8013106 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	4618      	mov	r0, r3
 8012900:	f000 fc0d 	bl	801311e <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	3304      	adds	r3, #4
 8012908:	4618      	mov	r0, r3
 801290a:	f7fc fb45 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>:
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4618      	mov	r0, r3
 8012924:	370c      	adds	r7, #12
 8012926:	46bd      	mov	sp, r7
 8012928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292c:	4770      	bx	lr

0801292e <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 801292e:	b490      	push	{r4, r7}
 8012930:	b084      	sub	sp, #16
 8012932:	af00      	add	r7, sp, #0
 8012934:	60f8      	str	r0, [r7, #12]
 8012936:	60b9      	str	r1, [r7, #8]
 8012938:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 801293a:	68fa      	ldr	r2, [r7, #12]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	4614      	mov	r4, r2
 8012940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012942:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	3310      	adds	r3, #16
 801294c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012950:	e883 0003 	stmia.w	r3, {r0, r1}
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4618      	mov	r0, r3
 8012958:	3710      	adds	r7, #16
 801295a:	46bd      	mov	sp, r7
 801295c:	bc90      	pop	{r4, r7}
 801295e:	4770      	bx	lr

08012960 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fbe3 	bl	8013134 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4618      	mov	r0, r3
 8012972:	3708      	adds	r7, #8
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	4618      	mov	r0, r3
 8012984:	370c      	adds	r7, #12
 8012986:	46bd      	mov	sp, r7
 8012988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298c:	4770      	bx	lr

0801298e <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>:
      map(initializer_list<value_type> __l,
 801298e:	b5b0      	push	{r4, r5, r7, lr}
 8012990:	b086      	sub	sp, #24
 8012992:	af00      	add	r7, sp, #0
 8012994:	60f8      	str	r0, [r7, #12]
 8012996:	1d38      	adds	r0, r7, #4
 8012998:	e880 0006 	stmia.w	r0, {r1, r2}
 801299c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801299e:	68fc      	ldr	r4, [r7, #12]
 80129a0:	f107 0314 	add.w	r3, r7, #20
 80129a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80129a6:	4618      	mov	r0, r3
 80129a8:	f000 fbcf 	bl	801314a <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>
 80129ac:	f107 0314 	add.w	r3, r7, #20
 80129b0:	461a      	mov	r2, r3
 80129b2:	6839      	ldr	r1, [r7, #0]
 80129b4:	4620      	mov	r0, r4
 80129b6:	f000 fbd6 	bl	8013166 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>
 80129ba:	f107 0314 	add.w	r3, r7, #20
 80129be:	4618      	mov	r0, r3
 80129c0:	f7ff ffda 	bl	8012978 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80129c4:	68fc      	ldr	r4, [r7, #12]
 80129c6:	1d3b      	adds	r3, r7, #4
 80129c8:	4618      	mov	r0, r3
 80129ca:	f000 fbea 	bl	80131a2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 80129ce:	4605      	mov	r5, r0
 80129d0:	1d3b      	adds	r3, r7, #4
 80129d2:	4618      	mov	r0, r3
 80129d4:	f000 fbf1 	bl	80131ba <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>
 80129d8:	4603      	mov	r3, r0
 80129da:	461a      	mov	r2, r3
 80129dc:	4629      	mov	r1, r5
 80129de:	4620      	mov	r0, r4
 80129e0:	f000 fc00 	bl	80131e4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	4618      	mov	r0, r3
 80129e8:	3718      	adds	r7, #24
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bdb0      	pop	{r4, r5, r7, pc}

080129ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b082      	sub	sp, #8
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 fc20 	bl	801323c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4618      	mov	r0, r3
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fc3e 	bl	8013290 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 8012a14:	4603      	mov	r3, r0
 8012a16:	4619      	mov	r1, r3
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	f000 fc1a 	bl	8013252 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7ff ffe4 	bl	80129ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8012a30:	b5b0      	push	{r4, r5, r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012a3c:	68b8      	ldr	r0, [r7, #8]
 8012a3e:	f7ff fd81 	bl	8012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a42:	4602      	mov	r2, r0
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a4a:	e883 0003 	stmia.w	r3, {r0, r1}
 8012a4e:	6878      	ldr	r0, [r7, #4]
 8012a50:	f000 fc2a 	bl	80132a8 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a54:	4602      	mov	r2, r0
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	f103 0408 	add.w	r4, r3, #8
 8012a5c:	4615      	mov	r5, r2
 8012a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012a62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bdb0      	pop	{r4, r5, r7, pc}

08012a74 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 fc1e 	bl	80132be <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	4618      	mov	r0, r3
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	4618      	mov	r0, r3
 8012a98:	370c      	adds	r7, #12
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 8012aa2:	b5b0      	push	{r4, r5, r7, lr}
 8012aa4:	b086      	sub	sp, #24
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	60f8      	str	r0, [r7, #12]
 8012aaa:	1d38      	adds	r0, r7, #4
 8012aac:	e880 0006 	stmia.w	r0, {r1, r2}
 8012ab0:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8012ab2:	68fc      	ldr	r4, [r7, #12]
 8012ab4:	f107 0314 	add.w	r3, r7, #20
 8012ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012aba:	4618      	mov	r0, r3
 8012abc:	f000 fc0a 	bl	80132d4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>
 8012ac0:	f107 0314 	add.w	r3, r7, #20
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	6839      	ldr	r1, [r7, #0]
 8012ac8:	4620      	mov	r0, r4
 8012aca:	f000 fc11 	bl	80132f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8012ace:	f107 0314 	add.w	r3, r7, #20
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7ff ffda 	bl	8012a8c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8012ad8:	68fc      	ldr	r4, [r7, #12]
 8012ada:	1d3b      	adds	r3, r7, #4
 8012adc:	4618      	mov	r0, r3
 8012ade:	f000 fc25 	bl	801332c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8012ae2:	4605      	mov	r5, r0
 8012ae4:	1d3b      	adds	r3, r7, #4
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f000 fc2c 	bl	8013344 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 8012aec:	4603      	mov	r3, r0
 8012aee:	461a      	mov	r2, r3
 8012af0:	4629      	mov	r1, r5
 8012af2:	4620      	mov	r0, r4
 8012af4:	f000 fc3b 	bl	801336e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	4618      	mov	r0, r3
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bdb0      	pop	{r4, r5, r7, pc}

08012b02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8012b02:	b580      	push	{r7, lr}
 8012b04:	b082      	sub	sp, #8
 8012b06:	af00      	add	r7, sp, #0
 8012b08:	6078      	str	r0, [r7, #4]
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f000 fc5b 	bl	80133c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	4618      	mov	r0, r3
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fc79 	bl	801341a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f000 fc55 	bl	80133dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	f7ff ffe4 	bl	8012b02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3708      	adds	r7, #8
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b084      	sub	sp, #16
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	60f8      	str	r0, [r7, #12]
 8012b4c:	60b9      	str	r1, [r7, #8]
 8012b4e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012b50:	68b8      	ldr	r0, [r7, #8]
 8012b52:	f7ff fcf7 	bl	8012544 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b56:	4602      	mov	r2, r0
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 fc65 	bl	8013432 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	3308      	adds	r3, #8
 8012b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012b70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}

08012b7e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012b7e:	b580      	push	{r7, lr}
 8012b80:	b082      	sub	sp, #8
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	6078      	str	r0, [r7, #4]
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 fc5e 	bl	8013448 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012b96:	b480      	push	{r7}
 8012b98:	b083      	sub	sp, #12
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	6078      	str	r0, [r7, #4]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 8012bac:	b5b0      	push	{r4, r5, r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	1d38      	adds	r0, r7, #4
 8012bb6:	e880 0006 	stmia.w	r0, {r1, r2}
 8012bba:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8012bbc:	68fc      	ldr	r4, [r7, #12]
 8012bbe:	f107 0314 	add.w	r3, r7, #20
 8012bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f000 fc4a 	bl	801345e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>
 8012bca:	f107 0314 	add.w	r3, r7, #20
 8012bce:	461a      	mov	r2, r3
 8012bd0:	6839      	ldr	r1, [r7, #0]
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f000 fc51 	bl	801347a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8012bd8:	f107 0314 	add.w	r3, r7, #20
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f7ff ffda 	bl	8012b96 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8012be2:	68fc      	ldr	r4, [r7, #12]
 8012be4:	1d3b      	adds	r3, r7, #4
 8012be6:	4618      	mov	r0, r3
 8012be8:	f000 fc65 	bl	80134b6 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8012bec:	4605      	mov	r5, r0
 8012bee:	1d3b      	adds	r3, r7, #4
 8012bf0:	4618      	mov	r0, r3
 8012bf2:	f000 fc6c 	bl	80134ce <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	4620      	mov	r0, r4
 8012bfe:	f000 fc7b 	bl	80134f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	4618      	mov	r0, r3
 8012c06:	3718      	adds	r7, #24
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bdb0      	pop	{r4, r5, r7, pc}

08012c0c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 fc9b 	bl	8013550 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	3708      	adds	r7, #8
 8012c20:	46bd      	mov	sp, r7
 8012c22:	bd80      	pop	{r7, pc}

08012c24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f000 fcb9 	bl	80135a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8012c32:	4603      	mov	r3, r0
 8012c34:	4619      	mov	r1, r3
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fc95 	bl	8013566 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7ff ffe4 	bl	8012c0c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	4618      	mov	r0, r3
 8012c48:	3708      	adds	r7, #8
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	bd80      	pop	{r7, pc}

08012c4e <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012c4e:	b480      	push	{r7}
 8012c50:	b083      	sub	sp, #12
 8012c52:	af00      	add	r7, sp, #0
 8012c54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
	class Instance {
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b082      	sub	sp, #8
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
 8012c6c:	6039      	str	r1, [r7, #0]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	801a      	strh	r2, [r3, #0]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	1d1a      	adds	r2, r3, #4
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	3304      	adds	r3, #4
 8012c80:	4619      	mov	r1, r3
 8012c82:	4610      	mov	r0, r2
 8012c84:	f000 fca5 	bl	80135d2 <_ZNSt8functionIFvvEEC1EOS1_>
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	7d1a      	ldrb	r2, [r3, #20]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	751a      	strb	r2, [r3, #20]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8012c9a:	b590      	push	{r4, r7, lr}
 8012c9c:	b085      	sub	sp, #20
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	60f8      	str	r0, [r7, #12]
 8012ca2:	60b9      	str	r1, [r7, #8]
 8012ca4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012ca6:	68b8      	ldr	r0, [r7, #8]
 8012ca8:	f7ff ffd1 	bl	8012c4e <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8012cac:	4603      	mov	r3, r0
 8012cae:	881a      	ldrh	r2, [r3, #0]
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	801a      	strh	r2, [r3, #0]
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	1d1c      	adds	r4, r3, #4
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f000 fc7f 	bl	80135bc <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	4619      	mov	r1, r3
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f7ff ffce 	bl	8012c64 <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3714      	adds	r7, #20
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd90      	pop	{r4, r7, pc}

08012cd2 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b082      	sub	sp, #8
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fc8b 	bl	80135f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012cea:	b480      	push	{r7}
 8012cec:	b083      	sub	sp, #12
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr

08012d00 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 8012d00:	b5b0      	push	{r4, r5, r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	1d38      	adds	r0, r7, #4
 8012d0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8012d0e:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8012d10:	68fc      	ldr	r4, [r7, #12]
 8012d12:	f107 0314 	add.w	r3, r7, #20
 8012d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f000 fc77 	bl	801360c <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>
 8012d1e:	f107 0314 	add.w	r3, r7, #20
 8012d22:	461a      	mov	r2, r3
 8012d24:	6839      	ldr	r1, [r7, #0]
 8012d26:	4620      	mov	r0, r4
 8012d28:	f000 fc7e 	bl	8013628 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>
 8012d2c:	f107 0314 	add.w	r3, r7, #20
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7ff ffda 	bl	8012cea <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8012d36:	68fc      	ldr	r4, [r7, #12]
 8012d38:	1d3b      	adds	r3, r7, #4
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f000 fc92 	bl	8013664 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 8012d40:	4605      	mov	r5, r0
 8012d42:	1d3b      	adds	r3, r7, #4
 8012d44:	4618      	mov	r0, r3
 8012d46:	f000 fc99 	bl	801367c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	4629      	mov	r1, r5
 8012d50:	4620      	mov	r0, r4
 8012d52:	f000 fca8 	bl	80136a6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	4618      	mov	r0, r3
 8012d5a:	3718      	adds	r7, #24
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bdb0      	pop	{r4, r5, r7, pc}

08012d60 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 fcc8 	bl	80136fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7fe f923 	bl	8010fcc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8012d86:	4603      	mov	r3, r0
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fcc2 	bl	8013714 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7ff ffe4 	bl	8012d60 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b082      	sub	sp, #8
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f000 fcd1 	bl	8013752 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	4618      	mov	r0, r3
 8012db4:	3708      	adds	r7, #8
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}

08012dba <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8012dba:	b480      	push	{r7}
 8012dbc:	b083      	sub	sp, #12
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	601a      	str	r2, [r3, #0]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2200      	movs	r2, #0
 8012dcc:	605a      	str	r2, [r3, #4]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	609a      	str	r2, [r3, #8]
	{ }
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	370c      	adds	r7, #12
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b084      	sub	sp, #16
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	60f8      	str	r0, [r7, #12]
 8012dea:	60b9      	str	r1, [r7, #8]
 8012dec:	607a      	str	r2, [r7, #4]
	if (__p)
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d005      	beq.n	8012e00 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	68b9      	ldr	r1, [r7, #8]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 fcb4 	bl	8013768 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8012e00:	bf00      	nop
 8012e02:	3710      	adds	r7, #16
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	4618      	mov	r0, r3
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8012e1e:	b580      	push	{r7, lr}
 8012e20:	b084      	sub	sp, #16
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	60f8      	str	r0, [r7, #12]
 8012e26:	60b9      	str	r1, [r7, #8]
 8012e28:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8012e2a:	68b9      	ldr	r1, [r7, #8]
 8012e2c:	68f8      	ldr	r0, [r7, #12]
 8012e2e:	f000 fcba 	bl	80137a6 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8012e32:	bf00      	nop
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8012e3a:	b480      	push	{r7}
 8012e3c:	b083      	sub	sp, #12
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	6078      	str	r0, [r7, #4]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b082      	sub	sp, #8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8012e5a:	6839      	ldr	r1, [r7, #0]
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 fcb8 	bl	80137d2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	3708      	adds	r7, #8
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 8012e6c:	b590      	push	{r4, r7, lr}
 8012e6e:	b087      	sub	sp, #28
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8012e78:	68fc      	ldr	r4, [r7, #12]
 8012e7a:	f107 0314 	add.w	r3, r7, #20
 8012e7e:	6879      	ldr	r1, [r7, #4]
 8012e80:	4618      	mov	r0, r3
 8012e82:	f000 fcb2 	bl	80137ea <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>
 8012e86:	f107 0314 	add.w	r3, r7, #20
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	68b9      	ldr	r1, [r7, #8]
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f000 fcb8 	bl	8013804 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 8012e94:	f107 0314 	add.w	r3, r7, #20
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 f852 	bl	8012f42 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	371c      	adds	r7, #28
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd90      	pop	{r4, r7, pc}

08012ea8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8012ec0:	b590      	push	{r4, r7, lr}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	6878      	ldr	r0, [r7, #4]
 8012eca:	f7ff ffed 	bl	8012ea8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 8012ece:	4604      	mov	r4, r0
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f000 fcb4 	bl	801383e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>
 8012ed6:	4602      	mov	r2, r0
 8012ed8:	4613      	mov	r3, r2
 8012eda:	009b      	lsls	r3, r3, #2
 8012edc:	4413      	add	r3, r2
 8012ede:	009b      	lsls	r3, r3, #2
 8012ee0:	4423      	add	r3, r4
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	370c      	adds	r7, #12
 8012ee6:	46bd      	mov	sp, r7
 8012ee8:	bd90      	pop	{r4, r7, pc}

08012eea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b088      	sub	sp, #32
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	60f8      	str	r0, [r7, #12]
 8012ef2:	60b9      	str	r1, [r7, #8]
 8012ef4:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8012ef6:	f107 0314 	add.w	r3, r7, #20
 8012efa:	68f9      	ldr	r1, [r7, #12]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 fcaa 	bl	8013856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 8012f02:	68ba      	ldr	r2, [r7, #8]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	429a      	cmp	r2, r3
 8012f08:	d017      	beq.n	8012f3a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8012f0a:	68f8      	ldr	r0, [r7, #12]
 8012f0c:	f000 fcb2 	bl	8013874 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8012f10:	4603      	mov	r3, r0
 8012f12:	61fb      	str	r3, [r7, #28]
 8012f14:	f107 021c 	add.w	r2, r7, #28
 8012f18:	f107 0318 	add.w	r3, r7, #24
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f000 fcb9 	bl	8013896 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8012f24:	f107 0314 	add.w	r3, r7, #20
 8012f28:	68ba      	ldr	r2, [r7, #8]
 8012f2a:	69b9      	ldr	r1, [r7, #24]
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f000 fcc2 	bl	80138b6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	3314      	adds	r3, #20
 8012f36:	60bb      	str	r3, [r7, #8]
 8012f38:	e7e3      	b.n	8012f02 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 8012f3a:	bf00      	nop
 8012f3c:	3720      	adds	r7, #32
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}

08012f42 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012f42:	b480      	push	{r7}
 8012f44:	b083      	sub	sp, #12
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	370c      	adds	r7, #12
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d012      	beq.n	8012f8e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8012f68:	6838      	ldr	r0, [r7, #0]
 8012f6a:	f000 fcd7 	bl	801391c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	4619      	mov	r1, r3
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff fff0 	bl	8012f58 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8012f78:	6838      	ldr	r0, [r7, #0]
 8012f7a:	f000 fcdb 	bl	8013934 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012f7e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8012f80:	6839      	ldr	r1, [r7, #0]
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f000 fce2 	bl	801394c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012f8c:	e7e9      	b.n	8012f62 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8012f8e:	bf00      	nop
 8012f90:	3710      	adds	r7, #16
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8012f96:	b480      	push	{r7}
 8012f98:	b083      	sub	sp, #12
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	689b      	ldr	r3, [r3, #8]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr

08012fae <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>:
 8012fae:	b480      	push	{r7}
 8012fb0:	b083      	sub	sp, #12
 8012fb2:	af00      	add	r7, sp, #0
 8012fb4:	6078      	str	r0, [r7, #4]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	370c      	adds	r7, #12
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr

08012fc4 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8012fce:	6839      	ldr	r1, [r7, #0]
 8012fd0:	6878      	ldr	r0, [r7, #4]
 8012fd2:	f000 fccc 	bl	801396e <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3708      	adds	r7, #8
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}

08012fe0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 8012fe0:	b590      	push	{r4, r7, lr}
 8012fe2:	b087      	sub	sp, #28
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	60f8      	str	r0, [r7, #12]
 8012fe8:	60b9      	str	r1, [r7, #8]
 8012fea:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8012fec:	68fc      	ldr	r4, [r7, #12]
 8012fee:	f107 0314 	add.w	r3, r7, #20
 8012ff2:	6879      	ldr	r1, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f000 fcc6 	bl	8013986 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>
 8012ffa:	f107 0314 	add.w	r3, r7, #20
 8012ffe:	461a      	mov	r2, r3
 8013000:	68b9      	ldr	r1, [r7, #8]
 8013002:	4620      	mov	r0, r4
 8013004:	f000 fccc 	bl	80139a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8013008:	f107 0314 	add.w	r3, r7, #20
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff fc83 	bl	8012918 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	4618      	mov	r0, r3
 8013016:	371c      	adds	r7, #28
 8013018:	46bd      	mov	sp, r7
 801301a:	bd90      	pop	{r4, r7, pc}

0801301c <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801301c:	b480      	push	{r7}
 801301e:	b083      	sub	sp, #12
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4618      	mov	r0, r3
 801302a:	370c      	adds	r7, #12
 801302c:	46bd      	mov	sp, r7
 801302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013032:	4770      	bx	lr

08013034 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8013034:	b590      	push	{r4, r7, lr}
 8013036:	b083      	sub	sp, #12
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f7ff ffed 	bl	801301c <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 8013042:	4604      	mov	r4, r0
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 fcc8 	bl	80139da <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>
 801304a:	4603      	mov	r3, r0
 801304c:	011b      	lsls	r3, r3, #4
 801304e:	4423      	add	r3, r4
 8013050:	4618      	mov	r0, r3
 8013052:	370c      	adds	r7, #12
 8013054:	46bd      	mov	sp, r7
 8013056:	bd90      	pop	{r4, r7, pc}

08013058 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8013058:	b580      	push	{r7, lr}
 801305a:	b088      	sub	sp, #32
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8013064:	f107 0314 	add.w	r3, r7, #20
 8013068:	68f9      	ldr	r1, [r7, #12]
 801306a:	4618      	mov	r0, r3
 801306c:	f000 fcc1 	bl	80139f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	429a      	cmp	r2, r3
 8013076:	d017      	beq.n	80130a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8013078:	68f8      	ldr	r0, [r7, #12]
 801307a:	f000 fcc9 	bl	8013a10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 801307e:	4603      	mov	r3, r0
 8013080:	61fb      	str	r3, [r7, #28]
 8013082:	f107 021c 	add.w	r2, r7, #28
 8013086:	f107 0318 	add.w	r3, r7, #24
 801308a:	4611      	mov	r1, r2
 801308c:	4618      	mov	r0, r3
 801308e:	f000 fcd0 	bl	8013a32 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 8013092:	f107 0314 	add.w	r3, r7, #20
 8013096:	68ba      	ldr	r2, [r7, #8]
 8013098:	69b9      	ldr	r1, [r7, #24]
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f000 fcd9 	bl	8013a52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	3310      	adds	r3, #16
 80130a4:	60bb      	str	r3, [r7, #8]
 80130a6:	e7e3      	b.n	8013070 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 80130a8:	bf00      	nop
 80130aa:	3720      	adds	r7, #32
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
 80130b8:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d012      	beq.n	80130e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 80130c0:	6838      	ldr	r0, [r7, #0]
 80130c2:	f000 fcf9 	bl	8013ab8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80130c6:	4603      	mov	r3, r0
 80130c8:	4619      	mov	r1, r3
 80130ca:	6878      	ldr	r0, [r7, #4]
 80130cc:	f7ff fff0 	bl	80130b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 80130d0:	6838      	ldr	r0, [r7, #0]
 80130d2:	f000 fcfd 	bl	8013ad0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80130d6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80130d8:	6839      	ldr	r1, [r7, #0]
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 fd04 	bl	8013ae8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80130e4:	e7e9      	b.n	80130ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 80130e6:	bf00      	nop
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80130ee:	b480      	push	{r7}
 80130f0:	b083      	sub	sp, #12
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	4618      	mov	r0, r3
 80130fc:	370c      	adds	r7, #12
 80130fe:	46bd      	mov	sp, r7
 8013100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013104:	4770      	bx	lr

08013106 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013106:	b580      	push	{r7, lr}
 8013108:	b082      	sub	sp, #8
 801310a:	af00      	add	r7, sp, #0
 801310c:	6078      	str	r0, [r7, #4]
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 fcfb 	bl	8013b0a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	4618      	mov	r0, r3
 8013118:	3708      	adds	r7, #8
 801311a:	46bd      	mov	sp, r7
 801311c:	bd80      	pop	{r7, pc}

0801311e <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 801311e:	b480      	push	{r7}
 8013120:	b083      	sub	sp, #12
 8013122:	af00      	add	r7, sp, #0
 8013124:	6078      	str	r0, [r7, #4]
      { }
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr

08013134 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>:
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	4618      	mov	r0, r3
 8013140:	370c      	adds	r7, #12
 8013142:	46bd      	mov	sp, r7
 8013144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013148:	4770      	bx	lr

0801314a <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801314a:	b580      	push	{r7, lr}
 801314c:	b082      	sub	sp, #8
 801314e:	af00      	add	r7, sp, #0
 8013150:	6078      	str	r0, [r7, #4]
 8013152:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 fce2 	bl	8013b20 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	4618      	mov	r0, r3
 8013160:	3708      	adds	r7, #8
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8013166:	b590      	push	{r4, r7, lr}
 8013168:	b087      	sub	sp, #28
 801316a:	af00      	add	r7, sp, #0
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	60b9      	str	r1, [r7, #8]
 8013170:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8013172:	68fc      	ldr	r4, [r7, #12]
 8013174:	f107 0314 	add.w	r3, r7, #20
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 fcdc 	bl	8013b38 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>
 8013180:	f107 0314 	add.w	r3, r7, #20
 8013184:	461a      	mov	r2, r3
 8013186:	68b9      	ldr	r1, [r7, #8]
 8013188:	4620      	mov	r0, r4
 801318a:	f000 fce2 	bl	8013b52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 801318e:	f107 0314 	add.w	r3, r7, #20
 8013192:	4618      	mov	r0, r3
 8013194:	f000 f852 	bl	801323c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	4618      	mov	r0, r3
 801319c:	371c      	adds	r7, #28
 801319e:	46bd      	mov	sp, r7
 80131a0:	bd90      	pop	{r4, r7, pc}

080131a2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80131a2:	b480      	push	{r7}
 80131a4:	b083      	sub	sp, #12
 80131a6:	af00      	add	r7, sp, #0
 80131a8:	6078      	str	r0, [r7, #4]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4618      	mov	r0, r3
 80131b0:	370c      	adds	r7, #12
 80131b2:	46bd      	mov	sp, r7
 80131b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b8:	4770      	bx	lr

080131ba <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80131ba:	b590      	push	{r4, r7, lr}
 80131bc:	b083      	sub	sp, #12
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7ff ffed 	bl	80131a2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 80131c8:	4604      	mov	r4, r0
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f000 fcde 	bl	8013b8c <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>
 80131d0:	4602      	mov	r2, r0
 80131d2:	4613      	mov	r3, r2
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	4413      	add	r3, r2
 80131d8:	00db      	lsls	r3, r3, #3
 80131da:	4423      	add	r3, r4
 80131dc:	4618      	mov	r0, r3
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd90      	pop	{r4, r7, pc}

080131e4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b088      	sub	sp, #32
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80131f0:	f107 0314 	add.w	r3, r7, #20
 80131f4:	68f9      	ldr	r1, [r7, #12]
 80131f6:	4618      	mov	r0, r3
 80131f8:	f000 fcd4 	bl	8013ba4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 80131fc:	68ba      	ldr	r2, [r7, #8]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	429a      	cmp	r2, r3
 8013202:	d017      	beq.n	8013234 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f000 fcdc 	bl	8013bc2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>
 801320a:	4603      	mov	r3, r0
 801320c:	61fb      	str	r3, [r7, #28]
 801320e:	f107 021c 	add.w	r2, r7, #28
 8013212:	f107 0318 	add.w	r3, r7, #24
 8013216:	4611      	mov	r1, r2
 8013218:	4618      	mov	r0, r3
 801321a:	f000 fce3 	bl	8013be4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 801321e:	f107 0314 	add.w	r3, r7, #20
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	69b9      	ldr	r1, [r7, #24]
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 fcec 	bl	8013c04 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	3318      	adds	r3, #24
 8013230:	60bb      	str	r3, [r7, #8]
 8013232:	e7e3      	b.n	80131fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8013234:	bf00      	nop
 8013236:	3720      	adds	r7, #32
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}

0801323c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	4618      	mov	r0, r3
 8013248:	370c      	adds	r7, #12
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr

08013252 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013252:	b580      	push	{r7, lr}
 8013254:	b084      	sub	sp, #16
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
 801325a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d012      	beq.n	8013288 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8013262:	6838      	ldr	r0, [r7, #0]
 8013264:	f000 fd01 	bl	8013c6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013268:	4603      	mov	r3, r0
 801326a:	4619      	mov	r1, r3
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff fff0 	bl	8013252 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8013272:	6838      	ldr	r0, [r7, #0]
 8013274:	f000 fd05 	bl	8013c82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013278:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801327a:	6839      	ldr	r1, [r7, #0]
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 fd0c 	bl	8013c9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013286:	e7e9      	b.n	801325c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8013288:	bf00      	nop
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8013290:	b480      	push	{r7}
 8013292:	b083      	sub	sp, #12
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	4618      	mov	r0, r3
 801329e:	370c      	adds	r7, #12
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr

080132a8 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80132a8:	b480      	push	{r7}
 80132aa:	b083      	sub	sp, #12
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
 80132be:	b480      	push	{r7}
 80132c0:	b083      	sub	sp, #12
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	6078      	str	r0, [r7, #4]
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80132de:	6839      	ldr	r1, [r7, #0]
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 fceb 	bl	8013cbc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	4618      	mov	r0, r3
 80132ea:	3708      	adds	r7, #8
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 80132f0:	b590      	push	{r4, r7, lr}
 80132f2:	b087      	sub	sp, #28
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80132fc:	68fc      	ldr	r4, [r7, #12]
 80132fe:	f107 0314 	add.w	r3, r7, #20
 8013302:	6879      	ldr	r1, [r7, #4]
 8013304:	4618      	mov	r0, r3
 8013306:	f000 fce5 	bl	8013cd4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>
 801330a:	f107 0314 	add.w	r3, r7, #20
 801330e:	461a      	mov	r2, r3
 8013310:	68b9      	ldr	r1, [r7, #8]
 8013312:	4620      	mov	r0, r4
 8013314:	f000 fceb 	bl	8013cee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8013318:	f107 0314 	add.w	r3, r7, #20
 801331c:	4618      	mov	r0, r3
 801331e:	f000 f852 	bl	80133c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	4618      	mov	r0, r3
 8013326:	371c      	adds	r7, #28
 8013328:	46bd      	mov	sp, r7
 801332a:	bd90      	pop	{r4, r7, pc}

0801332c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4618      	mov	r0, r3
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8013344:	b590      	push	{r4, r7, lr}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f7ff ffed 	bl	801332c <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8013352:	4604      	mov	r4, r0
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f000 fce7 	bl	8013d28 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 801335a:	4602      	mov	r2, r0
 801335c:	4613      	mov	r3, r2
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	4413      	add	r3, r2
 8013362:	00db      	lsls	r3, r3, #3
 8013364:	4423      	add	r3, r4
 8013366:	4618      	mov	r0, r3
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	bd90      	pop	{r4, r7, pc}

0801336e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 801336e:	b580      	push	{r7, lr}
 8013370:	b088      	sub	sp, #32
 8013372:	af00      	add	r7, sp, #0
 8013374:	60f8      	str	r0, [r7, #12]
 8013376:	60b9      	str	r1, [r7, #8]
 8013378:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 801337a:	f107 0314 	add.w	r3, r7, #20
 801337e:	68f9      	ldr	r1, [r7, #12]
 8013380:	4618      	mov	r0, r3
 8013382:	f000 fcdd 	bl	8013d40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8013386:	68ba      	ldr	r2, [r7, #8]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	429a      	cmp	r2, r3
 801338c:	d017      	beq.n	80133be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 801338e:	68f8      	ldr	r0, [r7, #12]
 8013390:	f000 fce5 	bl	8013d5e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8013394:	4603      	mov	r3, r0
 8013396:	61fb      	str	r3, [r7, #28]
 8013398:	f107 021c 	add.w	r2, r7, #28
 801339c:	f107 0318 	add.w	r3, r7, #24
 80133a0:	4611      	mov	r1, r2
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 fcec 	bl	8013d80 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80133a8:	f107 0314 	add.w	r3, r7, #20
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	69b9      	ldr	r1, [r7, #24]
 80133b0:	68f8      	ldr	r0, [r7, #12]
 80133b2:	f000 fcf5 	bl	8013da0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	3328      	adds	r3, #40	; 0x28
 80133ba:	60bb      	str	r3, [r7, #8]
 80133bc:	e7e3      	b.n	8013386 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 80133be:	bf00      	nop
 80133c0:	3720      	adds	r7, #32
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}

080133c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80133c6:	b480      	push	{r7}
 80133c8:	b083      	sub	sp, #12
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	6078      	str	r0, [r7, #4]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	4618      	mov	r0, r3
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d012      	beq.n	8013412 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 80133ec:	6838      	ldr	r0, [r7, #0]
 80133ee:	f000 fd0a 	bl	8013e06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80133f2:	4603      	mov	r3, r0
 80133f4:	4619      	mov	r1, r3
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f7ff fff0 	bl	80133dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80133fc:	6838      	ldr	r0, [r7, #0]
 80133fe:	f000 fd0e 	bl	8013e1e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013402:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8013404:	6839      	ldr	r1, [r7, #0]
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 fd15 	bl	8013e36 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013410:	e7e9      	b.n	80133e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8013412:	bf00      	nop
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801341a:	b480      	push	{r7}
 801341c:	b083      	sub	sp, #12
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	689b      	ldr	r3, [r3, #8]
 8013426:	4618      	mov	r0, r3
 8013428:	370c      	adds	r7, #12
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr

08013432 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013432:	b480      	push	{r7}
 8013434:	b083      	sub	sp, #12
 8013436:	af00      	add	r7, sp, #0
 8013438:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4618      	mov	r0, r3
 801343e:	370c      	adds	r7, #12
 8013440:	46bd      	mov	sp, r7
 8013442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013446:	4770      	bx	lr

08013448 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	4618      	mov	r0, r3
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801345e:	b580      	push	{r7, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013468:	6839      	ldr	r1, [r7, #0]
 801346a:	6878      	ldr	r0, [r7, #4]
 801346c:	f000 fcf4 	bl	8013e58 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	4618      	mov	r0, r3
 8013474:	3708      	adds	r7, #8
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}

0801347a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 801347a:	b590      	push	{r4, r7, lr}
 801347c:	b087      	sub	sp, #28
 801347e:	af00      	add	r7, sp, #0
 8013480:	60f8      	str	r0, [r7, #12]
 8013482:	60b9      	str	r1, [r7, #8]
 8013484:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8013486:	68fc      	ldr	r4, [r7, #12]
 8013488:	f107 0314 	add.w	r3, r7, #20
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	4618      	mov	r0, r3
 8013490:	f000 fcee 	bl	8013e70 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>
 8013494:	f107 0314 	add.w	r3, r7, #20
 8013498:	461a      	mov	r2, r3
 801349a:	68b9      	ldr	r1, [r7, #8]
 801349c:	4620      	mov	r0, r4
 801349e:	f000 fcf4 	bl	8013e8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 80134a2:	f107 0314 	add.w	r3, r7, #20
 80134a6:	4618      	mov	r0, r3
 80134a8:	f000 f852 	bl	8013550 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	4618      	mov	r0, r3
 80134b0:	371c      	adds	r7, #28
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd90      	pop	{r4, r7, pc}

080134b6 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80134b6:	b480      	push	{r7}
 80134b8:	b083      	sub	sp, #12
 80134ba:	af00      	add	r7, sp, #0
 80134bc:	6078      	str	r0, [r7, #4]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4618      	mov	r0, r3
 80134c4:	370c      	adds	r7, #12
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr

080134ce <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80134ce:	b590      	push	{r4, r7, lr}
 80134d0:	b083      	sub	sp, #12
 80134d2:	af00      	add	r7, sp, #0
 80134d4:	6078      	str	r0, [r7, #4]
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f7ff ffed 	bl	80134b6 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 80134dc:	4604      	mov	r4, r0
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f000 fcf0 	bl	8013ec4 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 80134e4:	4602      	mov	r2, r0
 80134e6:	4613      	mov	r3, r2
 80134e8:	009b      	lsls	r3, r3, #2
 80134ea:	4413      	add	r3, r2
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	4423      	add	r3, r4
 80134f0:	4618      	mov	r0, r3
 80134f2:	370c      	adds	r7, #12
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd90      	pop	{r4, r7, pc}

080134f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b088      	sub	sp, #32
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8013504:	f107 0314 	add.w	r3, r7, #20
 8013508:	68f9      	ldr	r1, [r7, #12]
 801350a:	4618      	mov	r0, r3
 801350c:	f000 fce6 	bl	8013edc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8013510:	68ba      	ldr	r2, [r7, #8]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	429a      	cmp	r2, r3
 8013516:	d017      	beq.n	8013548 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	f000 fcee 	bl	8013efa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801351e:	4603      	mov	r3, r0
 8013520:	61fb      	str	r3, [r7, #28]
 8013522:	f107 021c 	add.w	r2, r7, #28
 8013526:	f107 0318 	add.w	r3, r7, #24
 801352a:	4611      	mov	r1, r2
 801352c:	4618      	mov	r0, r3
 801352e:	f000 fcf5 	bl	8013f1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8013532:	f107 0314 	add.w	r3, r7, #20
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	69b9      	ldr	r1, [r7, #24]
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f000 fcfe 	bl	8013f3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8013540:	68bb      	ldr	r3, [r7, #8]
 8013542:	3314      	adds	r3, #20
 8013544:	60bb      	str	r3, [r7, #8]
 8013546:	e7e3      	b.n	8013510 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8013548:	bf00      	nop
 801354a:	3720      	adds	r7, #32
 801354c:	46bd      	mov	sp, r7
 801354e:	bd80      	pop	{r7, pc}

08013550 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013550:	b480      	push	{r7}
 8013552:	b083      	sub	sp, #12
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4618      	mov	r0, r3
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr

08013566 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013566:	b580      	push	{r7, lr}
 8013568:	b084      	sub	sp, #16
 801356a:	af00      	add	r7, sp, #0
 801356c:	6078      	str	r0, [r7, #4]
 801356e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d012      	beq.n	801359c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8013576:	6838      	ldr	r0, [r7, #0]
 8013578:	f000 fd13 	bl	8013fa2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 801357c:	4603      	mov	r3, r0
 801357e:	4619      	mov	r1, r3
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f7ff fff0 	bl	8013566 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8013586:	6838      	ldr	r0, [r7, #0]
 8013588:	f000 fd17 	bl	8013fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 801358c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801358e:	6839      	ldr	r1, [r7, #0]
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f000 fd1e 	bl	8013fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801359a:	e7e9      	b.n	8013570 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 801359c:	bf00      	nop
 801359e:	3710      	adds	r7, #16
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}

080135a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	689b      	ldr	r3, [r3, #8]
 80135b0:	4618      	mov	r0, r3
 80135b2:	370c      	adds	r7, #12
 80135b4:	46bd      	mov	sp, r7
 80135b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ba:	4770      	bx	lr

080135bc <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80135bc:	b480      	push	{r7}
 80135be:	b083      	sub	sp, #12
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	4618      	mov	r0, r3
 80135c8:	370c      	adds	r7, #12
 80135ca:	46bd      	mov	sp, r7
 80135cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d0:	4770      	bx	lr

080135d2 <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 80135d2:	b580      	push	{r7, lr}
 80135d4:	b082      	sub	sp, #8
 80135d6:	af00      	add	r7, sp, #0
 80135d8:	6078      	str	r0, [r7, #4]
 80135da:	6039      	str	r1, [r7, #0]
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ee f818 	bl	8001614 <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 80135e4:	6879      	ldr	r1, [r7, #4]
 80135e6:	6838      	ldr	r0, [r7, #0]
 80135e8:	f7fc fca7 	bl	800ff3a <_ZNSt8functionIFvvEE4swapERS1_>
      }
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	4618      	mov	r0, r3
 80135f0:	3708      	adds	r7, #8
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}

080135f6 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
 80135f6:	b480      	push	{r7}
 80135f8:	b083      	sub	sp, #12
 80135fa:	af00      	add	r7, sp, #0
 80135fc:	6078      	str	r0, [r7, #4]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	4618      	mov	r0, r3
 8013602:	370c      	adds	r7, #12
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8013616:	6839      	ldr	r1, [r7, #0]
 8013618:	6878      	ldr	r0, [r7, #4]
 801361a:	f000 fceb 	bl	8013ff4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 8013628:	b590      	push	{r4, r7, lr}
 801362a:	b087      	sub	sp, #28
 801362c:	af00      	add	r7, sp, #0
 801362e:	60f8      	str	r0, [r7, #12]
 8013630:	60b9      	str	r1, [r7, #8]
 8013632:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8013634:	68fc      	ldr	r4, [r7, #12]
 8013636:	f107 0314 	add.w	r3, r7, #20
 801363a:	6879      	ldr	r1, [r7, #4]
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fce5 	bl	801400c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>
 8013642:	f107 0314 	add.w	r3, r7, #20
 8013646:	461a      	mov	r2, r3
 8013648:	68b9      	ldr	r1, [r7, #8]
 801364a:	4620      	mov	r0, r4
 801364c:	f000 fceb 	bl	8014026 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8013650:	f107 0314 	add.w	r3, r7, #20
 8013654:	4618      	mov	r0, r3
 8013656:	f000 f852 	bl	80136fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	4618      	mov	r0, r3
 801365e:	371c      	adds	r7, #28
 8013660:	46bd      	mov	sp, r7
 8013662:	bd90      	pop	{r4, r7, pc}

08013664 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4618      	mov	r0, r3
 8013672:	370c      	adds	r7, #12
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr

0801367c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 801367c:	b590      	push	{r4, r7, lr}
 801367e:	b083      	sub	sp, #12
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f7ff ffed 	bl	8013664 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 801368a:	4604      	mov	r4, r0
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f000 fce7 	bl	8014060 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 8013692:	4602      	mov	r2, r0
 8013694:	4613      	mov	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	4423      	add	r3, r4
 801369e:	4618      	mov	r0, r3
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd90      	pop	{r4, r7, pc}

080136a6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80136a6:	b580      	push	{r7, lr}
 80136a8:	b088      	sub	sp, #32
 80136aa:	af00      	add	r7, sp, #0
 80136ac:	60f8      	str	r0, [r7, #12]
 80136ae:	60b9      	str	r1, [r7, #8]
 80136b0:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80136b2:	f107 0314 	add.w	r3, r7, #20
 80136b6:	68f9      	ldr	r1, [r7, #12]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f000 fcdd 	bl	8014078 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 80136be:	68ba      	ldr	r2, [r7, #8]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d017      	beq.n	80136f6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80136c6:	68f8      	ldr	r0, [r7, #12]
 80136c8:	f7fc fc9a 	bl	8010000 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80136cc:	4603      	mov	r3, r0
 80136ce:	61fb      	str	r3, [r7, #28]
 80136d0:	f107 021c 	add.w	r2, r7, #28
 80136d4:	f107 0318 	add.w	r3, r7, #24
 80136d8:	4611      	mov	r1, r2
 80136da:	4618      	mov	r0, r3
 80136dc:	f7fc fa37 	bl	800fb4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 80136e0:	f107 0314 	add.w	r3, r7, #20
 80136e4:	68ba      	ldr	r2, [r7, #8]
 80136e6:	69b9      	ldr	r1, [r7, #24]
 80136e8:	68f8      	ldr	r0, [r7, #12]
 80136ea:	f000 fcd4 	bl	8014096 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	331c      	adds	r3, #28
 80136f2:	60bb      	str	r3, [r7, #8]
 80136f4:	e7e3      	b.n	80136be <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 80136f6:	bf00      	nop
 80136f8:	3720      	adds	r7, #32
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}

080136fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80136fe:	b480      	push	{r7}
 8013700:	b083      	sub	sp, #12
 8013702:	af00      	add	r7, sp, #0
 8013704:	6078      	str	r0, [r7, #4]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	4618      	mov	r0, r3
 801370a:	370c      	adds	r7, #12
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr

08013714 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013714:	b580      	push	{r7, lr}
 8013716:	b084      	sub	sp, #16
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d012      	beq.n	801374a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8013724:	6838      	ldr	r0, [r7, #0]
 8013726:	f7fd fde1 	bl	80112ec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801372a:	4603      	mov	r3, r0
 801372c:	4619      	mov	r1, r3
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f7ff fff0 	bl	8013714 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8013734:	6838      	ldr	r0, [r7, #0]
 8013736:	f7fe f911 	bl	801195c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801373a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801373c:	6839      	ldr	r1, [r7, #0]
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7fc ffb3 	bl	80106aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013748:	e7e9      	b.n	801371e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801374a:	bf00      	nop
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
 8013752:	b480      	push	{r7}
 8013754:	b083      	sub	sp, #12
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	4618      	mov	r0, r3
 801375e:	370c      	adds	r7, #12
 8013760:	46bd      	mov	sp, r7
 8013762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013766:	4770      	bx	lr

08013768 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013768:	b580      	push	{r7, lr}
 801376a:	b088      	sub	sp, #32
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	60b9      	str	r1, [r7, #8]
 8013772:	607a      	str	r2, [r7, #4]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	61fb      	str	r3, [r7, #28]
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	61bb      	str	r3, [r7, #24]
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8013780:	f7fa fb3c 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8013784:	4603      	mov	r3, r0
 8013786:	2b00      	cmp	r3, #0
 8013788:	d003      	beq.n	8013792 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 801378a:	69b8      	ldr	r0, [r7, #24]
 801378c:	f005 fec4 	bl	8019518 <_ZdlPv>
	    return;
 8013790:	e005      	b.n	801379e <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8013792:	697a      	ldr	r2, [r7, #20]
 8013794:	69b9      	ldr	r1, [r7, #24]
 8013796:	69f8      	ldr	r0, [r7, #28]
 8013798:	f001 feb5 	bl	8015506 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 801379c:	bf00      	nop
 801379e:	bf00      	nop
 80137a0:	3720      	adds	r7, #32
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b082      	sub	sp, #8
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
 80137ae:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80137b0:	f7fa fb24 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d004      	beq.n	80137c4 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80137ba:	6839      	ldr	r1, [r7, #0]
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f000 fc9d 	bl	80140fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 80137c2:	e003      	b.n	80137cc <_ZSt8_DestroyIPmEvT_S1_+0x26>
	__destroy(__first, __last);
 80137c4:	6839      	ldr	r1, [r7, #0]
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f000 fcb0 	bl	801412c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80137d2:	b480      	push	{r7}
 80137d4:	b083      	sub	sp, #12
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	6039      	str	r1, [r7, #0]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4618      	mov	r0, r3
 80137e0:	370c      	adds	r7, #12
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr

080137ea <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b082      	sub	sp, #8
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
 80137f2:	6039      	str	r1, [r7, #0]
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f000 fca4 	bl	8014142 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	3708      	adds	r7, #8
 8013800:	46bd      	mov	sp, r7
 8013802:	bd80      	pop	{r7, pc}

08013804 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 fca1 	bl	8014158 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>
 8013816:	4603      	mov	r3, r0
 8013818:	4619      	mov	r1, r3
 801381a:	68f8      	ldr	r0, [r7, #12]
 801381c:	f000 fca7 	bl	801416e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	68b9      	ldr	r1, [r7, #8]
 8013824:	4618      	mov	r0, r3
 8013826:	f000 fcb0 	bl	801418a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	3304      	adds	r3, #4
 801382e:	4618      	mov	r0, r3
 8013830:	f7fb fbb2 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	4618      	mov	r0, r3
 8013838:	3710      	adds	r7, #16
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}

0801383e <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>:
      size() const noexcept { return _M_len; }
 801383e:	b480      	push	{r7}
 8013840:	b083      	sub	sp, #12
 8013842:	af00      	add	r7, sp, #0
 8013844:	6078      	str	r0, [r7, #4]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	4618      	mov	r0, r3
 801384c:	370c      	adds	r7, #12
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr

08013856 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 8013856:	b480      	push	{r7}
 8013858:	b083      	sub	sp, #12
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]
 801385e:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	4618      	mov	r0, r3
 801386a:	370c      	adds	r7, #12
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	1d1a      	adds	r2, r3, #4
 8013880:	f107 030c 	add.w	r3, r7, #12
 8013884:	4611      	mov	r1, r2
 8013886:	4618      	mov	r0, r3
 8013888:	f000 fc8b 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	4618      	mov	r0, r3
 8013890:	3710      	adds	r7, #16
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013896:	b480      	push	{r7}
 8013898:	b083      	sub	sp, #12
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
 801389e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	601a      	str	r2, [r3, #0]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4618      	mov	r0, r3
 80138ac:	370c      	adds	r7, #12
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr

080138b6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80138b6:	b5b0      	push	{r4, r5, r7, lr}
 80138b8:	b08a      	sub	sp, #40	; 0x28
 80138ba:	af02      	add	r7, sp, #8
 80138bc:	60f8      	str	r0, [r7, #12]
 80138be:	60b9      	str	r1, [r7, #8]
 80138c0:	607a      	str	r2, [r7, #4]
 80138c2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80138c4:	f107 0318 	add.w	r3, r7, #24
 80138c8:	6879      	ldr	r1, [r7, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f000 fd9b 	bl	8014406 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f107 0010 	add.w	r0, r7, #16
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	68f9      	ldr	r1, [r7, #12]
 80138da:	f000 fc71 	bl	80141c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00f      	beq.n	8013904 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80138e4:	693c      	ldr	r4, [r7, #16]
 80138e6:	697d      	ldr	r5, [r7, #20]
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 fd98 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 80138ee:	4602      	mov	r2, r0
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	9300      	str	r3, [sp, #0]
 80138f4:	4613      	mov	r3, r2
 80138f6:	462a      	mov	r2, r5
 80138f8:	4621      	mov	r1, r4
 80138fa:	68f8      	ldr	r0, [r7, #12]
 80138fc:	f000 fd9a 	bl	8014434 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 8013900:	4603      	mov	r3, r0
			  __node_gen);
 8013902:	e007      	b.n	8013914 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8013904:	693a      	ldr	r2, [r7, #16]
 8013906:	f107 031c 	add.w	r3, r7, #28
 801390a:	4611      	mov	r1, r2
 801390c:	4618      	mov	r0, r3
 801390e:	f000 fc48 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8013912:	69fb      	ldr	r3, [r7, #28]
    }
 8013914:	4618      	mov	r0, r3
 8013916:	3720      	adds	r7, #32
 8013918:	46bd      	mov	sp, r7
 801391a:	bdb0      	pop	{r4, r5, r7, pc}

0801391c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801391c:	b480      	push	{r7}
 801391e:	b083      	sub	sp, #12
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	4618      	mov	r0, r3
 801392a:	370c      	adds	r7, #12
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr

08013934 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013934:	b480      	push	{r7}
 8013936:	b083      	sub	sp, #12
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	4618      	mov	r0, r3
 8013942:	370c      	adds	r7, #12
 8013944:	46bd      	mov	sp, r7
 8013946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801394a:	4770      	bx	lr

0801394c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013956:	6839      	ldr	r1, [r7, #0]
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f000 fdb4 	bl	80144c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 801395e:	6839      	ldr	r1, [r7, #0]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 fdc5 	bl	80144f0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8013966:	bf00      	nop
 8013968:	3708      	adds	r7, #8
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>:
 801396e:	b480      	push	{r7}
 8013970:	b083      	sub	sp, #12
 8013972:	af00      	add	r7, sp, #0
 8013974:	6078      	str	r0, [r7, #4]
 8013976:	6039      	str	r1, [r7, #0]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	370c      	adds	r7, #12
 801397e:	46bd      	mov	sp, r7
 8013980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013984:	4770      	bx	lr

08013986 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>:
 8013986:	b580      	push	{r7, lr}
 8013988:	b082      	sub	sp, #8
 801398a:	af00      	add	r7, sp, #0
 801398c:	6078      	str	r0, [r7, #4]
 801398e:	6039      	str	r1, [r7, #0]
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f8ba 	bl	8013b0a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	4618      	mov	r0, r3
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	60f8      	str	r0, [r7, #12]
 80139a8:	60b9      	str	r1, [r7, #8]
 80139aa:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 fdb1 	bl	8014514 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>
 80139b2:	4603      	mov	r3, r0
 80139b4:	4619      	mov	r1, r3
 80139b6:	68f8      	ldr	r0, [r7, #12]
 80139b8:	f000 fdb7 	bl	801452a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	68b9      	ldr	r1, [r7, #8]
 80139c0:	4618      	mov	r0, r3
 80139c2:	f000 fdc0 	bl	8014546 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	3304      	adds	r3, #4
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fb fae4 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	4618      	mov	r0, r3
 80139d4:	3710      	adds	r7, #16
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}

080139da <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>:
 80139da:	b480      	push	{r7}
 80139dc:	b083      	sub	sp, #12
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	685b      	ldr	r3, [r3, #4]
 80139e6:	4618      	mov	r0, r3
 80139e8:	370c      	adds	r7, #12
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr

080139f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 80139f2:	b480      	push	{r7}
 80139f4:	b083      	sub	sp, #12
 80139f6:	af00      	add	r7, sp, #0
 80139f8:	6078      	str	r0, [r7, #4]
 80139fa:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	683a      	ldr	r2, [r7, #0]
 8013a00:	601a      	str	r2, [r3, #0]
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4618      	mov	r0, r3
 8013a06:	370c      	adds	r7, #12
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0e:	4770      	bx	lr

08013a10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b084      	sub	sp, #16
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	1d1a      	adds	r2, r3, #4
 8013a1c:	f107 030c 	add.w	r3, r7, #12
 8013a20:	4611      	mov	r1, r2
 8013a22:	4618      	mov	r0, r3
 8013a24:	f000 fd9b 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	3710      	adds	r7, #16
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bd80      	pop	{r7, pc}

08013a32 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013a32:	b480      	push	{r7}
 8013a34:	b083      	sub	sp, #12
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
 8013a3a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	601a      	str	r2, [r3, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	4618      	mov	r0, r3
 8013a48:	370c      	adds	r7, #12
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013a52:	b5b0      	push	{r4, r5, r7, lr}
 8013a54:	b08a      	sub	sp, #40	; 0x28
 8013a56:	af02      	add	r7, sp, #8
 8013a58:	60f8      	str	r0, [r7, #12]
 8013a5a:	60b9      	str	r1, [r7, #8]
 8013a5c:	607a      	str	r2, [r7, #4]
 8013a5e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8013a60:	f107 0318 	add.w	r3, r7, #24
 8013a64:	6879      	ldr	r1, [r7, #4]
 8013a66:	4618      	mov	r0, r3
 8013a68:	f000 feab 	bl	80147c2 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	f107 0010 	add.w	r0, r7, #16
 8013a72:	68ba      	ldr	r2, [r7, #8]
 8013a74:	68f9      	ldr	r1, [r7, #12]
 8013a76:	f000 fd81 	bl	801457c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>
      if (__res.second)
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d00f      	beq.n	8013aa0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8013a80:	693c      	ldr	r4, [r7, #16]
 8013a82:	697d      	ldr	r5, [r7, #20]
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f000 fea8 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	4613      	mov	r3, r2
 8013a92:	462a      	mov	r2, r5
 8013a94:	4621      	mov	r1, r4
 8013a96:	68f8      	ldr	r0, [r7, #12]
 8013a98:	f000 feaa 	bl	80147f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8013a9c:	4603      	mov	r3, r0
			  __node_gen);
 8013a9e:	e007      	b.n	8013ab0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8013aa0:	693a      	ldr	r2, [r7, #16]
 8013aa2:	f107 031c 	add.w	r3, r7, #28
 8013aa6:	4611      	mov	r1, r2
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f000 fd58 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8013aae:	69fb      	ldr	r3, [r7, #28]
    }
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	3720      	adds	r7, #32
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bdb0      	pop	{r4, r5, r7, pc}

08013ab8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013ab8:	b480      	push	{r7}
 8013aba:	b083      	sub	sp, #12
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013ad0:	b480      	push	{r7}
 8013ad2:	b083      	sub	sp, #12
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	4618      	mov	r0, r3
 8013ade:	370c      	adds	r7, #12
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013af2:	6839      	ldr	r1, [r7, #0]
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 fec4 	bl	8014882 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8013afa:	6839      	ldr	r1, [r7, #0]
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 fed5 	bl	80148ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8013b02:	bf00      	nop
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013b0a:	b480      	push	{r7}
 8013b0c:	b083      	sub	sp, #12
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	4618      	mov	r0, r3
 8013b16:	370c      	adds	r7, #12
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1e:	4770      	bx	lr

08013b20 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8013b20:	b480      	push	{r7}
 8013b22:	b083      	sub	sp, #12
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	370c      	adds	r7, #12
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr

08013b38 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>:
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fec4 	bl	80148d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3708      	adds	r7, #8
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b084      	sub	sp, #16
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	60f8      	str	r0, [r7, #12]
 8013b5a:	60b9      	str	r1, [r7, #8]
 8013b5c:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8013b5e:	6878      	ldr	r0, [r7, #4]
 8013b60:	f000 fec1 	bl	80148e6 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013b64:	4603      	mov	r3, r0
 8013b66:	4619      	mov	r1, r3
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f000 fec7 	bl	80148fc <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	68b9      	ldr	r1, [r7, #8]
 8013b72:	4618      	mov	r0, r3
 8013b74:	f000 fb09 	bl	801418a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	3304      	adds	r3, #4
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fb fa0b 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	4618      	mov	r0, r3
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>:
 8013b8c:	b480      	push	{r7}
 8013b8e:	b083      	sub	sp, #12
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	685b      	ldr	r3, [r3, #4]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr

08013ba4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	683a      	ldr	r2, [r7, #0]
 8013bb2:	601a      	str	r2, [r3, #0]
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	370c      	adds	r7, #12
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc0:	4770      	bx	lr

08013bc2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013bc2:	b580      	push	{r7, lr}
 8013bc4:	b084      	sub	sp, #16
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	1d1a      	adds	r2, r3, #4
 8013bce:	f107 030c 	add.w	r3, r7, #12
 8013bd2:	4611      	mov	r1, r2
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f000 fe9f 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3710      	adds	r7, #16
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013be4:	b480      	push	{r7}
 8013be6:	b083      	sub	sp, #12
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	601a      	str	r2, [r3, #0]
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	370c      	adds	r7, #12
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr

08013c04 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b08a      	sub	sp, #40	; 0x28
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	607a      	str	r2, [r7, #4]
 8013c10:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8013c12:	f107 0318 	add.w	r3, r7, #24
 8013c16:	6879      	ldr	r1, [r7, #4]
 8013c18:	4618      	mov	r0, r3
 8013c1a:	f000 ffaf 	bl	8014b7c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	f107 0010 	add.w	r0, r7, #16
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	68f9      	ldr	r1, [r7, #12]
 8013c28:	f000 fe85 	bl	8014936 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>
      if (__res.second)
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d00f      	beq.n	8013c52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8013c32:	693c      	ldr	r4, [r7, #16]
 8013c34:	697d      	ldr	r5, [r7, #20]
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f000 ffac 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8013c3c:	4602      	mov	r2, r0
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	4613      	mov	r3, r2
 8013c44:	462a      	mov	r2, r5
 8013c46:	4621      	mov	r1, r4
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f000 ffae 	bl	8014baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8013c4e:	4603      	mov	r3, r0
			  __node_gen);
 8013c50:	e007      	b.n	8013c62 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8013c52:	693a      	ldr	r2, [r7, #16]
 8013c54:	f107 031c 	add.w	r3, r7, #28
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f000 fe5c 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8013c60:	69fb      	ldr	r3, [r7, #28]
    }
 8013c62:	4618      	mov	r0, r3
 8013c64:	3720      	adds	r7, #32
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bdb0      	pop	{r4, r5, r7, pc}

08013c6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013c6a:	b480      	push	{r7}
 8013c6c:	b083      	sub	sp, #12
 8013c6e:	af00      	add	r7, sp, #0
 8013c70:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	4618      	mov	r0, r3
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr

08013c82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013c82:	b480      	push	{r7}
 8013c84:	b083      	sub	sp, #12
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	689b      	ldr	r3, [r3, #8]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	370c      	adds	r7, #12
 8013c92:	46bd      	mov	sp, r7
 8013c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c98:	4770      	bx	lr

08013c9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8013c9a:	b580      	push	{r7, lr}
 8013c9c:	b082      	sub	sp, #8
 8013c9e:	af00      	add	r7, sp, #0
 8013ca0:	6078      	str	r0, [r7, #4]
 8013ca2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013ca4:	6839      	ldr	r1, [r7, #0]
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 ffc8 	bl	8014c3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8013cac:	6839      	ldr	r1, [r7, #0]
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 ffd9 	bl	8014c66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8013cb4:	bf00      	nop
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>:
 8013cbc:	b480      	push	{r7}
 8013cbe:	b083      	sub	sp, #12
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6039      	str	r1, [r7, #0]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd2:	4770      	bx	lr

08013cd4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>:
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b082      	sub	sp, #8
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
 8013cdc:	6039      	str	r1, [r7, #0]
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f000 ffd3 	bl	8014c8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}

08013cee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8013cee:	b580      	push	{r7, lr}
 8013cf0:	b084      	sub	sp, #16
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	60f8      	str	r0, [r7, #12]
 8013cf6:	60b9      	str	r1, [r7, #8]
 8013cf8:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f000 ffd0 	bl	8014ca0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013d00:	4603      	mov	r3, r0
 8013d02:	4619      	mov	r1, r3
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f000 ffd6 	bl	8014cb6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68b9      	ldr	r1, [r7, #8]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f000 fc19 	bl	8014546 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	3304      	adds	r3, #4
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fb f93d 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	4618      	mov	r0, r3
 8013d22:	3710      	adds	r7, #16
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	4618      	mov	r0, r3
 8013d36:	370c      	adds	r7, #12
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d3e:	4770      	bx	lr

08013d40 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	601a      	str	r2, [r3, #0]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	4618      	mov	r0, r3
 8013d54:	370c      	adds	r7, #12
 8013d56:	46bd      	mov	sp, r7
 8013d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5c:	4770      	bx	lr

08013d5e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b084      	sub	sp, #16
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	1d1a      	adds	r2, r3, #4
 8013d6a:	f107 030c 	add.w	r3, r7, #12
 8013d6e:	4611      	mov	r1, r2
 8013d70:	4618      	mov	r0, r3
 8013d72:	f000 ffae 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	681a      	ldr	r2, [r3, #0]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	4618      	mov	r0, r3
 8013d96:	370c      	adds	r7, #12
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9e:	4770      	bx	lr

08013da0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013da0:	b5b0      	push	{r4, r5, r7, lr}
 8013da2:	b08a      	sub	sp, #40	; 0x28
 8013da4:	af02      	add	r7, sp, #8
 8013da6:	60f8      	str	r0, [r7, #12]
 8013da8:	60b9      	str	r1, [r7, #8]
 8013daa:	607a      	str	r2, [r7, #4]
 8013dac:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8013dae:	f107 0318 	add.w	r3, r7, #24
 8013db2:	6879      	ldr	r1, [r7, #4]
 8013db4:	4618      	mov	r0, r3
 8013db6:	f001 f8be 	bl	8014f36 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	f107 0010 	add.w	r0, r7, #16
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	68f9      	ldr	r1, [r7, #12]
 8013dc4:	f000 ff94 	bl	8014cf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d00f      	beq.n	8013dee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8013dce:	693c      	ldr	r4, [r7, #16]
 8013dd0:	697d      	ldr	r5, [r7, #20]
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f001 f8bb 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	9300      	str	r3, [sp, #0]
 8013dde:	4613      	mov	r3, r2
 8013de0:	462a      	mov	r2, r5
 8013de2:	4621      	mov	r1, r4
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f001 f8bd 	bl	8014f64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8013dea:	4603      	mov	r3, r0
			  __node_gen);
 8013dec:	e007      	b.n	8013dfe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8013dee:	693a      	ldr	r2, [r7, #16]
 8013df0:	f107 031c 	add.w	r3, r7, #28
 8013df4:	4611      	mov	r1, r2
 8013df6:	4618      	mov	r0, r3
 8013df8:	f000 ff6b 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013dfc:	69fb      	ldr	r3, [r7, #28]
    }
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3720      	adds	r7, #32
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bdb0      	pop	{r4, r5, r7, pc}

08013e06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013e06:	b480      	push	{r7}
 8013e08:	b083      	sub	sp, #12
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	4618      	mov	r0, r3
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013e1e:	b480      	push	{r7}
 8013e20:	b083      	sub	sp, #12
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	370c      	adds	r7, #12
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e34:	4770      	bx	lr

08013e36 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b082      	sub	sp, #8
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013e40:	6839      	ldr	r1, [r7, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f001 f8d7 	bl	8014ff6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8013e48:	6839      	ldr	r1, [r7, #0]
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f001 f8e8 	bl	8015020 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8013e50:	bf00      	nop
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>:
 8013e58:	b480      	push	{r7}
 8013e5a:	b083      	sub	sp, #12
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	370c      	adds	r7, #12
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6e:	4770      	bx	lr

08013e70 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>:
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
 8013e78:	6039      	str	r1, [r7, #0]
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f001 f8e2 	bl	8015044 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	4618      	mov	r0, r3
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b084      	sub	sp, #16
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	60f8      	str	r0, [r7, #12]
 8013e92:	60b9      	str	r1, [r7, #8]
 8013e94:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 f8df 	bl	801505a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f001 f8e5 	bl	8015070 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	68b9      	ldr	r1, [r7, #8]
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f000 fb4b 	bl	8014546 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fb f86f 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3710      	adds	r7, #16
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 8013ec4:	b480      	push	{r7}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	370c      	adds	r7, #12
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eda:	4770      	bx	lr

08013edc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8013edc:	b480      	push	{r7}
 8013ede:	b083      	sub	sp, #12
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	683a      	ldr	r2, [r7, #0]
 8013eea:	601a      	str	r2, [r3, #0]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	370c      	adds	r7, #12
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr

08013efa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b084      	sub	sp, #16
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	1d1a      	adds	r2, r3, #4
 8013f06:	f107 030c 	add.w	r3, r7, #12
 8013f0a:	4611      	mov	r1, r2
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f001 f8bd 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	4618      	mov	r0, r3
 8013f16:	3710      	adds	r7, #16
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013f1c:	b480      	push	{r7}
 8013f1e:	b083      	sub	sp, #12
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	601a      	str	r2, [r3, #0]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr

08013f3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013f3c:	b5b0      	push	{r4, r5, r7, lr}
 8013f3e:	b08a      	sub	sp, #40	; 0x28
 8013f40:	af02      	add	r7, sp, #8
 8013f42:	60f8      	str	r0, [r7, #12]
 8013f44:	60b9      	str	r1, [r7, #8]
 8013f46:	607a      	str	r2, [r7, #4]
 8013f48:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8013f4a:	f107 0318 	add.w	r3, r7, #24
 8013f4e:	6879      	ldr	r1, [r7, #4]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f001 f9cd 	bl	80152f0 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8013f56:	4603      	mov	r3, r0
 8013f58:	f107 0010 	add.w	r0, r7, #16
 8013f5c:	68ba      	ldr	r2, [r7, #8]
 8013f5e:	68f9      	ldr	r1, [r7, #12]
 8013f60:	f001 f8a3 	bl	80150aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d00f      	beq.n	8013f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8013f6a:	693c      	ldr	r4, [r7, #16]
 8013f6c:	697d      	ldr	r5, [r7, #20]
 8013f6e:	6878      	ldr	r0, [r7, #4]
 8013f70:	f001 f9ca 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8013f74:	4602      	mov	r2, r0
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	462a      	mov	r2, r5
 8013f7e:	4621      	mov	r1, r4
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	f001 f9cc 	bl	801531e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8013f86:	4603      	mov	r3, r0
			  __node_gen);
 8013f88:	e007      	b.n	8013f9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8013f8a:	693a      	ldr	r2, [r7, #16]
 8013f8c:	f107 031c 	add.w	r3, r7, #28
 8013f90:	4611      	mov	r1, r2
 8013f92:	4618      	mov	r0, r3
 8013f94:	f001 f87a 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013f98:	69fb      	ldr	r3, [r7, #28]
    }
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	3720      	adds	r7, #32
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	bdb0      	pop	{r4, r5, r7, pc}

08013fa2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013fa2:	b480      	push	{r7}
 8013fa4:	b083      	sub	sp, #12
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	370c      	adds	r7, #12
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb8:	4770      	bx	lr

08013fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013fba:	b480      	push	{r7}
 8013fbc:	b083      	sub	sp, #12
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	689b      	ldr	r3, [r3, #8]
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	370c      	adds	r7, #12
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd0:	4770      	bx	lr

08013fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b082      	sub	sp, #8
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
 8013fda:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013fdc:	6839      	ldr	r1, [r7, #0]
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f001 f9e6 	bl	80153b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8013fe4:	6839      	ldr	r1, [r7, #0]
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f001 f9f7 	bl	80153da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8013fec:	bf00      	nop
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}

08013ff4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>:
 8013ff4:	b480      	push	{r7}
 8013ff6:	b083      	sub	sp, #12
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	4618      	mov	r0, r3
 8014002:	370c      	adds	r7, #12
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>:
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	6039      	str	r1, [r7, #0]
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f001 f9f1 	bl	80153fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	3708      	adds	r7, #8
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}

08014026 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8014026:	b580      	push	{r7, lr}
 8014028:	b084      	sub	sp, #16
 801402a:	af00      	add	r7, sp, #0
 801402c:	60f8      	str	r0, [r7, #12]
 801402e:	60b9      	str	r1, [r7, #8]
 8014030:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f001 f9ee 	bl	8015414 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>
 8014038:	4603      	mov	r3, r0
 801403a:	4619      	mov	r1, r3
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f001 f9f4 	bl	801542a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	68b9      	ldr	r1, [r7, #8]
 8014046:	4618      	mov	r0, r3
 8014048:	f001 f9fd 	bl	8015446 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	3304      	adds	r3, #4
 8014050:	4618      	mov	r0, r3
 8014052:	f7fa ffa1 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	4618      	mov	r0, r3
 801405a:	3710      	adds	r7, #16
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}

08014060 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 8014060:	b480      	push	{r7}
 8014062:	b083      	sub	sp, #12
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	4618      	mov	r0, r3
 801406e:	370c      	adds	r7, #12
 8014070:	46bd      	mov	sp, r7
 8014072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014076:	4770      	bx	lr

08014078 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 8014078:	b480      	push	{r7}
 801407a:	b083      	sub	sp, #12
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
 8014080:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	683a      	ldr	r2, [r7, #0]
 8014086:	601a      	str	r2, [r3, #0]
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	4618      	mov	r0, r3
 801408c:	370c      	adds	r7, #12
 801408e:	46bd      	mov	sp, r7
 8014090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014094:	4770      	bx	lr

08014096 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014096:	b5b0      	push	{r4, r5, r7, lr}
 8014098:	b08a      	sub	sp, #40	; 0x28
 801409a:	af02      	add	r7, sp, #8
 801409c:	60f8      	str	r0, [r7, #12]
 801409e:	60b9      	str	r1, [r7, #8]
 80140a0:	607a      	str	r2, [r7, #4]
 80140a2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80140a4:	f107 0318 	add.w	r3, r7, #24
 80140a8:	6879      	ldr	r1, [r7, #4]
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fd f94e 	bl	801134c <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 80140b0:	4603      	mov	r3, r0
 80140b2:	f107 0010 	add.w	r0, r7, #16
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	68f9      	ldr	r1, [r7, #12]
 80140ba:	f7fc f983 	bl	80103c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d00f      	beq.n	80140e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80140c4:	693c      	ldr	r4, [r7, #16]
 80140c6:	697d      	ldr	r5, [r7, #20]
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f001 f9c8 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80140ce:	4602      	mov	r2, r0
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	9300      	str	r3, [sp, #0]
 80140d4:	4613      	mov	r3, r2
 80140d6:	462a      	mov	r2, r5
 80140d8:	4621      	mov	r1, r4
 80140da:	68f8      	ldr	r0, [r7, #12]
 80140dc:	f001 f9ca 	bl	8015474 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 80140e0:	4603      	mov	r3, r0
			  __node_gen);
 80140e2:	e007      	b.n	80140f4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80140e4:	693a      	ldr	r2, [r7, #16]
 80140e6:	f107 031c 	add.w	r3, r7, #28
 80140ea:	4611      	mov	r1, r2
 80140ec:	4618      	mov	r0, r3
 80140ee:	f7fc faed 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80140f2:	69fb      	ldr	r3, [r7, #28]
    }
 80140f4:	4618      	mov	r0, r3
 80140f6:	3720      	adds	r7, #32
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bdb0      	pop	{r4, r5, r7, pc}

080140fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	429a      	cmp	r2, r3
 801410c:	d00a      	beq.n	8014124 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 801410e:	6878      	ldr	r0, [r7, #4]
 8014110:	f001 fa08 	bl	8015524 <_ZSt11__addressofImEPT_RS0_>
 8014114:	4603      	mov	r3, r0
 8014116:	4618      	mov	r0, r3
 8014118:	f001 fa0f 	bl	801553a <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	3304      	adds	r3, #4
 8014120:	607b      	str	r3, [r7, #4]
 8014122:	e7f0      	b.n	8014106 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 8014124:	bf00      	nop
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 801412c:	b480      	push	{r7}
 801412e:	b083      	sub	sp, #12
 8014130:	af00      	add	r7, sp, #0
 8014132:	6078      	str	r0, [r7, #4]
 8014134:	6039      	str	r1, [r7, #0]
 8014136:	bf00      	nop
 8014138:	370c      	adds	r7, #12
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014142:	b480      	push	{r7}
 8014144:	b083      	sub	sp, #12
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4618      	mov	r0, r3
 801414e:	370c      	adds	r7, #12
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8014158:	b480      	push	{r7}
 801415a:	b083      	sub	sp, #12
 801415c:	af00      	add	r7, sp, #0
 801415e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	4618      	mov	r0, r3
 8014164:	370c      	adds	r7, #12
 8014166:	46bd      	mov	sp, r7
 8014168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416c:	4770      	bx	lr

0801416e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801416e:	b580      	push	{r7, lr}
 8014170:	b082      	sub	sp, #8
 8014172:	af00      	add	r7, sp, #0
 8014174:	6078      	str	r0, [r7, #4]
 8014176:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014178:	6839      	ldr	r1, [r7, #0]
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f001 f9e8 	bl	8015550 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	4618      	mov	r0, r3
 8014184:	3708      	adds	r7, #8
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 801418a:	b480      	push	{r7}
 801418c:	b083      	sub	sp, #12
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
 8014192:	6039      	str	r1, [r7, #0]
      { }
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	4618      	mov	r0, r3
 8014198:	370c      	adds	r7, #12
 801419a:	46bd      	mov	sp, r7
 801419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a0:	4770      	bx	lr

080141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80141a2:	b480      	push	{r7}
 80141a4:	b083      	sub	sp, #12
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
 80141aa:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	683a      	ldr	r2, [r7, #0]
 80141b0:	601a      	str	r2, [r3, #0]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	4618      	mov	r0, r3
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b08d      	sub	sp, #52	; 0x34
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80141ce:	1d3b      	adds	r3, r7, #4
 80141d0:	4618      	mov	r0, r3
 80141d2:	f001 f9c9 	bl	8015568 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>
 80141d6:	4603      	mov	r3, r0
 80141d8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80141da:	69bc      	ldr	r4, [r7, #24]
 80141dc:	68b8      	ldr	r0, [r7, #8]
 80141de:	f001 f9d4 	bl	801558a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 80141e2:	4603      	mov	r3, r0
 80141e4:	429c      	cmp	r4, r3
 80141e6:	bf0c      	ite	eq
 80141e8:	2301      	moveq	r3, #1
 80141ea:	2300      	movne	r3, #0
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d030      	beq.n	8014254 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 80141f2:	68b8      	ldr	r0, [r7, #8]
 80141f4:	f001 f9d5 	bl	80155a2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 80141f8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d013      	beq.n	8014226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 80141fe:	68bc      	ldr	r4, [r7, #8]
 8014200:	68b8      	ldr	r0, [r7, #8]
 8014202:	f001 f9da 	bl	80155ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8014206:	4603      	mov	r3, r0
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	4618      	mov	r0, r3
 801420c:	f001 f9e1 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014210:	4603      	mov	r3, r0
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	4619      	mov	r1, r3
 8014216:	4620      	mov	r0, r4
 8014218:	f001 fa04 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801421c:	4603      	mov	r3, r0
 801421e:	2b00      	cmp	r3, #0
 8014220:	d001      	beq.n	8014226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8014222:	2301      	movs	r3, #1
 8014224:	e000      	b.n	8014228 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8014226:	2300      	movs	r3, #0
	  if (size() > 0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d00c      	beq.n	8014246 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 801422c:	2300      	movs	r3, #0
 801422e:	61fb      	str	r3, [r7, #28]
 8014230:	68b8      	ldr	r0, [r7, #8]
 8014232:	f001 f9c2 	bl	80155ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8014236:	4602      	mov	r2, r0
 8014238:	f107 031c 	add.w	r3, r7, #28
 801423c:	4619      	mov	r1, r3
 801423e:	68f8      	ldr	r0, [r7, #12]
 8014240:	f7fc ff83 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014244:	e0db      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	683a      	ldr	r2, [r7, #0]
 801424a:	68b9      	ldr	r1, [r7, #8]
 801424c:	4618      	mov	r0, r3
 801424e:	f001 fa03 	bl	8015658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8014252:	e0d4      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8014254:	68bc      	ldr	r4, [r7, #8]
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	4618      	mov	r0, r3
 801425a:	f001 f9ba 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801425e:	4603      	mov	r3, r0
 8014260:	461a      	mov	r2, r3
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	4620      	mov	r0, r4
 8014266:	f001 f9dd 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d057      	beq.n	8014320 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8014274:	69bc      	ldr	r4, [r7, #24]
 8014276:	68b8      	ldr	r0, [r7, #8]
 8014278:	f001 fa73 	bl	8015762 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 801427c:	4603      	mov	r3, r0
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	429c      	cmp	r4, r3
 8014282:	bf0c      	ite	eq
 8014284:	2301      	moveq	r3, #1
 8014286:	2300      	movne	r3, #0
 8014288:	b2db      	uxtb	r3, r3
 801428a:	2b00      	cmp	r3, #0
 801428c:	d00d      	beq.n	80142aa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801428e:	68b8      	ldr	r0, [r7, #8]
 8014290:	f001 fa67 	bl	8015762 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8014294:	4604      	mov	r4, r0
 8014296:	68b8      	ldr	r0, [r7, #8]
 8014298:	f001 fa63 	bl	8015762 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 801429c:	4603      	mov	r3, r0
 801429e:	461a      	mov	r2, r3
 80142a0:	4621      	mov	r1, r4
 80142a2:	68f8      	ldr	r0, [r7, #12]
 80142a4:	f7fc fff8 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80142a8:	e0a9      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80142aa:	68bc      	ldr	r4, [r7, #8]
 80142ac:	f107 0314 	add.w	r3, r7, #20
 80142b0:	4618      	mov	r0, r3
 80142b2:	f001 fa62 	bl	801577a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
 80142b6:	4603      	mov	r3, r0
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4618      	mov	r0, r3
 80142bc:	f001 f989 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80142c0:	4603      	mov	r3, r0
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	4619      	mov	r1, r3
 80142c6:	4620      	mov	r0, r4
 80142c8:	f001 f9ac 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80142cc:	4603      	mov	r3, r0
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d01f      	beq.n	8014312 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7ff fb21 	bl	801391c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b00      	cmp	r3, #0
 80142de:	bf0c      	ite	eq
 80142e0:	2301      	moveq	r3, #1
 80142e2:	2300      	movne	r3, #0
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00a      	beq.n	8014300 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 80142ea:	2300      	movs	r3, #0
 80142ec:	623b      	str	r3, [r7, #32]
 80142ee:	f107 0214 	add.w	r2, r7, #20
 80142f2:	f107 0320 	add.w	r3, r7, #32
 80142f6:	4619      	mov	r1, r3
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	f7fc ff26 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80142fe:	e07e      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8014300:	f107 0218 	add.w	r2, r7, #24
 8014304:	f107 0318 	add.w	r3, r7, #24
 8014308:	4619      	mov	r1, r3
 801430a:	68f8      	ldr	r0, [r7, #12]
 801430c:	f7fc ffc4 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014310:	e075      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	683a      	ldr	r2, [r7, #0]
 8014316:	68b9      	ldr	r1, [r7, #8]
 8014318:	4618      	mov	r0, r3
 801431a:	f001 f99d 	bl	8015658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 801431e:	e06e      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8014320:	68bc      	ldr	r4, [r7, #8]
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	4618      	mov	r0, r3
 8014326:	f001 f954 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801432a:	4603      	mov	r3, r0
 801432c:	683a      	ldr	r2, [r7, #0]
 801432e:	4619      	mov	r1, r3
 8014330:	4620      	mov	r0, r4
 8014332:	f001 f977 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014336:	4603      	mov	r3, r0
 8014338:	2b00      	cmp	r3, #0
 801433a:	d056      	beq.n	80143ea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8014340:	69bc      	ldr	r4, [r7, #24]
 8014342:	68b8      	ldr	r0, [r7, #8]
 8014344:	f001 f939 	bl	80155ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8014348:	4603      	mov	r3, r0
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	429c      	cmp	r4, r3
 801434e:	bf0c      	ite	eq
 8014350:	2301      	moveq	r3, #1
 8014352:	2300      	movne	r3, #0
 8014354:	b2db      	uxtb	r3, r3
 8014356:	2b00      	cmp	r3, #0
 8014358:	d00c      	beq.n	8014374 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 801435a:	2300      	movs	r3, #0
 801435c:	627b      	str	r3, [r7, #36]	; 0x24
 801435e:	68b8      	ldr	r0, [r7, #8]
 8014360:	f001 f92b 	bl	80155ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8014364:	4602      	mov	r2, r0
 8014366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801436a:	4619      	mov	r1, r3
 801436c:	68f8      	ldr	r0, [r7, #12]
 801436e:	f7fc feec 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014372:	e044      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014374:	68bc      	ldr	r4, [r7, #8]
 8014376:	f107 0310 	add.w	r3, r7, #16
 801437a:	4618      	mov	r0, r3
 801437c:	f001 fa0e 	bl	801579c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>
 8014380:	4603      	mov	r3, r0
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	4618      	mov	r0, r3
 8014386:	f001 f924 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801438a:	4603      	mov	r3, r0
 801438c:	461a      	mov	r2, r3
 801438e:	6839      	ldr	r1, [r7, #0]
 8014390:	4620      	mov	r0, r4
 8014392:	f001 f947 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014396:	4603      	mov	r3, r0
 8014398:	2b00      	cmp	r3, #0
 801439a:	d01f      	beq.n	80143dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801439c:	69bb      	ldr	r3, [r7, #24]
 801439e:	4618      	mov	r0, r3
 80143a0:	f7ff fabc 	bl	801391c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	bf0c      	ite	eq
 80143aa:	2301      	moveq	r3, #1
 80143ac:	2300      	movne	r3, #0
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d00a      	beq.n	80143ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 80143b4:	2300      	movs	r3, #0
 80143b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80143b8:	f107 0218 	add.w	r2, r7, #24
 80143bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80143c0:	4619      	mov	r1, r3
 80143c2:	68f8      	ldr	r0, [r7, #12]
 80143c4:	f7fc fec1 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80143c8:	e019      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80143ca:	f107 0210 	add.w	r2, r7, #16
 80143ce:	f107 0310 	add.w	r3, r7, #16
 80143d2:	4619      	mov	r1, r3
 80143d4:	68f8      	ldr	r0, [r7, #12]
 80143d6:	f7fc ff5f 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80143da:	e010      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	683a      	ldr	r2, [r7, #0]
 80143e0:	68b9      	ldr	r1, [r7, #8]
 80143e2:	4618      	mov	r0, r3
 80143e4:	f001 f938 	bl	8015658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80143e8:	e009      	b.n	80143fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 80143ea:	2300      	movs	r3, #0
 80143ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143ee:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80143f2:	f107 0318 	add.w	r3, r7, #24
 80143f6:	4619      	mov	r1, r3
 80143f8:	68f8      	ldr	r0, [r7, #12]
 80143fa:	f7fc ff83 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80143fe:	68f8      	ldr	r0, [r7, #12]
 8014400:	3734      	adds	r7, #52	; 0x34
 8014402:	46bd      	mov	sp, r7
 8014404:	bd90      	pop	{r4, r7, pc}

08014406 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>:
      operator()(const _Pair& __x) const
 8014406:	b480      	push	{r7}
 8014408:	b083      	sub	sp, #12
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
 801440e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	4618      	mov	r0, r3
 8014414:	370c      	adds	r7, #12
 8014416:	46bd      	mov	sp, r7
 8014418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441c:	4770      	bx	lr

0801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801441e:	b480      	push	{r7}
 8014420:	b083      	sub	sp, #12
 8014422:	af00      	add	r7, sp, #0
 8014424:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	4618      	mov	r0, r3
 801442a:	370c      	adds	r7, #12
 801442c:	46bd      	mov	sp, r7
 801442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014432:	4770      	bx	lr

08014434 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014434:	b5b0      	push	{r4, r5, r7, lr}
 8014436:	b088      	sub	sp, #32
 8014438:	af00      	add	r7, sp, #0
 801443a:	60f8      	str	r0, [r7, #12]
 801443c:	60b9      	str	r1, [r7, #8]
 801443e:	607a      	str	r2, [r7, #4]
 8014440:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d11a      	bne.n	801447e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014448:	68f8      	ldr	r0, [r7, #12]
 801444a:	f001 f89e 	bl	801558a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 801444e:	4602      	mov	r2, r0
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4293      	cmp	r3, r2
 8014454:	d013      	beq.n	801447e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014456:	68fc      	ldr	r4, [r7, #12]
 8014458:	f107 0310 	add.w	r3, r7, #16
 801445c:	6839      	ldr	r1, [r7, #0]
 801445e:	4618      	mov	r0, r3
 8014460:	f7ff ffd1 	bl	8014406 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8014464:	4605      	mov	r5, r0
 8014466:	6878      	ldr	r0, [r7, #4]
 8014468:	f001 f8b3 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801446c:	4603      	mov	r3, r0
 801446e:	461a      	mov	r2, r3
 8014470:	4629      	mov	r1, r5
 8014472:	4620      	mov	r0, r4
 8014474:	f001 f8d6 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014478:	4603      	mov	r3, r0
 801447a:	2b00      	cmp	r3, #0
 801447c:	d001      	beq.n	8014482 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 801447e:	2301      	movs	r3, #1
 8014480:	e000      	b.n	8014484 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8014482:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014484:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8014486:	6838      	ldr	r0, [r7, #0]
 8014488:	f7ff ffc9 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 801448c:	4603      	mov	r3, r0
 801448e:	4619      	mov	r1, r3
 8014490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014492:	f001 f994 	bl	80157be <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 8014496:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801449c:	7ff8      	ldrb	r0, [r7, #31]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	69b9      	ldr	r1, [r7, #24]
 80144a2:	f005 f8a6 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	695b      	ldr	r3, [r3, #20]
 80144aa:	1c5a      	adds	r2, r3, #1
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80144b0:	f107 0314 	add.w	r3, r7, #20
 80144b4:	69b9      	ldr	r1, [r7, #24]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7ff fe73 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 80144bc:	697b      	ldr	r3, [r7, #20]
      }
 80144be:	4618      	mov	r0, r3
 80144c0:	3720      	adds	r7, #32
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bdb0      	pop	{r4, r5, r7, pc}

080144c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80144c6:	b590      	push	{r4, r7, lr}
 80144c8:	b083      	sub	sp, #12
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
 80144ce:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f001 f988 	bl	80157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 80144d6:	4604      	mov	r4, r0
 80144d8:	6838      	ldr	r0, [r7, #0]
 80144da:	f001 f98f 	bl	80157fc <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 80144de:	4603      	mov	r3, r0
 80144e0:	4619      	mov	r1, r3
 80144e2:	4620      	mov	r0, r4
 80144e4:	f001 f998 	bl	8015818 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>
      }
 80144e8:	bf00      	nop
 80144ea:	370c      	adds	r7, #12
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd90      	pop	{r4, r7, pc}

080144f0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f001 f973 	bl	80157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8014500:	4603      	mov	r3, r0
 8014502:	2201      	movs	r2, #1
 8014504:	6839      	ldr	r1, [r7, #0]
 8014506:	4618      	mov	r0, r3
 8014508:	f001 f992 	bl	8015830 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>
 801450c:	bf00      	nop
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8014514:	b480      	push	{r7}
 8014516:	b083      	sub	sp, #12
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	4618      	mov	r0, r3
 8014520:	370c      	adds	r7, #12
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801452a:	b580      	push	{r7, lr}
 801452c:	b082      	sub	sp, #8
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014534:	6839      	ldr	r1, [r7, #0]
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f001 f999 	bl	801586e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	4618      	mov	r0, r3
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}

08014546 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8014546:	b480      	push	{r7}
 8014548:	b083      	sub	sp, #12
 801454a:	af00      	add	r7, sp, #0
 801454c:	6078      	str	r0, [r7, #4]
 801454e:	6039      	str	r1, [r7, #0]
      { }
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	4618      	mov	r0, r3
 8014554:	370c      	adds	r7, #12
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr

0801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801455e:	b480      	push	{r7}
 8014560:	b083      	sub	sp, #12
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
 8014566:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	683a      	ldr	r2, [r7, #0]
 801456c:	601a      	str	r2, [r3, #0]
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4618      	mov	r0, r3
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr

0801457c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801457c:	b590      	push	{r4, r7, lr}
 801457e:	b08d      	sub	sp, #52	; 0x34
 8014580:	af00      	add	r7, sp, #0
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	607a      	str	r2, [r7, #4]
 8014588:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801458a:	1d3b      	adds	r3, r7, #4
 801458c:	4618      	mov	r0, r3
 801458e:	f001 f97a 	bl	8015886 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>
 8014592:	4603      	mov	r3, r0
 8014594:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8014596:	69bc      	ldr	r4, [r7, #24]
 8014598:	68b8      	ldr	r0, [r7, #8]
 801459a:	f001 f985 	bl	80158a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 801459e:	4603      	mov	r3, r0
 80145a0:	429c      	cmp	r4, r3
 80145a2:	bf0c      	ite	eq
 80145a4:	2301      	moveq	r3, #1
 80145a6:	2300      	movne	r3, #0
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d030      	beq.n	8014610 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x94>
	  if (size() > 0
 80145ae:	68b8      	ldr	r0, [r7, #8]
 80145b0:	f001 f986 	bl	80158c0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>
 80145b4:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d013      	beq.n	80145e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 80145ba:	68bc      	ldr	r4, [r7, #8]
 80145bc:	68b8      	ldr	r0, [r7, #8]
 80145be:	f001 f98b 	bl	80158d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80145c2:	4603      	mov	r3, r0
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	4618      	mov	r0, r3
 80145c8:	f001 f992 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80145cc:	4603      	mov	r3, r0
 80145ce:	683a      	ldr	r2, [r7, #0]
 80145d0:	4619      	mov	r1, r3
 80145d2:	4620      	mov	r0, r4
 80145d4:	f001 f998 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d001      	beq.n	80145e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 80145de:	2301      	movs	r3, #1
 80145e0:	e000      	b.n	80145e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x68>
 80145e2:	2300      	movs	r3, #0
	  if (size() > 0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d00c      	beq.n	8014602 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80145e8:	2300      	movs	r3, #0
 80145ea:	61fb      	str	r3, [r7, #28]
 80145ec:	68b8      	ldr	r0, [r7, #8]
 80145ee:	f001 f973 	bl	80158d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80145f2:	4602      	mov	r2, r0
 80145f4:	f107 031c 	add.w	r3, r7, #28
 80145f8:	4619      	mov	r1, r3
 80145fa:	68f8      	ldr	r0, [r7, #12]
 80145fc:	f7fc fda5 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014600:	e0db      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	683a      	ldr	r2, [r7, #0]
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	4618      	mov	r0, r3
 801460a:	f001 f98c 	bl	8015926 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 801460e:	e0d4      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8014610:	68bc      	ldr	r4, [r7, #8]
 8014612:	69bb      	ldr	r3, [r7, #24]
 8014614:	4618      	mov	r0, r3
 8014616:	f001 f96b 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801461a:	4603      	mov	r3, r0
 801461c:	461a      	mov	r2, r3
 801461e:	6839      	ldr	r1, [r7, #0]
 8014620:	4620      	mov	r0, r4
 8014622:	f001 f971 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d057      	beq.n	80146dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x160>
	  iterator __before = __pos;
 801462c:	69bb      	ldr	r3, [r7, #24]
 801462e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8014630:	69bc      	ldr	r4, [r7, #24]
 8014632:	68b8      	ldr	r0, [r7, #8]
 8014634:	f001 f9fc 	bl	8015a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8014638:	4603      	mov	r3, r0
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	429c      	cmp	r4, r3
 801463e:	bf0c      	ite	eq
 8014640:	2301      	moveq	r3, #1
 8014642:	2300      	movne	r3, #0
 8014644:	b2db      	uxtb	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d00d      	beq.n	8014666 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801464a:	68b8      	ldr	r0, [r7, #8]
 801464c:	f001 f9f0 	bl	8015a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8014650:	4604      	mov	r4, r0
 8014652:	68b8      	ldr	r0, [r7, #8]
 8014654:	f001 f9ec 	bl	8015a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8014658:	4603      	mov	r3, r0
 801465a:	461a      	mov	r2, r3
 801465c:	4621      	mov	r1, r4
 801465e:	68f8      	ldr	r0, [r7, #12]
 8014660:	f7fc fe1a 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014664:	e0a9      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8014666:	68bc      	ldr	r4, [r7, #8]
 8014668:	f107 0314 	add.w	r3, r7, #20
 801466c:	4618      	mov	r0, r3
 801466e:	f001 f9eb 	bl	8015a48 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
 8014672:	4603      	mov	r3, r0
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	4618      	mov	r0, r3
 8014678:	f001 f93a 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801467c:	4603      	mov	r3, r0
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	4619      	mov	r1, r3
 8014682:	4620      	mov	r0, r4
 8014684:	f001 f940 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014688:	4603      	mov	r3, r0
 801468a:	2b00      	cmp	r3, #0
 801468c:	d01f      	beq.n	80146ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801468e:	697b      	ldr	r3, [r7, #20]
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fa11 	bl	8013ab8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	bf0c      	ite	eq
 801469c:	2301      	moveq	r3, #1
 801469e:	2300      	movne	r3, #0
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00a      	beq.n	80146bc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x140>
		return _Res(0, __before._M_node);
 80146a6:	2300      	movs	r3, #0
 80146a8:	623b      	str	r3, [r7, #32]
 80146aa:	f107 0214 	add.w	r2, r7, #20
 80146ae:	f107 0320 	add.w	r3, r7, #32
 80146b2:	4619      	mov	r1, r3
 80146b4:	68f8      	ldr	r0, [r7, #12]
 80146b6:	f7fc fd48 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80146ba:	e07e      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80146bc:	f107 0218 	add.w	r2, r7, #24
 80146c0:	f107 0318 	add.w	r3, r7, #24
 80146c4:	4619      	mov	r1, r3
 80146c6:	68f8      	ldr	r0, [r7, #12]
 80146c8:	f7fc fde6 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80146cc:	e075      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	683a      	ldr	r2, [r7, #0]
 80146d2:	68b9      	ldr	r1, [r7, #8]
 80146d4:	4618      	mov	r0, r3
 80146d6:	f001 f926 	bl	8015926 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 80146da:	e06e      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80146dc:	68bc      	ldr	r4, [r7, #8]
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	4618      	mov	r0, r3
 80146e2:	f001 f905 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80146e6:	4603      	mov	r3, r0
 80146e8:	683a      	ldr	r2, [r7, #0]
 80146ea:	4619      	mov	r1, r3
 80146ec:	4620      	mov	r0, r4
 80146ee:	f001 f90b 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80146f2:	4603      	mov	r3, r0
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d056      	beq.n	80147a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x22a>
	  iterator __after = __pos;
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80146fc:	69bc      	ldr	r4, [r7, #24]
 80146fe:	68b8      	ldr	r0, [r7, #8]
 8014700:	f001 f8ea 	bl	80158d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8014704:	4603      	mov	r3, r0
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	429c      	cmp	r4, r3
 801470a:	bf0c      	ite	eq
 801470c:	2301      	moveq	r3, #1
 801470e:	2300      	movne	r3, #0
 8014710:	b2db      	uxtb	r3, r3
 8014712:	2b00      	cmp	r3, #0
 8014714:	d00c      	beq.n	8014730 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8014716:	2300      	movs	r3, #0
 8014718:	627b      	str	r3, [r7, #36]	; 0x24
 801471a:	68b8      	ldr	r0, [r7, #8]
 801471c:	f001 f8dc 	bl	80158d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8014720:	4602      	mov	r2, r0
 8014722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014726:	4619      	mov	r1, r3
 8014728:	68f8      	ldr	r0, [r7, #12]
 801472a:	f7fc fd0e 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801472e:	e044      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014730:	68bc      	ldr	r4, [r7, #8]
 8014732:	f107 0310 	add.w	r3, r7, #16
 8014736:	4618      	mov	r0, r3
 8014738:	f001 f997 	bl	8015a6a <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>
 801473c:	4603      	mov	r3, r0
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4618      	mov	r0, r3
 8014742:	f001 f8d5 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014746:	4603      	mov	r3, r0
 8014748:	461a      	mov	r2, r3
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	4620      	mov	r0, r4
 801474e:	f001 f8db 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014752:	4603      	mov	r3, r0
 8014754:	2b00      	cmp	r3, #0
 8014756:	d01f      	beq.n	8014798 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	4618      	mov	r0, r3
 801475c:	f7ff f9ac 	bl	8013ab8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014760:	4603      	mov	r3, r0
 8014762:	2b00      	cmp	r3, #0
 8014764:	bf0c      	ite	eq
 8014766:	2301      	moveq	r3, #1
 8014768:	2300      	movne	r3, #0
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00a      	beq.n	8014786 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8014770:	2300      	movs	r3, #0
 8014772:	62bb      	str	r3, [r7, #40]	; 0x28
 8014774:	f107 0218 	add.w	r2, r7, #24
 8014778:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801477c:	4619      	mov	r1, r3
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f7fc fce3 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014784:	e019      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8014786:	f107 0210 	add.w	r2, r7, #16
 801478a:	f107 0310 	add.w	r3, r7, #16
 801478e:	4619      	mov	r1, r3
 8014790:	68f8      	ldr	r0, [r7, #12]
 8014792:	f7fc fd81 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014796:	e010      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	683a      	ldr	r2, [r7, #0]
 801479c:	68b9      	ldr	r1, [r7, #8]
 801479e:	4618      	mov	r0, r3
 80147a0:	f001 f8c1 	bl	8015926 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 80147a4:	e009      	b.n	80147ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80147a6:	2300      	movs	r3, #0
 80147a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147aa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80147ae:	f107 0318 	add.w	r3, r7, #24
 80147b2:	4619      	mov	r1, r3
 80147b4:	68f8      	ldr	r0, [r7, #12]
 80147b6:	f7fc fda5 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80147ba:	68f8      	ldr	r0, [r7, #12]
 80147bc:	3734      	adds	r7, #52	; 0x34
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd90      	pop	{r4, r7, pc}

080147c2 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>:
      operator()(const _Pair& __x) const
 80147c2:	b480      	push	{r7}
 80147c4:	b083      	sub	sp, #12
 80147c6:	af00      	add	r7, sp, #0
 80147c8:	6078      	str	r0, [r7, #4]
 80147ca:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	4618      	mov	r0, r3
 80147d0:	370c      	adds	r7, #12
 80147d2:	46bd      	mov	sp, r7
 80147d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d8:	4770      	bx	lr

080147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80147da:	b480      	push	{r7}
 80147dc:	b083      	sub	sp, #12
 80147de:	af00      	add	r7, sp, #0
 80147e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr

080147f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80147f0:	b5b0      	push	{r4, r5, r7, lr}
 80147f2:	b088      	sub	sp, #32
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
 80147fc:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d11a      	bne.n	801483a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f001 f84f 	bl	80158a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 801480a:	4602      	mov	r2, r0
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	4293      	cmp	r3, r2
 8014810:	d013      	beq.n	801483a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014812:	68fc      	ldr	r4, [r7, #12]
 8014814:	f107 0310 	add.w	r3, r7, #16
 8014818:	6839      	ldr	r1, [r7, #0]
 801481a:	4618      	mov	r0, r3
 801481c:	f7ff ffd1 	bl	80147c2 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8014820:	4605      	mov	r5, r0
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f001 f864 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014828:	4603      	mov	r3, r0
 801482a:	461a      	mov	r2, r3
 801482c:	4629      	mov	r1, r5
 801482e:	4620      	mov	r0, r4
 8014830:	f001 f86a 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d001      	beq.n	801483e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 801483a:	2301      	movs	r3, #1
 801483c:	e000      	b.n	8014840 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 801483e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014840:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8014842:	6838      	ldr	r0, [r7, #0]
 8014844:	f7ff ffc9 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8014848:	4603      	mov	r3, r0
 801484a:	4619      	mov	r1, r3
 801484c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801484e:	f001 f91d 	bl	8015a8c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8014852:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8014858:	7ff8      	ldrb	r0, [r7, #31]
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	69b9      	ldr	r1, [r7, #24]
 801485e:	f004 fec8 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	695b      	ldr	r3, [r3, #20]
 8014866:	1c5a      	adds	r2, r3, #1
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 801486c:	f107 0314 	add.w	r3, r7, #20
 8014870:	69b9      	ldr	r1, [r7, #24]
 8014872:	4618      	mov	r0, r3
 8014874:	f7ff fe73 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8014878:	697b      	ldr	r3, [r7, #20]
      }
 801487a:	4618      	mov	r0, r3
 801487c:	3720      	adds	r7, #32
 801487e:	46bd      	mov	sp, r7
 8014880:	bdb0      	pop	{r4, r5, r7, pc}

08014882 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014882:	b590      	push	{r4, r7, lr}
 8014884:	b083      	sub	sp, #12
 8014886:	af00      	add	r7, sp, #0
 8014888:	6078      	str	r0, [r7, #4]
 801488a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f001 f911 	bl	8015ab4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8014892:	4604      	mov	r4, r0
 8014894:	6838      	ldr	r0, [r7, #0]
 8014896:	f001 f918 	bl	8015aca <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 801489a:	4603      	mov	r3, r0
 801489c:	4619      	mov	r1, r3
 801489e:	4620      	mov	r0, r4
 80148a0:	f001 f921 	bl	8015ae6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>
      }
 80148a4:	bf00      	nop
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd90      	pop	{r4, r7, pc}

080148ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f001 f8fc 	bl	8015ab4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 80148bc:	4603      	mov	r3, r0
 80148be:	2201      	movs	r2, #1
 80148c0:	6839      	ldr	r1, [r7, #0]
 80148c2:	4618      	mov	r0, r3
 80148c4:	f001 f91b 	bl	8015afe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>
 80148c8:	bf00      	nop
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>:
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	4618      	mov	r0, r3
 80148dc:	370c      	adds	r7, #12
 80148de:	46bd      	mov	sp, r7
 80148e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e4:	4770      	bx	lr

080148e6 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80148e6:	b480      	push	{r7}
 80148e8:	b083      	sub	sp, #12
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	370c      	adds	r7, #12
 80148f4:	46bd      	mov	sp, r7
 80148f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fa:	4770      	bx	lr

080148fc <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b082      	sub	sp, #8
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014906:	6839      	ldr	r1, [r7, #0]
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f001 f917 	bl	8015b3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4618      	mov	r0, r3
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014918:	b480      	push	{r7}
 801491a:	b083      	sub	sp, #12
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	683a      	ldr	r2, [r7, #0]
 8014926:	601a      	str	r2, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	4618      	mov	r0, r3
 801492c:	370c      	adds	r7, #12
 801492e:	46bd      	mov	sp, r7
 8014930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014934:	4770      	bx	lr

08014936 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014936:	b590      	push	{r4, r7, lr}
 8014938:	b08d      	sub	sp, #52	; 0x34
 801493a:	af00      	add	r7, sp, #0
 801493c:	60f8      	str	r0, [r7, #12]
 801493e:	60b9      	str	r1, [r7, #8]
 8014940:	607a      	str	r2, [r7, #4]
 8014942:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8014944:	1d3b      	adds	r3, r7, #4
 8014946:	4618      	mov	r0, r3
 8014948:	f001 f904 	bl	8015b54 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>
 801494c:	4603      	mov	r3, r0
 801494e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8014950:	69bc      	ldr	r4, [r7, #24]
 8014952:	68b8      	ldr	r0, [r7, #8]
 8014954:	f001 f90f 	bl	8015b76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8014958:	4603      	mov	r3, r0
 801495a:	429c      	cmp	r4, r3
 801495c:	bf0c      	ite	eq
 801495e:	2301      	moveq	r3, #1
 8014960:	2300      	movne	r3, #0
 8014962:	b2db      	uxtb	r3, r3
 8014964:	2b00      	cmp	r3, #0
 8014966:	d030      	beq.n	80149ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x94>
	  if (size() > 0
 8014968:	68b8      	ldr	r0, [r7, #8]
 801496a:	f001 f910 	bl	8015b8e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>
 801496e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8014970:	2b00      	cmp	r3, #0
 8014972:	d013      	beq.n	801499c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 8014974:	68bc      	ldr	r4, [r7, #8]
 8014976:	68b8      	ldr	r0, [r7, #8]
 8014978:	f001 f915 	bl	8015ba6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 801497c:	4603      	mov	r3, r0
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	4618      	mov	r0, r3
 8014982:	f001 f91c 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014986:	4603      	mov	r3, r0
 8014988:	683a      	ldr	r2, [r7, #0]
 801498a:	4619      	mov	r1, r3
 801498c:	4620      	mov	r0, r4
 801498e:	f000 fe49 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d001      	beq.n	801499c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 8014998:	2301      	movs	r3, #1
 801499a:	e000      	b.n	801499e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x68>
 801499c:	2300      	movs	r3, #0
	  if (size() > 0
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00c      	beq.n	80149bc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 80149a2:	2300      	movs	r3, #0
 80149a4:	61fb      	str	r3, [r7, #28]
 80149a6:	68b8      	ldr	r0, [r7, #8]
 80149a8:	f001 f8fd 	bl	8015ba6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 80149ac:	4602      	mov	r2, r0
 80149ae:	f107 031c 	add.w	r3, r7, #28
 80149b2:	4619      	mov	r1, r3
 80149b4:	68f8      	ldr	r0, [r7, #12]
 80149b6:	f7fc fbc8 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80149ba:	e0db      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	68b9      	ldr	r1, [r7, #8]
 80149c2:	4618      	mov	r0, r3
 80149c4:	f001 f907 	bl	8015bd6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 80149c8:	e0d4      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80149ca:	68bc      	ldr	r4, [r7, #8]
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f001 f8f5 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80149d4:	4603      	mov	r3, r0
 80149d6:	461a      	mov	r2, r3
 80149d8:	6839      	ldr	r1, [r7, #0]
 80149da:	4620      	mov	r0, r4
 80149dc:	f000 fe22 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d057      	beq.n	8014a96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	  iterator __before = __pos;
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80149ea:	69bc      	ldr	r4, [r7, #24]
 80149ec:	68b8      	ldr	r0, [r7, #8]
 80149ee:	f001 f977 	bl	8015ce0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 80149f2:	4603      	mov	r3, r0
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	429c      	cmp	r4, r3
 80149f8:	bf0c      	ite	eq
 80149fa:	2301      	moveq	r3, #1
 80149fc:	2300      	movne	r3, #0
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d00d      	beq.n	8014a20 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8014a04:	68b8      	ldr	r0, [r7, #8]
 8014a06:	f001 f96b 	bl	8015ce0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	68b8      	ldr	r0, [r7, #8]
 8014a0e:	f001 f967 	bl	8015ce0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8014a12:	4603      	mov	r3, r0
 8014a14:	461a      	mov	r2, r3
 8014a16:	4621      	mov	r1, r4
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f7fc fc3d 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014a1e:	e0a9      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8014a20:	68bc      	ldr	r4, [r7, #8]
 8014a22:	f107 0314 	add.w	r3, r7, #20
 8014a26:	4618      	mov	r0, r3
 8014a28:	f001 f966 	bl	8015cf8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f001 f8c4 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014a36:	4603      	mov	r3, r0
 8014a38:	683a      	ldr	r2, [r7, #0]
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	4620      	mov	r0, r4
 8014a3e:	f000 fdf1 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d01f      	beq.n	8014a88 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7ff f90d 	bl	8013c6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	bf0c      	ite	eq
 8014a56:	2301      	moveq	r3, #1
 8014a58:	2300      	movne	r3, #0
 8014a5a:	b2db      	uxtb	r3, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00a      	beq.n	8014a76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8014a60:	2300      	movs	r3, #0
 8014a62:	623b      	str	r3, [r7, #32]
 8014a64:	f107 0214 	add.w	r2, r7, #20
 8014a68:	f107 0320 	add.w	r3, r7, #32
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	68f8      	ldr	r0, [r7, #12]
 8014a70:	f7fc fb6b 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014a74:	e07e      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8014a76:	f107 0218 	add.w	r2, r7, #24
 8014a7a:	f107 0318 	add.w	r3, r7, #24
 8014a7e:	4619      	mov	r1, r3
 8014a80:	68f8      	ldr	r0, [r7, #12]
 8014a82:	f7fc fc09 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014a86:	e075      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	683a      	ldr	r2, [r7, #0]
 8014a8c:	68b9      	ldr	r1, [r7, #8]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f001 f8a1 	bl	8015bd6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8014a94:	e06e      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8014a96:	68bc      	ldr	r4, [r7, #8]
 8014a98:	69bb      	ldr	r3, [r7, #24]
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f001 f88f 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	683a      	ldr	r2, [r7, #0]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	f000 fdbc 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014aac:	4603      	mov	r3, r0
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d056      	beq.n	8014b60 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x22a>
	  iterator __after = __pos;
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8014ab6:	69bc      	ldr	r4, [r7, #24]
 8014ab8:	68b8      	ldr	r0, [r7, #8]
 8014aba:	f001 f874 	bl	8015ba6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	429c      	cmp	r4, r3
 8014ac4:	bf0c      	ite	eq
 8014ac6:	2301      	moveq	r3, #1
 8014ac8:	2300      	movne	r3, #0
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00c      	beq.n	8014aea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8014ad4:	68b8      	ldr	r0, [r7, #8]
 8014ad6:	f001 f866 	bl	8015ba6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8014ada:	4602      	mov	r2, r0
 8014adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f7fc fb31 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014ae8:	e044      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014aea:	68bc      	ldr	r4, [r7, #8]
 8014aec:	f107 0310 	add.w	r3, r7, #16
 8014af0:	4618      	mov	r0, r3
 8014af2:	f001 f912 	bl	8015d1a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>
 8014af6:	4603      	mov	r3, r0
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4618      	mov	r0, r3
 8014afc:	f001 f85f 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014b00:	4603      	mov	r3, r0
 8014b02:	461a      	mov	r2, r3
 8014b04:	6839      	ldr	r1, [r7, #0]
 8014b06:	4620      	mov	r0, r4
 8014b08:	f000 fd8c 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d01f      	beq.n	8014b52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7ff f8a8 	bl	8013c6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	bf0c      	ite	eq
 8014b20:	2301      	moveq	r3, #1
 8014b22:	2300      	movne	r3, #0
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00a      	beq.n	8014b40 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014b2e:	f107 0218 	add.w	r2, r7, #24
 8014b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014b36:	4619      	mov	r1, r3
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f7fc fb06 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014b3e:	e019      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8014b40:	f107 0210 	add.w	r2, r7, #16
 8014b44:	f107 0310 	add.w	r3, r7, #16
 8014b48:	4619      	mov	r1, r3
 8014b4a:	68f8      	ldr	r0, [r7, #12]
 8014b4c:	f7fc fba4 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014b50:	e010      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	683a      	ldr	r2, [r7, #0]
 8014b56:	68b9      	ldr	r1, [r7, #8]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f001 f83c 	bl	8015bd6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8014b5e:	e009      	b.n	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8014b60:	2300      	movs	r3, #0
 8014b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014b68:	f107 0318 	add.w	r3, r7, #24
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	68f8      	ldr	r0, [r7, #12]
 8014b70:	f7fc fbc8 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8014b74:	68f8      	ldr	r0, [r7, #12]
 8014b76:	3734      	adds	r7, #52	; 0x34
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd90      	pop	{r4, r7, pc}

08014b7c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>:
      operator()(const _Pair& __x) const
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8014b86:	683b      	ldr	r3, [r7, #0]
 8014b88:	4618      	mov	r0, r3
 8014b8a:	370c      	adds	r7, #12
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b92:	4770      	bx	lr

08014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014b94:	b480      	push	{r7}
 8014b96:	b083      	sub	sp, #12
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	370c      	adds	r7, #12
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr

08014baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014baa:	b5b0      	push	{r4, r5, r7, lr}
 8014bac:	b088      	sub	sp, #32
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	60f8      	str	r0, [r7, #12]
 8014bb2:	60b9      	str	r1, [r7, #8]
 8014bb4:	607a      	str	r2, [r7, #4]
 8014bb6:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014bb8:	68bb      	ldr	r3, [r7, #8]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d11a      	bne.n	8014bf4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014bbe:	68f8      	ldr	r0, [r7, #12]
 8014bc0:	f000 ffd9 	bl	8015b76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d013      	beq.n	8014bf4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014bcc:	68fc      	ldr	r4, [r7, #12]
 8014bce:	f107 0310 	add.w	r3, r7, #16
 8014bd2:	6839      	ldr	r1, [r7, #0]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7ff ffd1 	bl	8014b7c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8014bda:	4605      	mov	r5, r0
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f000 ffee 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014be2:	4603      	mov	r3, r0
 8014be4:	461a      	mov	r2, r3
 8014be6:	4629      	mov	r1, r5
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 fd1b 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e000      	b.n	8014bfa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8014bf8:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014bfa:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8014bfc:	6838      	ldr	r0, [r7, #0]
 8014bfe:	f7ff ffc9 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8014c02:	4603      	mov	r3, r0
 8014c04:	4619      	mov	r1, r3
 8014c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c08:	f001 f898 	bl	8015d3c <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8014c0c:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8014c12:	7ff8      	ldrb	r0, [r7, #31]
 8014c14:	687a      	ldr	r2, [r7, #4]
 8014c16:	69b9      	ldr	r1, [r7, #24]
 8014c18:	f004 fceb 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	695b      	ldr	r3, [r3, #20]
 8014c20:	1c5a      	adds	r2, r3, #1
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8014c26:	f107 0314 	add.w	r3, r7, #20
 8014c2a:	69b9      	ldr	r1, [r7, #24]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7ff fe73 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8014c32:	697b      	ldr	r3, [r7, #20]
      }
 8014c34:	4618      	mov	r0, r3
 8014c36:	3720      	adds	r7, #32
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bdb0      	pop	{r4, r5, r7, pc}

08014c3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b083      	sub	sp, #12
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
 8014c44:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f001 f88c 	bl	8015d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	6838      	ldr	r0, [r7, #0]
 8014c50:	f001 f893 	bl	8015d7a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8014c54:	4603      	mov	r3, r0
 8014c56:	4619      	mov	r1, r3
 8014c58:	4620      	mov	r0, r4
 8014c5a:	f001 f89c 	bl	8015d96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>
      }
 8014c5e:	bf00      	nop
 8014c60:	370c      	adds	r7, #12
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd90      	pop	{r4, r7, pc}

08014c66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b082      	sub	sp, #8
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	6078      	str	r0, [r7, #4]
 8014c6e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f001 f877 	bl	8015d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2201      	movs	r2, #1
 8014c7a:	6839      	ldr	r1, [r7, #0]
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f001 f896 	bl	8015dae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>
 8014c82:	bf00      	nop
 8014c84:	3708      	adds	r7, #8
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}

08014c8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 8014c8a:	b480      	push	{r7}
 8014c8c:	b083      	sub	sp, #12
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	6078      	str	r0, [r7, #4]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	4618      	mov	r0, r3
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9e:	4770      	bx	lr

08014ca0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8014ca0:	b480      	push	{r7}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4618      	mov	r0, r3
 8014cac:	370c      	adds	r7, #12
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb4:	4770      	bx	lr

08014cb6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014cb6:	b580      	push	{r7, lr}
 8014cb8:	b082      	sub	sp, #8
 8014cba:	af00      	add	r7, sp, #0
 8014cbc:	6078      	str	r0, [r7, #4]
 8014cbe:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014cc0:	6839      	ldr	r1, [r7, #0]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f001 f892 	bl	8015dec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3708      	adds	r7, #8
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}

08014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014cd2:	b480      	push	{r7}
 8014cd4:	b083      	sub	sp, #12
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
 8014cda:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	683a      	ldr	r2, [r7, #0]
 8014ce0:	601a      	str	r2, [r3, #0]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	370c      	adds	r7, #12
 8014ce8:	46bd      	mov	sp, r7
 8014cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cee:	4770      	bx	lr

08014cf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014cf0:	b590      	push	{r4, r7, lr}
 8014cf2:	b08d      	sub	sp, #52	; 0x34
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
 8014cfc:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8014cfe:	1d3b      	adds	r3, r7, #4
 8014d00:	4618      	mov	r0, r3
 8014d02:	f001 f87f 	bl	8015e04 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 8014d06:	4603      	mov	r3, r0
 8014d08:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8014d0a:	69bc      	ldr	r4, [r7, #24]
 8014d0c:	68b8      	ldr	r0, [r7, #8]
 8014d0e:	f001 f88a 	bl	8015e26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8014d12:	4603      	mov	r3, r0
 8014d14:	429c      	cmp	r4, r3
 8014d16:	bf0c      	ite	eq
 8014d18:	2301      	moveq	r3, #1
 8014d1a:	2300      	movne	r3, #0
 8014d1c:	b2db      	uxtb	r3, r3
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d030      	beq.n	8014d84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8014d22:	68b8      	ldr	r0, [r7, #8]
 8014d24:	f001 f88b 	bl	8015e3e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8014d28:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d013      	beq.n	8014d56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8014d2e:	68bc      	ldr	r4, [r7, #8]
 8014d30:	68b8      	ldr	r0, [r7, #8]
 8014d32:	f001 f890 	bl	8015e56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8014d36:	4603      	mov	r3, r0
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f001 f897 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014d40:	4603      	mov	r3, r0
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	4619      	mov	r1, r3
 8014d46:	4620      	mov	r0, r4
 8014d48:	f000 fdde 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014d4c:	4603      	mov	r3, r0
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d001      	beq.n	8014d56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8014d52:	2301      	movs	r3, #1
 8014d54:	e000      	b.n	8014d58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8014d56:	2300      	movs	r3, #0
	  if (size() > 0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d00c      	beq.n	8014d76 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	61fb      	str	r3, [r7, #28]
 8014d60:	68b8      	ldr	r0, [r7, #8]
 8014d62:	f001 f878 	bl	8015e56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8014d66:	4602      	mov	r2, r0
 8014d68:	f107 031c 	add.w	r3, r7, #28
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	f7fc f9eb 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014d74:	e0db      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	683a      	ldr	r2, [r7, #0]
 8014d7a:	68b9      	ldr	r1, [r7, #8]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f001 f882 	bl	8015e86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8014d82:	e0d4      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8014d84:	68bc      	ldr	r4, [r7, #8]
 8014d86:	69bb      	ldr	r3, [r7, #24]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f001 f870 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	461a      	mov	r2, r3
 8014d92:	6839      	ldr	r1, [r7, #0]
 8014d94:	4620      	mov	r0, r4
 8014d96:	f000 fdb7 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d057      	beq.n	8014e50 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8014da0:	69bb      	ldr	r3, [r7, #24]
 8014da2:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8014da4:	69bc      	ldr	r4, [r7, #24]
 8014da6:	68b8      	ldr	r0, [r7, #8]
 8014da8:	f001 f8f2 	bl	8015f90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8014dac:	4603      	mov	r3, r0
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	429c      	cmp	r4, r3
 8014db2:	bf0c      	ite	eq
 8014db4:	2301      	moveq	r3, #1
 8014db6:	2300      	movne	r3, #0
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d00d      	beq.n	8014dda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8014dbe:	68b8      	ldr	r0, [r7, #8]
 8014dc0:	f001 f8e6 	bl	8015f90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8014dc4:	4604      	mov	r4, r0
 8014dc6:	68b8      	ldr	r0, [r7, #8]
 8014dc8:	f001 f8e2 	bl	8015f90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	461a      	mov	r2, r3
 8014dd0:	4621      	mov	r1, r4
 8014dd2:	68f8      	ldr	r0, [r7, #12]
 8014dd4:	f7fc fa60 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014dd8:	e0a9      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8014dda:	68bc      	ldr	r4, [r7, #8]
 8014ddc:	f107 0314 	add.w	r3, r7, #20
 8014de0:	4618      	mov	r0, r3
 8014de2:	f001 f8e1 	bl	8015fa8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 8014de6:	4603      	mov	r3, r0
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f001 f83f 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014df0:	4603      	mov	r3, r0
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	4619      	mov	r1, r3
 8014df6:	4620      	mov	r0, r4
 8014df8:	f000 fd86 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d01f      	beq.n	8014e42 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	4618      	mov	r0, r3
 8014e06:	f7fe fffe 	bl	8013e06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014e0a:	4603      	mov	r3, r0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	bf0c      	ite	eq
 8014e10:	2301      	moveq	r3, #1
 8014e12:	2300      	movne	r3, #0
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d00a      	beq.n	8014e30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	623b      	str	r3, [r7, #32]
 8014e1e:	f107 0214 	add.w	r2, r7, #20
 8014e22:	f107 0320 	add.w	r3, r7, #32
 8014e26:	4619      	mov	r1, r3
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7fc f98e 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014e2e:	e07e      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8014e30:	f107 0218 	add.w	r2, r7, #24
 8014e34:	f107 0318 	add.w	r3, r7, #24
 8014e38:	4619      	mov	r1, r3
 8014e3a:	68f8      	ldr	r0, [r7, #12]
 8014e3c:	f7fc fa2c 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014e40:	e075      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	68b9      	ldr	r1, [r7, #8]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f001 f81c 	bl	8015e86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8014e4e:	e06e      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8014e50:	68bc      	ldr	r4, [r7, #8]
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	4618      	mov	r0, r3
 8014e56:	f001 f80a 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014e5a:	4603      	mov	r3, r0
 8014e5c:	683a      	ldr	r2, [r7, #0]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	4620      	mov	r0, r4
 8014e62:	f000 fd51 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d056      	beq.n	8014f1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8014e6c:	69bb      	ldr	r3, [r7, #24]
 8014e6e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8014e70:	69bc      	ldr	r4, [r7, #24]
 8014e72:	68b8      	ldr	r0, [r7, #8]
 8014e74:	f000 ffef 	bl	8015e56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	429c      	cmp	r4, r3
 8014e7e:	bf0c      	ite	eq
 8014e80:	2301      	moveq	r3, #1
 8014e82:	2300      	movne	r3, #0
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d00c      	beq.n	8014ea4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8014e8e:	68b8      	ldr	r0, [r7, #8]
 8014e90:	f000 ffe1 	bl	8015e56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8014e94:	4602      	mov	r2, r0
 8014e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	68f8      	ldr	r0, [r7, #12]
 8014e9e:	f7fc f954 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014ea2:	e044      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014ea4:	68bc      	ldr	r4, [r7, #8]
 8014ea6:	f107 0310 	add.w	r3, r7, #16
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f001 f88d 	bl	8015fca <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	f000 ffda 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	6839      	ldr	r1, [r7, #0]
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	f000 fd21 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d01f      	beq.n	8014f0c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fe ff99 	bl	8013e06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	bf0c      	ite	eq
 8014eda:	2301      	moveq	r3, #1
 8014edc:	2300      	movne	r3, #0
 8014ede:	b2db      	uxtb	r3, r3
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d00a      	beq.n	8014efa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ee8:	f107 0218 	add.w	r2, r7, #24
 8014eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014ef0:	4619      	mov	r1, r3
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f7fc f929 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014ef8:	e019      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8014efa:	f107 0210 	add.w	r2, r7, #16
 8014efe:	f107 0310 	add.w	r3, r7, #16
 8014f02:	4619      	mov	r1, r3
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f7fc f9c7 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014f0a:	e010      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	683a      	ldr	r2, [r7, #0]
 8014f10:	68b9      	ldr	r1, [r7, #8]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 ffb7 	bl	8015e86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8014f18:	e009      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014f1e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014f22:	f107 0318 	add.w	r3, r7, #24
 8014f26:	4619      	mov	r1, r3
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f7fc f9eb 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8014f2e:	68f8      	ldr	r0, [r7, #12]
 8014f30:	3734      	adds	r7, #52	; 0x34
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd90      	pop	{r4, r7, pc}

08014f36 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8014f36:	b480      	push	{r7}
 8014f38:	b083      	sub	sp, #12
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	4618      	mov	r0, r3
 8014f44:	370c      	adds	r7, #12
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr

08014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014f4e:	b480      	push	{r7}
 8014f50:	b083      	sub	sp, #12
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	370c      	adds	r7, #12
 8014f5c:	46bd      	mov	sp, r7
 8014f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f62:	4770      	bx	lr

08014f64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014f64:	b5b0      	push	{r4, r5, r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
 8014f70:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d11a      	bne.n	8014fae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014f78:	68f8      	ldr	r0, [r7, #12]
 8014f7a:	f000 ff54 	bl	8015e26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8014f7e:	4602      	mov	r2, r0
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	4293      	cmp	r3, r2
 8014f84:	d013      	beq.n	8014fae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8014f86:	68fc      	ldr	r4, [r7, #12]
 8014f88:	f107 0310 	add.w	r3, r7, #16
 8014f8c:	6839      	ldr	r1, [r7, #0]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7ff ffd1 	bl	8014f36 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8014f94:	4605      	mov	r5, r0
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 ff69 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	4629      	mov	r1, r5
 8014fa2:	4620      	mov	r0, r4
 8014fa4:	f000 fcb0 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d001      	beq.n	8014fb2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8014fae:	2301      	movs	r3, #1
 8014fb0:	e000      	b.n	8014fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8014fb2:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8014fb4:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8014fb6:	6838      	ldr	r0, [r7, #0]
 8014fb8:	f7ff ffc9 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014fc2:	f001 f813 	bl	8015fec <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8014fc6:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8014fcc:	7ff8      	ldrb	r0, [r7, #31]
 8014fce:	687a      	ldr	r2, [r7, #4]
 8014fd0:	69b9      	ldr	r1, [r7, #24]
 8014fd2:	f004 fb0e 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	695b      	ldr	r3, [r3, #20]
 8014fda:	1c5a      	adds	r2, r3, #1
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8014fe0:	f107 0314 	add.w	r3, r7, #20
 8014fe4:	69b9      	ldr	r1, [r7, #24]
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7ff fe73 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8014fec:	697b      	ldr	r3, [r7, #20]
      }
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3720      	adds	r7, #32
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bdb0      	pop	{r4, r5, r7, pc}

08014ff6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014ff6:	b590      	push	{r4, r7, lr}
 8014ff8:	b083      	sub	sp, #12
 8014ffa:	af00      	add	r7, sp, #0
 8014ffc:	6078      	str	r0, [r7, #4]
 8014ffe:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f001 f807 	bl	8016014 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8015006:	4604      	mov	r4, r0
 8015008:	6838      	ldr	r0, [r7, #0]
 801500a:	f001 f80e 	bl	801602a <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 801500e:	4603      	mov	r3, r0
 8015010:	4619      	mov	r1, r3
 8015012:	4620      	mov	r0, r4
 8015014:	f001 f817 	bl	8016046 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8015018:	bf00      	nop
 801501a:	370c      	adds	r7, #12
 801501c:	46bd      	mov	sp, r7
 801501e:	bd90      	pop	{r4, r7, pc}

08015020 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f000 fff2 	bl	8016014 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8015030:	4603      	mov	r3, r0
 8015032:	2201      	movs	r2, #1
 8015034:	6839      	ldr	r1, [r7, #0]
 8015036:	4618      	mov	r0, r3
 8015038:	f001 f811 	bl	801605e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 801503c:	bf00      	nop
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	4618      	mov	r0, r3
 8015050:	370c      	adds	r7, #12
 8015052:	46bd      	mov	sp, r7
 8015054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015058:	4770      	bx	lr

0801505a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 801505a:	b480      	push	{r7}
 801505c:	b083      	sub	sp, #12
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	4618      	mov	r0, r3
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr

08015070 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801507a:	6839      	ldr	r1, [r7, #0]
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f001 f80d 	bl	801609c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	4618      	mov	r0, r3
 8015086:	3708      	adds	r7, #8
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}

0801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801508c:	b480      	push	{r7}
 801508e:	b083      	sub	sp, #12
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	683a      	ldr	r2, [r7, #0]
 801509a:	601a      	str	r2, [r3, #0]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	4618      	mov	r0, r3
 80150a0:	370c      	adds	r7, #12
 80150a2:	46bd      	mov	sp, r7
 80150a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a8:	4770      	bx	lr

080150aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80150aa:	b590      	push	{r4, r7, lr}
 80150ac:	b08d      	sub	sp, #52	; 0x34
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	60f8      	str	r0, [r7, #12]
 80150b2:	60b9      	str	r1, [r7, #8]
 80150b4:	607a      	str	r2, [r7, #4]
 80150b6:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80150b8:	1d3b      	adds	r3, r7, #4
 80150ba:	4618      	mov	r0, r3
 80150bc:	f000 fffa 	bl	80160b4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 80150c0:	4603      	mov	r3, r0
 80150c2:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80150c4:	69bc      	ldr	r4, [r7, #24]
 80150c6:	68b8      	ldr	r0, [r7, #8]
 80150c8:	f001 f805 	bl	80160d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80150cc:	4603      	mov	r3, r0
 80150ce:	429c      	cmp	r4, r3
 80150d0:	bf0c      	ite	eq
 80150d2:	2301      	moveq	r3, #1
 80150d4:	2300      	movne	r3, #0
 80150d6:	b2db      	uxtb	r3, r3
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d030      	beq.n	801513e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 80150dc:	68b8      	ldr	r0, [r7, #8]
 80150de:	f001 f806 	bl	80160ee <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 80150e2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d013      	beq.n	8015110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80150e8:	68bc      	ldr	r4, [r7, #8]
 80150ea:	68b8      	ldr	r0, [r7, #8]
 80150ec:	f001 f80b 	bl	8016106 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80150f0:	4603      	mov	r3, r0
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f001 f812 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80150fa:	4603      	mov	r3, r0
 80150fc:	683a      	ldr	r2, [r7, #0]
 80150fe:	4619      	mov	r1, r3
 8015100:	4620      	mov	r0, r4
 8015102:	f000 fc01 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d001      	beq.n	8015110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 801510c:	2301      	movs	r3, #1
 801510e:	e000      	b.n	8015112 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8015110:	2300      	movs	r3, #0
	  if (size() > 0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d00c      	beq.n	8015130 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8015116:	2300      	movs	r3, #0
 8015118:	61fb      	str	r3, [r7, #28]
 801511a:	68b8      	ldr	r0, [r7, #8]
 801511c:	f000 fff3 	bl	8016106 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8015120:	4602      	mov	r2, r0
 8015122:	f107 031c 	add.w	r3, r7, #28
 8015126:	4619      	mov	r1, r3
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f7fc f80e 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801512e:	e0db      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	683a      	ldr	r2, [r7, #0]
 8015134:	68b9      	ldr	r1, [r7, #8]
 8015136:	4618      	mov	r0, r3
 8015138:	f000 fffd 	bl	8016136 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 801513c:	e0d4      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801513e:	68bc      	ldr	r4, [r7, #8]
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	4618      	mov	r0, r3
 8015144:	f000 ffeb 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015148:	4603      	mov	r3, r0
 801514a:	461a      	mov	r2, r3
 801514c:	6839      	ldr	r1, [r7, #0]
 801514e:	4620      	mov	r0, r4
 8015150:	f000 fbda 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d057      	beq.n	801520a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 801515a:	69bb      	ldr	r3, [r7, #24]
 801515c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801515e:	69bc      	ldr	r4, [r7, #24]
 8015160:	68b8      	ldr	r0, [r7, #8]
 8015162:	f001 f86d 	bl	8016240 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8015166:	4603      	mov	r3, r0
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	429c      	cmp	r4, r3
 801516c:	bf0c      	ite	eq
 801516e:	2301      	moveq	r3, #1
 8015170:	2300      	movne	r3, #0
 8015172:	b2db      	uxtb	r3, r3
 8015174:	2b00      	cmp	r3, #0
 8015176:	d00d      	beq.n	8015194 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8015178:	68b8      	ldr	r0, [r7, #8]
 801517a:	f001 f861 	bl	8016240 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 801517e:	4604      	mov	r4, r0
 8015180:	68b8      	ldr	r0, [r7, #8]
 8015182:	f001 f85d 	bl	8016240 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8015186:	4603      	mov	r3, r0
 8015188:	461a      	mov	r2, r3
 801518a:	4621      	mov	r1, r4
 801518c:	68f8      	ldr	r0, [r7, #12]
 801518e:	f7fc f883 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015192:	e0a9      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8015194:	68bc      	ldr	r4, [r7, #8]
 8015196:	f107 0314 	add.w	r3, r7, #20
 801519a:	4618      	mov	r0, r3
 801519c:	f001 f85c 	bl	8016258 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 80151a0:	4603      	mov	r3, r0
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	4618      	mov	r0, r3
 80151a6:	f000 ffba 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80151aa:	4603      	mov	r3, r0
 80151ac:	683a      	ldr	r2, [r7, #0]
 80151ae:	4619      	mov	r1, r3
 80151b0:	4620      	mov	r0, r4
 80151b2:	f000 fba9 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80151b6:	4603      	mov	r3, r0
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d01f      	beq.n	80151fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80151bc:	697b      	ldr	r3, [r7, #20]
 80151be:	4618      	mov	r0, r3
 80151c0:	f7fe feef 	bl	8013fa2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	bf0c      	ite	eq
 80151ca:	2301      	moveq	r3, #1
 80151cc:	2300      	movne	r3, #0
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d00a      	beq.n	80151ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 80151d4:	2300      	movs	r3, #0
 80151d6:	623b      	str	r3, [r7, #32]
 80151d8:	f107 0214 	add.w	r2, r7, #20
 80151dc:	f107 0320 	add.w	r3, r7, #32
 80151e0:	4619      	mov	r1, r3
 80151e2:	68f8      	ldr	r0, [r7, #12]
 80151e4:	f7fb ffb1 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80151e8:	e07e      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80151ea:	f107 0218 	add.w	r2, r7, #24
 80151ee:	f107 0318 	add.w	r3, r7, #24
 80151f2:	4619      	mov	r1, r3
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f7fc f84f 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80151fa:	e075      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	683a      	ldr	r2, [r7, #0]
 8015200:	68b9      	ldr	r1, [r7, #8]
 8015202:	4618      	mov	r0, r3
 8015204:	f000 ff97 	bl	8016136 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8015208:	e06e      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801520a:	68bc      	ldr	r4, [r7, #8]
 801520c:	69bb      	ldr	r3, [r7, #24]
 801520e:	4618      	mov	r0, r3
 8015210:	f000 ff85 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015214:	4603      	mov	r3, r0
 8015216:	683a      	ldr	r2, [r7, #0]
 8015218:	4619      	mov	r1, r3
 801521a:	4620      	mov	r0, r4
 801521c:	f000 fb74 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015220:	4603      	mov	r3, r0
 8015222:	2b00      	cmp	r3, #0
 8015224:	d056      	beq.n	80152d4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801522a:	69bc      	ldr	r4, [r7, #24]
 801522c:	68b8      	ldr	r0, [r7, #8]
 801522e:	f000 ff6a 	bl	8016106 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8015232:	4603      	mov	r3, r0
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	429c      	cmp	r4, r3
 8015238:	bf0c      	ite	eq
 801523a:	2301      	moveq	r3, #1
 801523c:	2300      	movne	r3, #0
 801523e:	b2db      	uxtb	r3, r3
 8015240:	2b00      	cmp	r3, #0
 8015242:	d00c      	beq.n	801525e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8015244:	2300      	movs	r3, #0
 8015246:	627b      	str	r3, [r7, #36]	; 0x24
 8015248:	68b8      	ldr	r0, [r7, #8]
 801524a:	f000 ff5c 	bl	8016106 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 801524e:	4602      	mov	r2, r0
 8015250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015254:	4619      	mov	r1, r3
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	f7fb ff77 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801525c:	e044      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801525e:	68bc      	ldr	r4, [r7, #8]
 8015260:	f107 0310 	add.w	r3, r7, #16
 8015264:	4618      	mov	r0, r3
 8015266:	f001 f808 	bl	801627a <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 801526a:	4603      	mov	r3, r0
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	4618      	mov	r0, r3
 8015270:	f000 ff55 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015274:	4603      	mov	r3, r0
 8015276:	461a      	mov	r2, r3
 8015278:	6839      	ldr	r1, [r7, #0]
 801527a:	4620      	mov	r0, r4
 801527c:	f000 fb44 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d01f      	beq.n	80152c6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	4618      	mov	r0, r3
 801528a:	f7fe fe8a 	bl	8013fa2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	bf0c      	ite	eq
 8015294:	2301      	moveq	r3, #1
 8015296:	2300      	movne	r3, #0
 8015298:	b2db      	uxtb	r3, r3
 801529a:	2b00      	cmp	r3, #0
 801529c:	d00a      	beq.n	80152b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 801529e:	2300      	movs	r3, #0
 80152a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80152a2:	f107 0218 	add.w	r2, r7, #24
 80152a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152aa:	4619      	mov	r1, r3
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f7fb ff4c 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80152b2:	e019      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80152b4:	f107 0210 	add.w	r2, r7, #16
 80152b8:	f107 0310 	add.w	r3, r7, #16
 80152bc:	4619      	mov	r1, r3
 80152be:	68f8      	ldr	r0, [r7, #12]
 80152c0:	f7fb ffea 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80152c4:	e010      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	683a      	ldr	r2, [r7, #0]
 80152ca:	68b9      	ldr	r1, [r7, #8]
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 ff32 	bl	8016136 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80152d2:	e009      	b.n	80152e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80152d4:	2300      	movs	r3, #0
 80152d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80152dc:	f107 0318 	add.w	r3, r7, #24
 80152e0:	4619      	mov	r1, r3
 80152e2:	68f8      	ldr	r0, [r7, #12]
 80152e4:	f7fc f80e 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80152e8:	68f8      	ldr	r0, [r7, #12]
 80152ea:	3734      	adds	r7, #52	; 0x34
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd90      	pop	{r4, r7, pc}

080152f0 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 80152f0:	b480      	push	{r7}
 80152f2:	b083      	sub	sp, #12
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	4618      	mov	r0, r3
 80152fe:	370c      	adds	r7, #12
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	4618      	mov	r0, r3
 8015314:	370c      	adds	r7, #12
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr

0801531e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801531e:	b5b0      	push	{r4, r5, r7, lr}
 8015320:	b088      	sub	sp, #32
 8015322:	af00      	add	r7, sp, #0
 8015324:	60f8      	str	r0, [r7, #12]
 8015326:	60b9      	str	r1, [r7, #8]
 8015328:	607a      	str	r2, [r7, #4]
 801532a:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d11a      	bne.n	8015368 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015332:	68f8      	ldr	r0, [r7, #12]
 8015334:	f000 fecf 	bl	80160d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8015338:	4602      	mov	r2, r0
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4293      	cmp	r3, r2
 801533e:	d013      	beq.n	8015368 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015340:	68fc      	ldr	r4, [r7, #12]
 8015342:	f107 0310 	add.w	r3, r7, #16
 8015346:	6839      	ldr	r1, [r7, #0]
 8015348:	4618      	mov	r0, r3
 801534a:	f7ff ffd1 	bl	80152f0 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 801534e:	4605      	mov	r5, r0
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f000 fee4 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015356:	4603      	mov	r3, r0
 8015358:	461a      	mov	r2, r3
 801535a:	4629      	mov	r1, r5
 801535c:	4620      	mov	r0, r4
 801535e:	f000 fad3 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015362:	4603      	mov	r3, r0
 8015364:	2b00      	cmp	r3, #0
 8015366:	d001      	beq.n	801536c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8015368:	2301      	movs	r3, #1
 801536a:	e000      	b.n	801536e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 801536c:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 801536e:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015370:	6838      	ldr	r0, [r7, #0]
 8015372:	f7ff ffc9 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8015376:	4603      	mov	r3, r0
 8015378:	4619      	mov	r1, r3
 801537a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801537c:	f000 ff8e 	bl	801629c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8015380:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015386:	7ff8      	ldrb	r0, [r7, #31]
 8015388:	687a      	ldr	r2, [r7, #4]
 801538a:	69b9      	ldr	r1, [r7, #24]
 801538c:	f004 f931 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	695b      	ldr	r3, [r3, #20]
 8015394:	1c5a      	adds	r2, r3, #1
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 801539a:	f107 0314 	add.w	r3, r7, #20
 801539e:	69b9      	ldr	r1, [r7, #24]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7ff fe73 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80153a6:	697b      	ldr	r3, [r7, #20]
      }
 80153a8:	4618      	mov	r0, r3
 80153aa:	3720      	adds	r7, #32
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bdb0      	pop	{r4, r5, r7, pc}

080153b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80153b0:	b590      	push	{r4, r7, lr}
 80153b2:	b083      	sub	sp, #12
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f000 ff82 	bl	80162c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80153c0:	4604      	mov	r4, r0
 80153c2:	6838      	ldr	r0, [r7, #0]
 80153c4:	f000 ff89 	bl	80162da <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 80153c8:	4603      	mov	r3, r0
 80153ca:	4619      	mov	r1, r3
 80153cc:	4620      	mov	r0, r4
 80153ce:	f000 ff92 	bl	80162f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 80153d2:	bf00      	nop
 80153d4:	370c      	adds	r7, #12
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd90      	pop	{r4, r7, pc}

080153da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80153da:	b580      	push	{r7, lr}
 80153dc:	b082      	sub	sp, #8
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
 80153e2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f000 ff6d 	bl	80162c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80153ea:	4603      	mov	r3, r0
 80153ec:	2201      	movs	r2, #1
 80153ee:	6839      	ldr	r1, [r7, #0]
 80153f0:	4618      	mov	r0, r3
 80153f2:	f000 ff8c 	bl	801630e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 80153f6:	bf00      	nop
 80153f8:	3708      	adds	r7, #8
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
 80153fe:	b480      	push	{r7}
 8015400:	b083      	sub	sp, #12
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	4618      	mov	r0, r3
 801540a:	370c      	adds	r7, #12
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	4618      	mov	r0, r3
 8015420:	370c      	adds	r7, #12
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr

0801542a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801542a:	b580      	push	{r7, lr}
 801542c:	b082      	sub	sp, #8
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
 8015432:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015434:	6839      	ldr	r1, [r7, #0]
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f000 ff88 	bl	801634c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	4618      	mov	r0, r3
 8015440:	3708      	adds	r7, #8
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}

08015446 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8015446:	b480      	push	{r7}
 8015448:	b083      	sub	sp, #12
 801544a:	af00      	add	r7, sp, #0
 801544c:	6078      	str	r0, [r7, #4]
 801544e:	6039      	str	r1, [r7, #0]
      { }
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	4618      	mov	r0, r3
 8015454:	370c      	adds	r7, #12
 8015456:	46bd      	mov	sp, r7
 8015458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545c:	4770      	bx	lr

0801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801545e:	b480      	push	{r7}
 8015460:	b083      	sub	sp, #12
 8015462:	af00      	add	r7, sp, #0
 8015464:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	4618      	mov	r0, r3
 801546a:	370c      	adds	r7, #12
 801546c:	46bd      	mov	sp, r7
 801546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015472:	4770      	bx	lr

08015474 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015474:	b5b0      	push	{r4, r5, r7, lr}
 8015476:	b088      	sub	sp, #32
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d11a      	bne.n	80154be <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015488:	68f8      	ldr	r0, [r7, #12]
 801548a:	f7fb fdab 	bl	8010fe4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801548e:	4602      	mov	r2, r0
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	4293      	cmp	r3, r2
 8015494:	d013      	beq.n	80154be <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015496:	68fc      	ldr	r4, [r7, #12]
 8015498:	f107 0310 	add.w	r3, r7, #16
 801549c:	6839      	ldr	r1, [r7, #0]
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fb ff54 	bl	801134c <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 80154a4:	4605      	mov	r5, r0
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7fb f968 	bl	801077c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80154ac:	4603      	mov	r3, r0
 80154ae:	461a      	mov	r2, r3
 80154b0:	4629      	mov	r1, r5
 80154b2:	4620      	mov	r0, r4
 80154b4:	f7fa fb27 	bl	800fb06 <_ZNKSt4lessItEclERKtS2_>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d001      	beq.n	80154c2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 80154be:	2301      	movs	r3, #1
 80154c0:	e000      	b.n	80154c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 80154c2:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80154c4:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80154c6:	6838      	ldr	r0, [r7, #0]
 80154c8:	f7ff ffc9 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80154cc:	4603      	mov	r3, r0
 80154ce:	4619      	mov	r1, r3
 80154d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154d2:	f000 ff47 	bl	8016364 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 80154d6:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80154dc:	7ff8      	ldrb	r0, [r7, #31]
 80154de:	687a      	ldr	r2, [r7, #4]
 80154e0:	69b9      	ldr	r1, [r7, #24]
 80154e2:	f004 f886 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	695b      	ldr	r3, [r3, #20]
 80154ea:	1c5a      	adds	r2, r3, #1
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80154f0:	f107 0314 	add.w	r3, r7, #20
 80154f4:	69b9      	ldr	r1, [r7, #24]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fb f8e8 	bl	80106cc <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80154fc:	697b      	ldr	r3, [r7, #20]
      }
 80154fe:	4618      	mov	r0, r3
 8015500:	3720      	adds	r7, #32
 8015502:	46bd      	mov	sp, r7
 8015504:	bdb0      	pop	{r4, r5, r7, pc}

08015506 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8015506:	b580      	push	{r7, lr}
 8015508:	b084      	sub	sp, #16
 801550a:	af00      	add	r7, sp, #0
 801550c:	60f8      	str	r0, [r7, #12]
 801550e:	60b9      	str	r1, [r7, #8]
 8015510:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4619      	mov	r1, r3
 8015518:	68b8      	ldr	r0, [r7, #8]
 801551a:	f003 ffff 	bl	801951c <_ZdlPvj>
      }
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	4618      	mov	r0, r3
 8015530:	370c      	adds	r7, #12
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr

0801553a <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 801553a:	b580      	push	{r7, lr}
 801553c:	b082      	sub	sp, #8
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f000 ff22 	bl	801638c <_ZSt10destroy_atImEvPT_>
    }
 8015548:	bf00      	nop
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}

08015550 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8015550:	b480      	push	{r7}
 8015552:	b083      	sub	sp, #12
 8015554:	af00      	add	r7, sp, #0
 8015556:	6078      	str	r0, [r7, #4]
 8015558:	6039      	str	r1, [r7, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	370c      	adds	r7, #12
 8015560:	46bd      	mov	sp, r7
 8015562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015566:	4770      	bx	lr

08015568 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	f107 030c 	add.w	r3, r7, #12
 8015578:	4611      	mov	r1, r2
 801557a:	4618      	mov	r0, r3
 801557c:	f7fe fe11 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	4618      	mov	r0, r3
 8015584:	3710      	adds	r7, #16
 8015586:	46bd      	mov	sp, r7
 8015588:	bd80      	pop	{r7, pc}

0801558a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801558a:	b480      	push	{r7}
 801558c:	b083      	sub	sp, #12
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	3304      	adds	r3, #4
 8015596:	4618      	mov	r0, r3
 8015598:	370c      	adds	r7, #12
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr

080155a2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80155a2:	b480      	push	{r7}
 80155a4:	b083      	sub	sp, #12
 80155a6:	af00      	add	r7, sp, #0
 80155a8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	4618      	mov	r0, r3
 80155b0:	370c      	adds	r7, #12
 80155b2:	46bd      	mov	sp, r7
 80155b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b8:	4770      	bx	lr

080155ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80155ba:	b480      	push	{r7}
 80155bc:	b083      	sub	sp, #12
 80155be:	af00      	add	r7, sp, #0
 80155c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	3310      	adds	r3, #16
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr

080155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80155d2:	b580      	push	{r7, lr}
 80155d4:	b082      	sub	sp, #8
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f000 fee0 	bl	80163a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80155e0:	4603      	mov	r3, r0
 80155e2:	4618      	mov	r0, r3
 80155e4:	3708      	adds	r7, #8
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}

080155ea <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 80155ea:	b580      	push	{r7, lr}
 80155ec:	b084      	sub	sp, #16
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	60f8      	str	r0, [r7, #12]
 80155f2:	60b9      	str	r1, [r7, #8]
 80155f4:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 80155f6:	6879      	ldr	r1, [r7, #4]
 80155f8:	68b8      	ldr	r0, [r7, #8]
 80155fa:	f7fc ff43 	bl	8012484 <_ZNK3PinltERKS_>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d001      	beq.n	8015608 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 8015604:	23ff      	movs	r3, #255	; 0xff
 8015606:	e009      	b.n	801561c <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8015608:	68b9      	ldr	r1, [r7, #8]
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	f7fc ff3a 	bl	8012484 <_ZNK3PinltERKS_>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d001      	beq.n	801561a <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 8015616:	2301      	movs	r3, #1
 8015618:	e000      	b.n	801561c <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 801561a:	2300      	movs	r3, #0
	    }
	}
 801561c:	4618      	mov	r0, r3
 801561e:	3710      	adds	r7, #16
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}

08015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8015624:	b590      	push	{r4, r7, lr}
 8015626:	b087      	sub	sp, #28
 8015628:	af00      	add	r7, sp, #0
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8015630:	6879      	ldr	r1, [r7, #4]
 8015632:	68b8      	ldr	r0, [r7, #8]
 8015634:	f000 fec8 	bl	80163c8 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 8015638:	4604      	mov	r4, r0
 801563a:	f107 0314 	add.w	r3, r7, #20
 801563e:	2100      	movs	r1, #0
 8015640:	4618      	mov	r0, r3
 8015642:	f7fc fecb 	bl	80123dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8015646:	7d39      	ldrb	r1, [r7, #20]
 8015648:	4620      	mov	r0, r4
 801564a:	f7fc fee5 	bl	8012418 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 801564e:	4603      	mov	r3, r0
 8015650:	4618      	mov	r0, r3
 8015652:	371c      	adds	r7, #28
 8015654:	46bd      	mov	sp, r7
 8015656:	bd90      	pop	{r4, r7, pc}

08015658 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015658:	b590      	push	{r4, r7, lr}
 801565a:	b08b      	sub	sp, #44	; 0x2c
 801565c:	af00      	add	r7, sp, #0
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8015664:	68b8      	ldr	r0, [r7, #8]
 8015666:	f7fd fc96 	bl	8012f96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 801566a:	4603      	mov	r3, r0
 801566c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801566e:	68b8      	ldr	r0, [r7, #8]
 8015670:	f7ff ff8b 	bl	801558a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8015674:	4603      	mov	r3, r0
 8015676:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8015678:	2301      	movs	r3, #1
 801567a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d020      	beq.n	80156c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8015684:	69bb      	ldr	r3, [r7, #24]
 8015686:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8015688:	68bc      	ldr	r4, [r7, #8]
 801568a:	69bb      	ldr	r3, [r7, #24]
 801568c:	4618      	mov	r0, r3
 801568e:	f000 fe87 	bl	80163a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8015692:	4603      	mov	r3, r0
 8015694:	461a      	mov	r2, r3
 8015696:	6879      	ldr	r1, [r7, #4]
 8015698:	4620      	mov	r0, r4
 801569a:	f7ff ffc3 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801569e:	4603      	mov	r3, r0
 80156a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80156a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d005      	beq.n	80156b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7fe f940 	bl	8013934 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80156b4:	4603      	mov	r3, r0
 80156b6:	e004      	b.n	80156c2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 80156b8:	69bb      	ldr	r3, [r7, #24]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fe f92e 	bl	801391c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80156c0:	4603      	mov	r3, r0
 80156c2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80156c4:	e7db      	b.n	801567e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80156c6:	697a      	ldr	r2, [r7, #20]
 80156c8:	f107 0310 	add.w	r3, r7, #16
 80156cc:	4611      	mov	r1, r2
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fe fd67 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80156d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d01d      	beq.n	8015718 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 80156dc:	68b8      	ldr	r0, [r7, #8]
 80156de:	f000 fea3 	bl	8016428 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 80156e2:	4603      	mov	r3, r0
 80156e4:	61fb      	str	r3, [r7, #28]
 80156e6:	f107 021c 	add.w	r2, r7, #28
 80156ea:	f107 0310 	add.w	r3, r7, #16
 80156ee:	4611      	mov	r1, r2
 80156f0:	4618      	mov	r0, r3
 80156f2:	f000 feaa 	bl	801644a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d008      	beq.n	801570e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 80156fc:	f107 0214 	add.w	r2, r7, #20
 8015700:	f107 0318 	add.w	r3, r7, #24
 8015704:	4619      	mov	r1, r3
 8015706:	68f8      	ldr	r0, [r7, #12]
 8015708:	f000 feb3 	bl	8016472 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 801570c:	e025      	b.n	801575a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 801570e:	f107 0310 	add.w	r3, r7, #16
 8015712:	4618      	mov	r0, r3
 8015714:	f000 f831 	bl	801577a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8015718:	68bc      	ldr	r4, [r7, #8]
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	4618      	mov	r0, r3
 801571e:	f7ff ff58 	bl	80155d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015722:	4603      	mov	r3, r0
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	4619      	mov	r1, r3
 8015728:	4620      	mov	r0, r4
 801572a:	f7ff ff7b 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801572e:	4603      	mov	r3, r0
 8015730:	2b00      	cmp	r3, #0
 8015732:	d008      	beq.n	8015746 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8015734:	f107 0214 	add.w	r2, r7, #20
 8015738:	f107 0318 	add.w	r3, r7, #24
 801573c:	4619      	mov	r1, r3
 801573e:	68f8      	ldr	r0, [r7, #12]
 8015740:	f000 fe97 	bl	8016472 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 8015744:	e009      	b.n	801575a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8015746:	2300      	movs	r3, #0
 8015748:	623b      	str	r3, [r7, #32]
 801574a:	f107 0220 	add.w	r2, r7, #32
 801574e:	f107 0310 	add.w	r3, r7, #16
 8015752:	4619      	mov	r1, r3
 8015754:	68f8      	ldr	r0, [r7, #12]
 8015756:	f7fb fdd5 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	372c      	adds	r7, #44	; 0x2c
 801575e:	46bd      	mov	sp, r7
 8015760:	bd90      	pop	{r4, r7, pc}

08015762 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8015762:	b480      	push	{r7}
 8015764:	b083      	sub	sp, #12
 8015766:	af00      	add	r7, sp, #0
 8015768:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	330c      	adds	r3, #12
 801576e:	4618      	mov	r0, r3
 8015770:	370c      	adds	r7, #12
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr

0801577a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801577a:	b580      	push	{r7, lr}
 801577c:	b082      	sub	sp, #8
 801577e:	af00      	add	r7, sp, #0
 8015780:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4618      	mov	r0, r3
 8015788:	f003 ff31 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801578c:	4602      	mov	r2, r0
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	601a      	str	r2, [r3, #0]
	return *this;
 8015792:	687b      	ldr	r3, [r7, #4]
      }
 8015794:	4618      	mov	r0, r3
 8015796:	3708      	adds	r7, #8
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f003 ff1e 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80157ae:	4602      	mov	r2, r0
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	601a      	str	r2, [r3, #0]
	return *this;
 80157b4:	687b      	ldr	r3, [r7, #4]
      }
 80157b6:	4618      	mov	r0, r3
 80157b8:	3708      	adds	r7, #8
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 80157be:	b590      	push	{r4, r7, lr}
 80157c0:	b083      	sub	sp, #12
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
 80157c6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	681c      	ldr	r4, [r3, #0]
 80157cc:	6838      	ldr	r0, [r7, #0]
 80157ce:	f7fe fe26 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 80157d2:	4603      	mov	r3, r0
 80157d4:	4619      	mov	r1, r3
 80157d6:	4620      	mov	r0, r4
 80157d8:	f000 fe64 	bl	80164a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80157dc:	4603      	mov	r3, r0
 80157de:	4618      	mov	r0, r3
 80157e0:	370c      	adds	r7, #12
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd90      	pop	{r4, r7, pc}

080157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80157e6:	b480      	push	{r7}
 80157e8:	b083      	sub	sp, #12
 80157ea:	af00      	add	r7, sp, #0
 80157ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	4618      	mov	r0, r3
 80157f2:	370c      	adds	r7, #12
 80157f4:	46bd      	mov	sp, r7
 80157f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fa:	4770      	bx	lr

080157fc <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr()
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	3310      	adds	r3, #16
 8015808:	4618      	mov	r0, r3
 801580a:	f000 fe62 	bl	80164d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 801580e:	4603      	mov	r3, r0
 8015810:	4618      	mov	r0, r3
 8015812:	3708      	adds	r7, #8
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8015822:	6838      	ldr	r0, [r7, #0]
 8015824:	f000 fe61 	bl	80164ea <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>
	}
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015830:	b580      	push	{r7, lr}
 8015832:	b088      	sub	sp, #32
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	60b9      	str	r1, [r7, #8]
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	61fb      	str	r3, [r7, #28]
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	61bb      	str	r3, [r7, #24]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8015848:	f7f8 fad8 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d003      	beq.n	801585a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8015852:	69b8      	ldr	r0, [r7, #24]
 8015854:	f003 fe60 	bl	8019518 <_ZdlPv>
	    return;
 8015858:	e005      	b.n	8015866 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801585a:	697a      	ldr	r2, [r7, #20]
 801585c:	69b9      	ldr	r1, [r7, #24]
 801585e:	69f8      	ldr	r0, [r7, #28]
 8015860:	f001 f8b1 	bl	80169c6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8015864:	bf00      	nop
 8015866:	bf00      	nop
 8015868:	3720      	adds	r7, #32
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}

0801586e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>:
 801586e:	b480      	push	{r7}
 8015870:	b083      	sub	sp, #12
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
 8015876:	6039      	str	r1, [r7, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	4618      	mov	r0, r3
 801587c:	370c      	adds	r7, #12
 801587e:	46bd      	mov	sp, r7
 8015880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015884:	4770      	bx	lr

08015886 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8015886:	b580      	push	{r7, lr}
 8015888:	b084      	sub	sp, #16
 801588a:	af00      	add	r7, sp, #0
 801588c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	f107 030c 	add.w	r3, r7, #12
 8015896:	4611      	mov	r1, r2
 8015898:	4618      	mov	r0, r3
 801589a:	f7fe fe60 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	4618      	mov	r0, r3
 80158a2:	3710      	adds	r7, #16
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	3304      	adds	r3, #4
 80158b4:	4618      	mov	r0, r3
 80158b6:	370c      	adds	r7, #12
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80158c0:	b480      	push	{r7}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	695b      	ldr	r3, [r3, #20]
 80158cc:	4618      	mov	r0, r3
 80158ce:	370c      	adds	r7, #12
 80158d0:	46bd      	mov	sp, r7
 80158d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d6:	4770      	bx	lr

080158d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	3310      	adds	r3, #16
 80158e4:	4618      	mov	r0, r3
 80158e6:	370c      	adds	r7, #12
 80158e8:	46bd      	mov	sp, r7
 80158ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ee:	4770      	bx	lr

080158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f000 fe00 	bl	80164fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80158fe:	4603      	mov	r3, r0
 8015900:	4618      	mov	r0, r3
 8015902:	3708      	adds	r7, #8
 8015904:	46bd      	mov	sp, r7
 8015906:	bd80      	pop	{r7, pc}

08015908 <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	60f8      	str	r0, [r7, #12]
 8015910:	60b9      	str	r1, [r7, #8]
 8015912:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8015914:	6879      	ldr	r1, [r7, #4]
 8015916:	68b8      	ldr	r0, [r7, #8]
 8015918:	f7fc fdb4 	bl	8012484 <_ZNK3PinltERKS_>
 801591c:	4603      	mov	r3, r0
 801591e:	4618      	mov	r0, r3
 8015920:	3710      	adds	r7, #16
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}

08015926 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015926:	b590      	push	{r4, r7, lr}
 8015928:	b08b      	sub	sp, #44	; 0x2c
 801592a:	af00      	add	r7, sp, #0
 801592c:	60f8      	str	r0, [r7, #12]
 801592e:	60b9      	str	r1, [r7, #8]
 8015930:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8015932:	68b8      	ldr	r0, [r7, #8]
 8015934:	f7fd fbdb 	bl	80130ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 8015938:	4603      	mov	r3, r0
 801593a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801593c:	68b8      	ldr	r0, [r7, #8]
 801593e:	f7ff ffb3 	bl	80158a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8015942:	4603      	mov	r3, r0
 8015944:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8015946:	2301      	movs	r3, #1
 8015948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801594c:	69bb      	ldr	r3, [r7, #24]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d020      	beq.n	8015994 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8015956:	68bc      	ldr	r4, [r7, #8]
 8015958:	69bb      	ldr	r3, [r7, #24]
 801595a:	4618      	mov	r0, r3
 801595c:	f000 fdcf 	bl	80164fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8015960:	4603      	mov	r3, r0
 8015962:	461a      	mov	r2, r3
 8015964:	6879      	ldr	r1, [r7, #4]
 8015966:	4620      	mov	r0, r4
 8015968:	f7ff ffce 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801596c:	4603      	mov	r3, r0
 801596e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8015972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015976:	2b00      	cmp	r3, #0
 8015978:	d005      	beq.n	8015986 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x60>
 801597a:	69bb      	ldr	r3, [r7, #24]
 801597c:	4618      	mov	r0, r3
 801597e:	f7fe f8a7 	bl	8013ad0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8015982:	4603      	mov	r3, r0
 8015984:	e004      	b.n	8015990 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6a>
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	4618      	mov	r0, r3
 801598a:	f7fe f895 	bl	8013ab8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801598e:	4603      	mov	r3, r0
 8015990:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8015992:	e7db      	b.n	801594c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8015994:	697a      	ldr	r2, [r7, #20]
 8015996:	f107 0310 	add.w	r3, r7, #16
 801599a:	4611      	mov	r1, r2
 801599c:	4618      	mov	r0, r3
 801599e:	f7fe fdde 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80159a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d01d      	beq.n	80159e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 80159aa:	68b8      	ldr	r0, [r7, #8]
 80159ac:	f000 fdba 	bl	8016524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>
 80159b0:	4603      	mov	r3, r0
 80159b2:	61fb      	str	r3, [r7, #28]
 80159b4:	f107 021c 	add.w	r2, r7, #28
 80159b8:	f107 0310 	add.w	r3, r7, #16
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f000 fdc1 	bl	8016546 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 80159c4:	4603      	mov	r3, r0
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d008      	beq.n	80159dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 80159ca:	f107 0214 	add.w	r2, r7, #20
 80159ce:	f107 0318 	add.w	r3, r7, #24
 80159d2:	4619      	mov	r1, r3
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f000 fdca 	bl	801656e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 80159da:	e025      	b.n	8015a28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80159dc:	f107 0310 	add.w	r3, r7, #16
 80159e0:	4618      	mov	r0, r3
 80159e2:	f000 f831 	bl	8015a48 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80159e6:	68bc      	ldr	r4, [r7, #8]
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ff ff80 	bl	80158f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80159f0:	4603      	mov	r3, r0
 80159f2:	687a      	ldr	r2, [r7, #4]
 80159f4:	4619      	mov	r1, r3
 80159f6:	4620      	mov	r0, r4
 80159f8:	f7ff ff86 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80159fc:	4603      	mov	r3, r0
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d008      	beq.n	8015a14 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8015a02:	f107 0214 	add.w	r2, r7, #20
 8015a06:	f107 0318 	add.w	r3, r7, #24
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	68f8      	ldr	r0, [r7, #12]
 8015a0e:	f000 fdae 	bl	801656e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8015a12:	e009      	b.n	8015a28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8015a14:	2300      	movs	r3, #0
 8015a16:	623b      	str	r3, [r7, #32]
 8015a18:	f107 0220 	add.w	r2, r7, #32
 8015a1c:	f107 0310 	add.w	r3, r7, #16
 8015a20:	4619      	mov	r1, r3
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f7fb fc6e 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	372c      	adds	r7, #44	; 0x2c
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd90      	pop	{r4, r7, pc}

08015a30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8015a30:	b480      	push	{r7}
 8015a32:	b083      	sub	sp, #12
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	330c      	adds	r3, #12
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	370c      	adds	r7, #12
 8015a40:	46bd      	mov	sp, r7
 8015a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a46:	4770      	bx	lr

08015a48 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f003 fdca 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	601a      	str	r2, [r3, #0]
	return *this;
 8015a60:	687b      	ldr	r3, [r7, #4]
      }
 8015a62:	4618      	mov	r0, r3
 8015a64:	3708      	adds	r7, #8
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}

08015a6a <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8015a6a:	b580      	push	{r7, lr}
 8015a6c:	b082      	sub	sp, #8
 8015a6e:	af00      	add	r7, sp, #0
 8015a70:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f003 fdb7 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8015a7c:	4602      	mov	r2, r0
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	601a      	str	r2, [r3, #0]
	return *this;
 8015a82:	687b      	ldr	r3, [r7, #4]
      }
 8015a84:	4618      	mov	r0, r3
 8015a86:	3708      	adds	r7, #8
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}

08015a8c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 8015a8c:	b590      	push	{r4, r7, lr}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
 8015a94:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681c      	ldr	r4, [r3, #0]
 8015a9a:	6838      	ldr	r0, [r7, #0]
 8015a9c:	f7fe fe9d 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	4619      	mov	r1, r3
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	f000 fd7b 	bl	80165a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd90      	pop	{r4, r7, pc}

08015ab4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8015ab4:	b480      	push	{r7}
 8015ab6:	b083      	sub	sp, #12
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b082      	sub	sp, #8
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	3310      	adds	r3, #16
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f000 fd79 	bl	80165ce <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 8015adc:	4603      	mov	r3, r0
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3708      	adds	r7, #8
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b082      	sub	sp, #8
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8015af0:	6838      	ldr	r0, [r7, #0]
 8015af2:	f000 fd78 	bl	80165e6 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>
	}
 8015af6:	bf00      	nop
 8015af8:	3708      	adds	r7, #8
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}

08015afe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b088      	sub	sp, #32
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	60f8      	str	r0, [r7, #12]
 8015b06:	60b9      	str	r1, [r7, #8]
 8015b08:	607a      	str	r2, [r7, #4]
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	61fb      	str	r3, [r7, #28]
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	61bb      	str	r3, [r7, #24]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8015b16:	f7f8 f971 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d003      	beq.n	8015b28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8015b20:	69b8      	ldr	r0, [r7, #24]
 8015b22:	f003 fcf9 	bl	8019518 <_ZdlPv>
	    return;
 8015b26:	e005      	b.n	8015b34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8015b28:	697a      	ldr	r2, [r7, #20]
 8015b2a:	69b9      	ldr	r1, [r7, #24]
 8015b2c:	69f8      	ldr	r0, [r7, #28]
 8015b2e:	f000 ffb1 	bl	8016a94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8015b32:	bf00      	nop
 8015b34:	bf00      	nop
 8015b36:	3720      	adds	r7, #32
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>:
 8015b3c:	b480      	push	{r7}
 8015b3e:	b083      	sub	sp, #12
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	4618      	mov	r0, r3
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	f107 030c 	add.w	r3, r7, #12
 8015b64:	4611      	mov	r1, r2
 8015b66:	4618      	mov	r0, r3
 8015b68:	f7fe fed6 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3710      	adds	r7, #16
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}

08015b76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8015b76:	b480      	push	{r7}
 8015b78:	b083      	sub	sp, #12
 8015b7a:	af00      	add	r7, sp, #0
 8015b7c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	3304      	adds	r3, #4
 8015b82:	4618      	mov	r0, r3
 8015b84:	370c      	adds	r7, #12
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr

08015b8e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015b8e:	b480      	push	{r7}
 8015b90:	b083      	sub	sp, #12
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	695b      	ldr	r3, [r3, #20]
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	370c      	adds	r7, #12
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr

08015ba6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8015ba6:	b480      	push	{r7}
 8015ba8:	b083      	sub	sp, #12
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	3310      	adds	r3, #16
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	370c      	adds	r7, #12
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbc:	4770      	bx	lr

08015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8015bbe:	b580      	push	{r7, lr}
 8015bc0:	b082      	sub	sp, #8
 8015bc2:	af00      	add	r7, sp, #0
 8015bc4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f000 fd17 	bl	80165fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3708      	adds	r7, #8
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015bd6:	b590      	push	{r4, r7, lr}
 8015bd8:	b08b      	sub	sp, #44	; 0x2c
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	60f8      	str	r0, [r7, #12]
 8015bde:	60b9      	str	r1, [r7, #8]
 8015be0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8015be2:	68b8      	ldr	r0, [r7, #8]
 8015be4:	f7fd fb54 	bl	8013290 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 8015be8:	4603      	mov	r3, r0
 8015bea:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8015bec:	68b8      	ldr	r0, [r7, #8]
 8015bee:	f7ff ffc2 	bl	8015b76 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8015bfc:	69bb      	ldr	r3, [r7, #24]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d020      	beq.n	8015c44 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8015c02:	69bb      	ldr	r3, [r7, #24]
 8015c04:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8015c06:	68bc      	ldr	r4, [r7, #8]
 8015c08:	69bb      	ldr	r3, [r7, #24]
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f000 fcf5 	bl	80165fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8015c10:	4603      	mov	r3, r0
 8015c12:	461a      	mov	r2, r3
 8015c14:	6879      	ldr	r1, [r7, #4]
 8015c16:	4620      	mov	r0, r4
 8015c18:	f7ff fd04 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8015c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d005      	beq.n	8015c36 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x60>
 8015c2a:	69bb      	ldr	r3, [r7, #24]
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f7fe f828 	bl	8013c82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8015c32:	4603      	mov	r3, r0
 8015c34:	e004      	b.n	8015c40 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6a>
 8015c36:	69bb      	ldr	r3, [r7, #24]
 8015c38:	4618      	mov	r0, r3
 8015c3a:	f7fe f816 	bl	8013c6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8015c42:	e7db      	b.n	8015bfc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8015c44:	697a      	ldr	r2, [r7, #20]
 8015c46:	f107 0310 	add.w	r3, r7, #16
 8015c4a:	4611      	mov	r1, r2
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	f7fe fe63 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8015c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d01d      	beq.n	8015c96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8015c5a:	68b8      	ldr	r0, [r7, #8]
 8015c5c:	f000 fce0 	bl	8016620 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>
 8015c60:	4603      	mov	r3, r0
 8015c62:	61fb      	str	r3, [r7, #28]
 8015c64:	f107 021c 	add.w	r2, r7, #28
 8015c68:	f107 0310 	add.w	r3, r7, #16
 8015c6c:	4611      	mov	r1, r2
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f000 fce7 	bl	8016642 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d008      	beq.n	8015c8c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8015c7a:	f107 0214 	add.w	r2, r7, #20
 8015c7e:	f107 0318 	add.w	r3, r7, #24
 8015c82:	4619      	mov	r1, r3
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	f000 fcf0 	bl	801666a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8015c8a:	e025      	b.n	8015cd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8015c8c:	f107 0310 	add.w	r3, r7, #16
 8015c90:	4618      	mov	r0, r3
 8015c92:	f000 f831 	bl	8015cf8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8015c96:	68bc      	ldr	r4, [r7, #8]
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f7ff ff8f 	bl	8015bbe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	687a      	ldr	r2, [r7, #4]
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f7ff fcbc 	bl	8015624 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015cac:	4603      	mov	r3, r0
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d008      	beq.n	8015cc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8015cb2:	f107 0214 	add.w	r2, r7, #20
 8015cb6:	f107 0318 	add.w	r3, r7, #24
 8015cba:	4619      	mov	r1, r3
 8015cbc:	68f8      	ldr	r0, [r7, #12]
 8015cbe:	f000 fcd4 	bl	801666a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8015cc2:	e009      	b.n	8015cd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	623b      	str	r3, [r7, #32]
 8015cc8:	f107 0220 	add.w	r2, r7, #32
 8015ccc:	f107 0310 	add.w	r3, r7, #16
 8015cd0:	4619      	mov	r1, r3
 8015cd2:	68f8      	ldr	r0, [r7, #12]
 8015cd4:	f7fb fb16 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015cd8:	68f8      	ldr	r0, [r7, #12]
 8015cda:	372c      	adds	r7, #44	; 0x2c
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd90      	pop	{r4, r7, pc}

08015ce0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8015ce0:	b480      	push	{r7}
 8015ce2:	b083      	sub	sp, #12
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	330c      	adds	r3, #12
 8015cec:	4618      	mov	r0, r3
 8015cee:	370c      	adds	r7, #12
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf6:	4770      	bx	lr

08015cf8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f003 fc72 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	601a      	str	r2, [r3, #0]
	return *this;
 8015d10:	687b      	ldr	r3, [r7, #4]
      }
 8015d12:	4618      	mov	r0, r3
 8015d14:	3708      	adds	r7, #8
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}

08015d1a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8015d1a:	b580      	push	{r7, lr}
 8015d1c:	b082      	sub	sp, #8
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f003 fc5f 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	601a      	str	r2, [r3, #0]
	return *this;
 8015d32:	687b      	ldr	r3, [r7, #4]
      }
 8015d34:	4618      	mov	r0, r3
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8015d3c:	b590      	push	{r4, r7, lr}
 8015d3e:	b083      	sub	sp, #12
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681c      	ldr	r4, [r3, #0]
 8015d4a:	6838      	ldr	r0, [r7, #0]
 8015d4c:	f7fe ff22 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8015d50:	4603      	mov	r3, r0
 8015d52:	4619      	mov	r1, r3
 8015d54:	4620      	mov	r0, r4
 8015d56:	f000 fca1 	bl	801669c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	370c      	adds	r7, #12
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd90      	pop	{r4, r7, pc}

08015d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8015d64:	b480      	push	{r7}
 8015d66:	b083      	sub	sp, #12
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	370c      	adds	r7, #12
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr

08015d7a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b082      	sub	sp, #8
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	3310      	adds	r3, #16
 8015d86:	4618      	mov	r0, r3
 8015d88:	f000 fc9f 	bl	80166ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3708      	adds	r7, #8
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8015d96:	b580      	push	{r7, lr}
 8015d98:	b082      	sub	sp, #8
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6078      	str	r0, [r7, #4]
 8015d9e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8015da0:	6838      	ldr	r0, [r7, #0]
 8015da2:	f000 fc9e 	bl	80166e2 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>
	}
 8015da6:	bf00      	nop
 8015da8:	3708      	adds	r7, #8
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}

08015dae <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015dae:	b580      	push	{r7, lr}
 8015db0:	b088      	sub	sp, #32
 8015db2:	af00      	add	r7, sp, #0
 8015db4:	60f8      	str	r0, [r7, #12]
 8015db6:	60b9      	str	r1, [r7, #8]
 8015db8:	607a      	str	r2, [r7, #4]
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	61fb      	str	r3, [r7, #28]
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	61bb      	str	r3, [r7, #24]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8015dc6:	f7f8 f819 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d003      	beq.n	8015dd8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8015dd0:	69b8      	ldr	r0, [r7, #24]
 8015dd2:	f003 fba1 	bl	8019518 <_ZdlPv>
	    return;
 8015dd6:	e005      	b.n	8015de4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8015dd8:	697a      	ldr	r2, [r7, #20]
 8015dda:	69b9      	ldr	r1, [r7, #24]
 8015ddc:	69f8      	ldr	r0, [r7, #28]
 8015dde:	f000 febd 	bl	8016b5c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8015de2:	bf00      	nop
 8015de4:	bf00      	nop
 8015de6:	3720      	adds	r7, #32
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>:
 8015dec:	b480      	push	{r7}
 8015dee:	b083      	sub	sp, #12
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
 8015df4:	6039      	str	r1, [r7, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	4618      	mov	r0, r3
 8015dfa:	370c      	adds	r7, #12
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr

08015e04 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681a      	ldr	r2, [r3, #0]
 8015e10:	f107 030c 	add.w	r3, r7, #12
 8015e14:	4611      	mov	r1, r2
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7fe ff5b 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3710      	adds	r7, #16
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}

08015e26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8015e26:	b480      	push	{r7}
 8015e28:	b083      	sub	sp, #12
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	3304      	adds	r3, #4
 8015e32:	4618      	mov	r0, r3
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3c:	4770      	bx	lr

08015e3e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015e3e:	b480      	push	{r7}
 8015e40:	b083      	sub	sp, #12
 8015e42:	af00      	add	r7, sp, #0
 8015e44:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	695b      	ldr	r3, [r3, #20]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	370c      	adds	r7, #12
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e54:	4770      	bx	lr

08015e56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8015e56:	b480      	push	{r7}
 8015e58:	b083      	sub	sp, #12
 8015e5a:	af00      	add	r7, sp, #0
 8015e5c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	3310      	adds	r3, #16
 8015e62:	4618      	mov	r0, r3
 8015e64:	370c      	adds	r7, #12
 8015e66:	46bd      	mov	sp, r7
 8015e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e6c:	4770      	bx	lr

08015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8015e6e:	b580      	push	{r7, lr}
 8015e70:	b082      	sub	sp, #8
 8015e72:	af00      	add	r7, sp, #0
 8015e74:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f000 fc3d 	bl	80166f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3708      	adds	r7, #8
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}

08015e86 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015e86:	b590      	push	{r4, r7, lr}
 8015e88:	b08b      	sub	sp, #44	; 0x2c
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	60f8      	str	r0, [r7, #12]
 8015e8e:	60b9      	str	r1, [r7, #8]
 8015e90:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8015e92:	68b8      	ldr	r0, [r7, #8]
 8015e94:	f7fd fac1 	bl	801341a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8015e9c:	68b8      	ldr	r0, [r7, #8]
 8015e9e:	f7ff ffc2 	bl	8015e26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d020      	beq.n	8015ef4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8015eb6:	68bc      	ldr	r4, [r7, #8]
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f000 fc1b 	bl	80166f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	6879      	ldr	r1, [r7, #4]
 8015ec6:	4620      	mov	r0, r4
 8015ec8:	f7ff fd1e 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8015ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d005      	beq.n	8015ee6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fd ff9e 	bl	8013e1e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	e004      	b.n	8015ef0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8015ee6:	69bb      	ldr	r3, [r7, #24]
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7fd ff8c 	bl	8013e06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8015ef2:	e7db      	b.n	8015eac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8015ef4:	697a      	ldr	r2, [r7, #20]
 8015ef6:	f107 0310 	add.w	r3, r7, #16
 8015efa:	4611      	mov	r1, r2
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fe fee8 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8015f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d01d      	beq.n	8015f46 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8015f0a:	68b8      	ldr	r0, [r7, #8]
 8015f0c:	f000 fc06 	bl	801671c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8015f10:	4603      	mov	r3, r0
 8015f12:	61fb      	str	r3, [r7, #28]
 8015f14:	f107 021c 	add.w	r2, r7, #28
 8015f18:	f107 0310 	add.w	r3, r7, #16
 8015f1c:	4611      	mov	r1, r2
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f000 fc0d 	bl	801673e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 8015f24:	4603      	mov	r3, r0
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d008      	beq.n	8015f3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8015f2a:	f107 0214 	add.w	r2, r7, #20
 8015f2e:	f107 0318 	add.w	r3, r7, #24
 8015f32:	4619      	mov	r1, r3
 8015f34:	68f8      	ldr	r0, [r7, #12]
 8015f36:	f000 fc16 	bl	8016766 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8015f3a:	e025      	b.n	8015f88 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8015f3c:	f107 0310 	add.w	r3, r7, #16
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 f831 	bl	8015fa8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8015f46:	68bc      	ldr	r4, [r7, #8]
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f7ff ff8f 	bl	8015e6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015f50:	4603      	mov	r3, r0
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	4619      	mov	r1, r3
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7ff fcd6 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d008      	beq.n	8015f74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8015f62:	f107 0214 	add.w	r2, r7, #20
 8015f66:	f107 0318 	add.w	r3, r7, #24
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	68f8      	ldr	r0, [r7, #12]
 8015f6e:	f000 fbfa 	bl	8016766 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8015f72:	e009      	b.n	8015f88 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8015f74:	2300      	movs	r3, #0
 8015f76:	623b      	str	r3, [r7, #32]
 8015f78:	f107 0220 	add.w	r2, r7, #32
 8015f7c:	f107 0310 	add.w	r3, r7, #16
 8015f80:	4619      	mov	r1, r3
 8015f82:	68f8      	ldr	r0, [r7, #12]
 8015f84:	f7fb f9be 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015f88:	68f8      	ldr	r0, [r7, #12]
 8015f8a:	372c      	adds	r7, #44	; 0x2c
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd90      	pop	{r4, r7, pc}

08015f90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	330c      	adds	r3, #12
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f003 fb1a 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	601a      	str	r2, [r3, #0]
	return *this;
 8015fc0:	687b      	ldr	r3, [r7, #4]
      }
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	3708      	adds	r7, #8
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}

08015fca <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8015fca:	b580      	push	{r7, lr}
 8015fcc:	b082      	sub	sp, #8
 8015fce:	af00      	add	r7, sp, #0
 8015fd0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f003 fb07 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8015fdc:	4602      	mov	r2, r0
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	601a      	str	r2, [r3, #0]
	return *this;
 8015fe2:	687b      	ldr	r3, [r7, #4]
      }
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3708      	adds	r7, #8
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8015fec:	b590      	push	{r4, r7, lr}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
 8015ff4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681c      	ldr	r4, [r3, #0]
 8015ffa:	6838      	ldr	r0, [r7, #0]
 8015ffc:	f7fe ffa7 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016000:	4603      	mov	r3, r0
 8016002:	4619      	mov	r1, r3
 8016004:	4620      	mov	r0, r4
 8016006:	f000 fbc7 	bl	8016798 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801600a:	4603      	mov	r3, r0
 801600c:	4618      	mov	r0, r3
 801600e:	370c      	adds	r7, #12
 8016010:	46bd      	mov	sp, r7
 8016012:	bd90      	pop	{r4, r7, pc}

08016014 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	4618      	mov	r0, r3
 8016020:	370c      	adds	r7, #12
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr

0801602a <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801602a:	b580      	push	{r7, lr}
 801602c:	b082      	sub	sp, #8
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	3310      	adds	r3, #16
 8016036:	4618      	mov	r0, r3
 8016038:	f000 fbc5 	bl	80167c6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 801603c:	4603      	mov	r3, r0
 801603e:	4618      	mov	r0, r3
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}

08016046 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8016046:	b580      	push	{r7, lr}
 8016048:	b082      	sub	sp, #8
 801604a:	af00      	add	r7, sp, #0
 801604c:	6078      	str	r0, [r7, #4]
 801604e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8016050:	6838      	ldr	r0, [r7, #0]
 8016052:	f000 fbc4 	bl	80167de <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 8016056:	bf00      	nop
 8016058:	3708      	adds	r7, #8
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}

0801605e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801605e:	b580      	push	{r7, lr}
 8016060:	b088      	sub	sp, #32
 8016062:	af00      	add	r7, sp, #0
 8016064:	60f8      	str	r0, [r7, #12]
 8016066:	60b9      	str	r1, [r7, #8]
 8016068:	607a      	str	r2, [r7, #4]
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	61fb      	str	r3, [r7, #28]
 801606e:	68bb      	ldr	r3, [r7, #8]
 8016070:	61bb      	str	r3, [r7, #24]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8016076:	f7f7 fec1 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 801607a:	4603      	mov	r3, r0
 801607c:	2b00      	cmp	r3, #0
 801607e:	d003      	beq.n	8016088 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8016080:	69b8      	ldr	r0, [r7, #24]
 8016082:	f003 fa49 	bl	8019518 <_ZdlPv>
	    return;
 8016086:	e005      	b.n	8016094 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8016088:	697a      	ldr	r2, [r7, #20]
 801608a:	69b9      	ldr	r1, [r7, #24]
 801608c:	69f8      	ldr	r0, [r7, #28]
 801608e:	f000 fdcc 	bl	8016c2a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8016092:	bf00      	nop
 8016094:	bf00      	nop
 8016096:	3720      	adds	r7, #32
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}

0801609c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>:
 801609c:	b480      	push	{r7}
 801609e:	b083      	sub	sp, #12
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	6078      	str	r0, [r7, #4]
 80160a4:	6039      	str	r1, [r7, #0]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	4618      	mov	r0, r3
 80160aa:	370c      	adds	r7, #12
 80160ac:	46bd      	mov	sp, r7
 80160ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b2:	4770      	bx	lr

080160b4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	f107 030c 	add.w	r3, r7, #12
 80160c4:	4611      	mov	r1, r2
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fe ffe0 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	4618      	mov	r0, r3
 80160d0:	3710      	adds	r7, #16
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}

080160d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80160d6:	b480      	push	{r7}
 80160d8:	b083      	sub	sp, #12
 80160da:	af00      	add	r7, sp, #0
 80160dc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3304      	adds	r3, #4
 80160e2:	4618      	mov	r0, r3
 80160e4:	370c      	adds	r7, #12
 80160e6:	46bd      	mov	sp, r7
 80160e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ec:	4770      	bx	lr

080160ee <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80160ee:	b480      	push	{r7}
 80160f0:	b083      	sub	sp, #12
 80160f2:	af00      	add	r7, sp, #0
 80160f4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	695b      	ldr	r3, [r3, #20]
 80160fa:	4618      	mov	r0, r3
 80160fc:	370c      	adds	r7, #12
 80160fe:	46bd      	mov	sp, r7
 8016100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016104:	4770      	bx	lr

08016106 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8016106:	b480      	push	{r7}
 8016108:	b083      	sub	sp, #12
 801610a:	af00      	add	r7, sp, #0
 801610c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	3310      	adds	r3, #16
 8016112:	4618      	mov	r0, r3
 8016114:	370c      	adds	r7, #12
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr

0801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 fb63 	bl	80167f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801612c:	4603      	mov	r3, r0
 801612e:	4618      	mov	r0, r3
 8016130:	3708      	adds	r7, #8
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016136:	b590      	push	{r4, r7, lr}
 8016138:	b08b      	sub	sp, #44	; 0x2c
 801613a:	af00      	add	r7, sp, #0
 801613c:	60f8      	str	r0, [r7, #12]
 801613e:	60b9      	str	r1, [r7, #8]
 8016140:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8016142:	68b8      	ldr	r0, [r7, #8]
 8016144:	f7fd fa2e 	bl	80135a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8016148:	4603      	mov	r3, r0
 801614a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801614c:	68b8      	ldr	r0, [r7, #8]
 801614e:	f7ff ffc2 	bl	80160d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8016152:	4603      	mov	r3, r0
 8016154:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8016156:	2301      	movs	r3, #1
 8016158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801615c:	69bb      	ldr	r3, [r7, #24]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d020      	beq.n	80161a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8016166:	68bc      	ldr	r4, [r7, #8]
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	4618      	mov	r0, r3
 801616c:	f000 fb41 	bl	80167f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8016170:	4603      	mov	r3, r0
 8016172:	461a      	mov	r2, r3
 8016174:	6879      	ldr	r1, [r7, #4]
 8016176:	4620      	mov	r0, r4
 8016178:	f7ff fbc6 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801617c:	4603      	mov	r3, r0
 801617e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8016182:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016186:	2b00      	cmp	r3, #0
 8016188:	d005      	beq.n	8016196 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 801618a:	69bb      	ldr	r3, [r7, #24]
 801618c:	4618      	mov	r0, r3
 801618e:	f7fd ff14 	bl	8013fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8016192:	4603      	mov	r3, r0
 8016194:	e004      	b.n	80161a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8016196:	69bb      	ldr	r3, [r7, #24]
 8016198:	4618      	mov	r0, r3
 801619a:	f7fd ff02 	bl	8013fa2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 801619e:	4603      	mov	r3, r0
 80161a0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80161a2:	e7db      	b.n	801615c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 80161a4:	697a      	ldr	r2, [r7, #20]
 80161a6:	f107 0310 	add.w	r3, r7, #16
 80161aa:	4611      	mov	r1, r2
 80161ac:	4618      	mov	r0, r3
 80161ae:	f7fe ff6d 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80161b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d01d      	beq.n	80161f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 80161ba:	68b8      	ldr	r0, [r7, #8]
 80161bc:	f000 fb2c 	bl	8016818 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 80161c0:	4603      	mov	r3, r0
 80161c2:	61fb      	str	r3, [r7, #28]
 80161c4:	f107 021c 	add.w	r2, r7, #28
 80161c8:	f107 0310 	add.w	r3, r7, #16
 80161cc:	4611      	mov	r1, r2
 80161ce:	4618      	mov	r0, r3
 80161d0:	f000 fb33 	bl	801683a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 80161d4:	4603      	mov	r3, r0
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d008      	beq.n	80161ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 80161da:	f107 0214 	add.w	r2, r7, #20
 80161de:	f107 0318 	add.w	r3, r7, #24
 80161e2:	4619      	mov	r1, r3
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f000 fb3c 	bl	8016862 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 80161ea:	e025      	b.n	8016238 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80161ec:	f107 0310 	add.w	r3, r7, #16
 80161f0:	4618      	mov	r0, r3
 80161f2:	f000 f831 	bl	8016258 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80161f6:	68bc      	ldr	r4, [r7, #8]
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7ff ff8f 	bl	801611e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016200:	4603      	mov	r3, r0
 8016202:	687a      	ldr	r2, [r7, #4]
 8016204:	4619      	mov	r1, r3
 8016206:	4620      	mov	r0, r4
 8016208:	f7ff fb7e 	bl	8015908 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d008      	beq.n	8016224 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8016212:	f107 0214 	add.w	r2, r7, #20
 8016216:	f107 0318 	add.w	r3, r7, #24
 801621a:	4619      	mov	r1, r3
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	f000 fb20 	bl	8016862 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8016222:	e009      	b.n	8016238 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8016224:	2300      	movs	r3, #0
 8016226:	623b      	str	r3, [r7, #32]
 8016228:	f107 0220 	add.w	r2, r7, #32
 801622c:	f107 0310 	add.w	r3, r7, #16
 8016230:	4619      	mov	r1, r3
 8016232:	68f8      	ldr	r0, [r7, #12]
 8016234:	f7fb f866 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	372c      	adds	r7, #44	; 0x2c
 801623c:	46bd      	mov	sp, r7
 801623e:	bd90      	pop	{r4, r7, pc}

08016240 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8016240:	b480      	push	{r7}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	330c      	adds	r3, #12
 801624c:	4618      	mov	r0, r3
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr

08016258 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8016258:	b580      	push	{r7, lr}
 801625a:	b082      	sub	sp, #8
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	4618      	mov	r0, r3
 8016266:	f003 f9c2 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801626a:	4602      	mov	r2, r0
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	601a      	str	r2, [r3, #0]
	return *this;
 8016270:	687b      	ldr	r3, [r7, #4]
      }
 8016272:	4618      	mov	r0, r3
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}

0801627a <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801627a:	b580      	push	{r7, lr}
 801627c:	b082      	sub	sp, #8
 801627e:	af00      	add	r7, sp, #0
 8016280:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4618      	mov	r0, r3
 8016288:	f003 f9af 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801628c:	4602      	mov	r2, r0
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	601a      	str	r2, [r3, #0]
	return *this;
 8016292:	687b      	ldr	r3, [r7, #4]
      }
 8016294:	4618      	mov	r0, r3
 8016296:	3708      	adds	r7, #8
 8016298:	46bd      	mov	sp, r7
 801629a:	bd80      	pop	{r7, pc}

0801629c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 801629c:	b590      	push	{r4, r7, lr}
 801629e:	b083      	sub	sp, #12
 80162a0:	af00      	add	r7, sp, #0
 80162a2:	6078      	str	r0, [r7, #4]
 80162a4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681c      	ldr	r4, [r3, #0]
 80162aa:	6838      	ldr	r0, [r7, #0]
 80162ac:	f7ff f82c 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80162b0:	4603      	mov	r3, r0
 80162b2:	4619      	mov	r1, r3
 80162b4:	4620      	mov	r0, r4
 80162b6:	f000 faed 	bl	8016894 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80162ba:	4603      	mov	r3, r0
 80162bc:	4618      	mov	r0, r3
 80162be:	370c      	adds	r7, #12
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd90      	pop	{r4, r7, pc}

080162c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80162c4:	b480      	push	{r7}
 80162c6:	b083      	sub	sp, #12
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	4618      	mov	r0, r3
 80162d0:	370c      	adds	r7, #12
 80162d2:	46bd      	mov	sp, r7
 80162d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d8:	4770      	bx	lr

080162da <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80162da:	b580      	push	{r7, lr}
 80162dc:	b082      	sub	sp, #8
 80162de:	af00      	add	r7, sp, #0
 80162e0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	3310      	adds	r3, #16
 80162e6:	4618      	mov	r0, r3
 80162e8:	f000 faeb 	bl	80168c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 80162ec:	4603      	mov	r3, r0
 80162ee:	4618      	mov	r0, r3
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bd80      	pop	{r7, pc}

080162f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b082      	sub	sp, #8
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	6078      	str	r0, [r7, #4]
 80162fe:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8016300:	6838      	ldr	r0, [r7, #0]
 8016302:	f000 faea 	bl	80168da <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 8016306:	bf00      	nop
 8016308:	3708      	adds	r7, #8
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}

0801630e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801630e:	b580      	push	{r7, lr}
 8016310:	b088      	sub	sp, #32
 8016312:	af00      	add	r7, sp, #0
 8016314:	60f8      	str	r0, [r7, #12]
 8016316:	60b9      	str	r1, [r7, #8]
 8016318:	607a      	str	r2, [r7, #4]
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	61fb      	str	r3, [r7, #28]
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	61bb      	str	r3, [r7, #24]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8016326:	f7f7 fd69 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	d003      	beq.n	8016338 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8016330:	69b8      	ldr	r0, [r7, #24]
 8016332:	f003 f8f1 	bl	8019518 <_ZdlPv>
	    return;
 8016336:	e005      	b.n	8016344 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8016338:	697a      	ldr	r2, [r7, #20]
 801633a:	69b9      	ldr	r1, [r7, #24]
 801633c:	69f8      	ldr	r0, [r7, #28]
 801633e:	f000 fcdb 	bl	8016cf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8016342:	bf00      	nop
 8016344:	bf00      	nop
 8016346:	3720      	adds	r7, #32
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>:
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
 8016354:	6039      	str	r1, [r7, #0]
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	4618      	mov	r0, r3
 801635a:	370c      	adds	r7, #12
 801635c:	46bd      	mov	sp, r7
 801635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016362:	4770      	bx	lr

08016364 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 8016364:	b590      	push	{r4, r7, lr}
 8016366:	b083      	sub	sp, #12
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681c      	ldr	r4, [r3, #0]
 8016372:	6838      	ldr	r0, [r7, #0]
 8016374:	f7ff f873 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016378:	4603      	mov	r3, r0
 801637a:	4619      	mov	r1, r3
 801637c:	4620      	mov	r0, r4
 801637e:	f000 fab6 	bl	80168ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8016382:	4603      	mov	r3, r0
 8016384:	4618      	mov	r0, r3
 8016386:	370c      	adds	r7, #12
 8016388:	46bd      	mov	sp, r7
 801638a:	bd90      	pop	{r4, r7, pc}

0801638c <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 801638c:	b480      	push	{r7}
 801638e:	b083      	sub	sp, #12
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]
    }
 8016394:	bf00      	nop
 8016396:	370c      	adds	r7, #12
 8016398:	46bd      	mov	sp, r7
 801639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639e:	4770      	bx	lr

080163a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f000 fab7 	bl	801691c <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 80163ae:	4602      	mov	r2, r0
 80163b0:	f107 030c 	add.w	r3, r7, #12
 80163b4:	4611      	mov	r1, r2
 80163b6:	4618      	mov	r0, r3
 80163b8:	f7fe f825 	bl	8014406 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 80163bc:	4603      	mov	r3, r0
      }
 80163be:	4618      	mov	r0, r3
 80163c0:	3710      	adds	r7, #16
 80163c2:	46bd      	mov	sp, r7
 80163c4:	bd80      	pop	{r7, pc}
	...

080163c8 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	683a      	ldr	r2, [r7, #0]
 80163d6:	4619      	mov	r1, r3
 80163d8:	4812      	ldr	r0, [pc, #72]	; (8016424 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 80163da:	f7ff f906 	bl	80155ea <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 80163de:	4603      	mov	r3, r0
 80163e0:	723b      	strb	r3, [r7, #8]
 80163e2:	f107 030c 	add.w	r3, r7, #12
 80163e6:	2100      	movs	r1, #0
 80163e8:	4618      	mov	r0, r3
 80163ea:	f7fb fff7 	bl	80123dc <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80163ee:	7b39      	ldrb	r1, [r7, #12]
 80163f0:	7a38      	ldrb	r0, [r7, #8]
 80163f2:	f7fb ffff 	bl	80123f4 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 80163f6:	4603      	mov	r3, r0
 80163f8:	f083 0301 	eor.w	r3, r3, #1
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d001      	beq.n	8016406 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 8016402:	7a3b      	ldrb	r3, [r7, #8]
 8016404:	e00a      	b.n	801641c <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	f103 0108 	add.w	r1, r3, #8
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	3308      	adds	r3, #8
 8016410:	461a      	mov	r2, r3
 8016412:	4804      	ldr	r0, [pc, #16]	; (8016424 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8016414:	f7ff f8e9 	bl	80155ea <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8016418:	4603      	mov	r3, r0
 801641a:	bf00      	nop
    }
 801641c:	4618      	mov	r0, r3
 801641e:	3710      	adds	r7, #16
 8016420:	46bd      	mov	sp, r7
 8016422:	bd80      	pop	{r7, pc}
 8016424:	08019ff4 	.word	0x08019ff4

08016428 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8016428:	b580      	push	{r7, lr}
 801642a:	b084      	sub	sp, #16
 801642c:	af00      	add	r7, sp, #0
 801642e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	68da      	ldr	r2, [r3, #12]
 8016434:	f107 030c 	add.w	r3, r7, #12
 8016438:	4611      	mov	r1, r2
 801643a:	4618      	mov	r0, r3
 801643c:	f7fd feb1 	bl	80141a2 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	4618      	mov	r0, r3
 8016444:	3710      	adds	r7, #16
 8016446:	46bd      	mov	sp, r7
 8016448:	bd80      	pop	{r7, pc}

0801644a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801644a:	b480      	push	{r7}
 801644c:	b083      	sub	sp, #12
 801644e:	af00      	add	r7, sp, #0
 8016450:	6078      	str	r0, [r7, #4]
 8016452:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	681a      	ldr	r2, [r3, #0]
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	429a      	cmp	r2, r3
 801645e:	bf0c      	ite	eq
 8016460:	2301      	moveq	r3, #1
 8016462:	2300      	movne	r3, #0
 8016464:	b2db      	uxtb	r3, r3
 8016466:	4618      	mov	r0, r3
 8016468:	370c      	adds	r7, #12
 801646a:	46bd      	mov	sp, r7
 801646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016470:	4770      	bx	lr

08016472 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8016472:	b580      	push	{r7, lr}
 8016474:	b084      	sub	sp, #16
 8016476:	af00      	add	r7, sp, #0
 8016478:	60f8      	str	r0, [r7, #12]
 801647a:	60b9      	str	r1, [r7, #8]
 801647c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801647e:	68b8      	ldr	r0, [r7, #8]
 8016480:	f000 fa5a 	bl	8016938 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>
 8016484:	4603      	mov	r3, r0
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	601a      	str	r2, [r3, #0]
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f7fb faf4 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8016492:	4603      	mov	r3, r0
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	605a      	str	r2, [r3, #4]
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	4618      	mov	r0, r3
 801649e:	3710      	adds	r7, #16
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}

080164a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f000 fa4d 	bl	801694e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 80164b4:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80164b6:	6838      	ldr	r0, [r7, #0]
 80164b8:	f7fd ffb1 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 80164bc:	4603      	mov	r3, r0
 80164be:	461a      	mov	r2, r3
 80164c0:	68f9      	ldr	r1, [r7, #12]
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f000 fa54 	bl	8016970 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80164c8:	68fb      	ldr	r3, [r7, #12]
	}
 80164ca:	4618      	mov	r0, r3
 80164cc:	3710      	adds	r7, #16
 80164ce:	46bd      	mov	sp, r7
 80164d0:	bd80      	pop	{r7, pc}

080164d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() noexcept
 80164d2:	b580      	push	{r7, lr}
 80164d4:	b082      	sub	sp, #8
 80164d6:	af00      	add	r7, sp, #0
 80164d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 fa68 	bl	80169b0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 80164e0:	4603      	mov	r3, r0
 80164e2:	4618      	mov	r0, r3
 80164e4:	3708      	adds	r7, #8
 80164e6:	46bd      	mov	sp, r7
 80164e8:	bd80      	pop	{r7, pc}

080164ea <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>:
    destroy_at(_Tp* __location)
 80164ea:	b480      	push	{r7}
 80164ec:	b083      	sub	sp, #12
 80164ee:	af00      	add	r7, sp, #0
 80164f0:	6078      	str	r0, [r7, #4]
    }
 80164f2:	bf00      	nop
 80164f4:	370c      	adds	r7, #12
 80164f6:	46bd      	mov	sp, r7
 80164f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fc:	4770      	bx	lr

080164fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 80164fe:	b580      	push	{r7, lr}
 8016500:	b084      	sub	sp, #16
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f000 fa6f 	bl	80169ea <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 801650c:	4602      	mov	r2, r0
 801650e:	f107 030c 	add.w	r3, r7, #12
 8016512:	4611      	mov	r1, r2
 8016514:	4618      	mov	r0, r3
 8016516:	f7fe f954 	bl	80147c2 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 801651a:	4603      	mov	r3, r0
      }
 801651c:	4618      	mov	r0, r3
 801651e:	3710      	adds	r7, #16
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8016524:	b580      	push	{r7, lr}
 8016526:	b084      	sub	sp, #16
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	68da      	ldr	r2, [r3, #12]
 8016530:	f107 030c 	add.w	r3, r7, #12
 8016534:	4611      	mov	r1, r2
 8016536:	4618      	mov	r0, r3
 8016538:	f7fe f811 	bl	801455e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	4618      	mov	r0, r3
 8016540:	3710      	adds	r7, #16
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}

08016546 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8016546:	b480      	push	{r7}
 8016548:	b083      	sub	sp, #12
 801654a:	af00      	add	r7, sp, #0
 801654c:	6078      	str	r0, [r7, #4]
 801654e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681a      	ldr	r2, [r3, #0]
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	429a      	cmp	r2, r3
 801655a:	bf0c      	ite	eq
 801655c:	2301      	moveq	r3, #1
 801655e:	2300      	movne	r3, #0
 8016560:	b2db      	uxtb	r3, r3
 8016562:	4618      	mov	r0, r3
 8016564:	370c      	adds	r7, #12
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr

0801656e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801656e:	b580      	push	{r7, lr}
 8016570:	b084      	sub	sp, #16
 8016572:	af00      	add	r7, sp, #0
 8016574:	60f8      	str	r0, [r7, #12]
 8016576:	60b9      	str	r1, [r7, #8]
 8016578:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801657a:	68b8      	ldr	r0, [r7, #8]
 801657c:	f000 fa43 	bl	8016a06 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8016580:	4603      	mov	r3, r0
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	601a      	str	r2, [r3, #0]
 8016588:	6878      	ldr	r0, [r7, #4]
 801658a:	f7fb fa76 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801658e:	4603      	mov	r3, r0
 8016590:	681a      	ldr	r2, [r3, #0]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	605a      	str	r2, [r3, #4]
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	4618      	mov	r0, r3
 801659a:	3710      	adds	r7, #16
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b084      	sub	sp, #16
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f000 fa36 	bl	8016a1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>
 80165b0:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80165b2:	6838      	ldr	r0, [r7, #0]
 80165b4:	f7fe f911 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80165b8:	4603      	mov	r3, r0
 80165ba:	461a      	mov	r2, r3
 80165bc:	68f9      	ldr	r1, [r7, #12]
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 fa3d 	bl	8016a3e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 80165c4:	68fb      	ldr	r3, [r7, #12]
	}
 80165c6:	4618      	mov	r0, r3
 80165c8:	3710      	adds	r7, #16
 80165ca:	46bd      	mov	sp, r7
 80165cc:	bd80      	pop	{r7, pc}

080165ce <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 80165ce:	b580      	push	{r7, lr}
 80165d0:	b082      	sub	sp, #8
 80165d2:	af00      	add	r7, sp, #0
 80165d4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 fa51 	bl	8016a7e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 80165dc:	4603      	mov	r3, r0
 80165de:	4618      	mov	r0, r3
 80165e0:	3708      	adds	r7, #8
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}

080165e6 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 80165e6:	b480      	push	{r7}
 80165e8:	b083      	sub	sp, #12
 80165ea:	af00      	add	r7, sp, #0
 80165ec:	6078      	str	r0, [r7, #4]
    }
 80165ee:	bf00      	nop
 80165f0:	370c      	adds	r7, #12
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr

080165fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 80165fa:	b580      	push	{r7, lr}
 80165fc:	b084      	sub	sp, #16
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8016602:	6878      	ldr	r0, [r7, #4]
 8016604:	f000 fa55 	bl	8016ab2 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8016608:	4602      	mov	r2, r0
 801660a:	f107 030c 	add.w	r3, r7, #12
 801660e:	4611      	mov	r1, r2
 8016610:	4618      	mov	r0, r3
 8016612:	f7fe fab3 	bl	8014b7c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8016616:	4603      	mov	r3, r0
      }
 8016618:	4618      	mov	r0, r3
 801661a:	3710      	adds	r7, #16
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8016620:	b580      	push	{r7, lr}
 8016622:	b084      	sub	sp, #16
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	68da      	ldr	r2, [r3, #12]
 801662c:	f107 030c 	add.w	r3, r7, #12
 8016630:	4611      	mov	r1, r2
 8016632:	4618      	mov	r0, r3
 8016634:	f7fe f970 	bl	8014918 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	4618      	mov	r0, r3
 801663c:	3710      	adds	r7, #16
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}

08016642 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8016642:	b480      	push	{r7}
 8016644:	b083      	sub	sp, #12
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
 801664a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	429a      	cmp	r2, r3
 8016656:	bf0c      	ite	eq
 8016658:	2301      	moveq	r3, #1
 801665a:	2300      	movne	r3, #0
 801665c:	b2db      	uxtb	r3, r3
 801665e:	4618      	mov	r0, r3
 8016660:	370c      	adds	r7, #12
 8016662:	46bd      	mov	sp, r7
 8016664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016668:	4770      	bx	lr

0801666a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801666a:	b580      	push	{r7, lr}
 801666c:	b084      	sub	sp, #16
 801666e:	af00      	add	r7, sp, #0
 8016670:	60f8      	str	r0, [r7, #12]
 8016672:	60b9      	str	r1, [r7, #8]
 8016674:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8016676:	68b8      	ldr	r0, [r7, #8]
 8016678:	f000 fa29 	bl	8016ace <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>
 801667c:	4603      	mov	r3, r0
 801667e:	681a      	ldr	r2, [r3, #0]
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	601a      	str	r2, [r3, #0]
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f7fb f9f8 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801668a:	4603      	mov	r3, r0
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	605a      	str	r2, [r3, #4]
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	4618      	mov	r0, r3
 8016696:	3710      	adds	r7, #16
 8016698:	46bd      	mov	sp, r7
 801669a:	bd80      	pop	{r7, pc}

0801669c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801669c:	b580      	push	{r7, lr}
 801669e:	b084      	sub	sp, #16
 80166a0:	af00      	add	r7, sp, #0
 80166a2:	6078      	str	r0, [r7, #4]
 80166a4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f000 fa1c 	bl	8016ae4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>
 80166ac:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80166ae:	6838      	ldr	r0, [r7, #0]
 80166b0:	f7fe fa70 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80166b4:	4603      	mov	r3, r0
 80166b6:	461a      	mov	r2, r3
 80166b8:	68f9      	ldr	r1, [r7, #12]
 80166ba:	6878      	ldr	r0, [r7, #4]
 80166bc:	f000 fa23 	bl	8016b06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80166c0:	68fb      	ldr	r3, [r7, #12]
	}
 80166c2:	4618      	mov	r0, r3
 80166c4:	3710      	adds	r7, #16
 80166c6:	46bd      	mov	sp, r7
 80166c8:	bd80      	pop	{r7, pc}

080166ca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 80166ca:	b580      	push	{r7, lr}
 80166cc:	b082      	sub	sp, #8
 80166ce:	af00      	add	r7, sp, #0
 80166d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80166d2:	6878      	ldr	r0, [r7, #4]
 80166d4:	f000 fa37 	bl	8016b46 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 80166d8:	4603      	mov	r3, r0
 80166da:	4618      	mov	r0, r3
 80166dc:	3708      	adds	r7, #8
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}

080166e2 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 80166e2:	b480      	push	{r7}
 80166e4:	b083      	sub	sp, #12
 80166e6:	af00      	add	r7, sp, #0
 80166e8:	6078      	str	r0, [r7, #4]
    }
 80166ea:	bf00      	nop
 80166ec:	370c      	adds	r7, #12
 80166ee:	46bd      	mov	sp, r7
 80166f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f4:	4770      	bx	lr

080166f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b084      	sub	sp, #16
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f000 fa3e 	bl	8016b80 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8016704:	4602      	mov	r2, r0
 8016706:	f107 030c 	add.w	r3, r7, #12
 801670a:	4611      	mov	r1, r2
 801670c:	4618      	mov	r0, r3
 801670e:	f7fe fc12 	bl	8014f36 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8016712:	4603      	mov	r3, r0
      }
 8016714:	4618      	mov	r0, r3
 8016716:	3710      	adds	r7, #16
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	68da      	ldr	r2, [r3, #12]
 8016728:	f107 030c 	add.w	r3, r7, #12
 801672c:	4611      	mov	r1, r2
 801672e:	4618      	mov	r0, r3
 8016730:	f7fe facf 	bl	8014cd2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	4618      	mov	r0, r3
 8016738:	3710      	adds	r7, #16
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801673e:	b480      	push	{r7}
 8016740:	b083      	sub	sp, #12
 8016742:	af00      	add	r7, sp, #0
 8016744:	6078      	str	r0, [r7, #4]
 8016746:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	429a      	cmp	r2, r3
 8016752:	bf0c      	ite	eq
 8016754:	2301      	moveq	r3, #1
 8016756:	2300      	movne	r3, #0
 8016758:	b2db      	uxtb	r3, r3
 801675a:	4618      	mov	r0, r3
 801675c:	370c      	adds	r7, #12
 801675e:	46bd      	mov	sp, r7
 8016760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016764:	4770      	bx	lr

08016766 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8016766:	b580      	push	{r7, lr}
 8016768:	b084      	sub	sp, #16
 801676a:	af00      	add	r7, sp, #0
 801676c:	60f8      	str	r0, [r7, #12]
 801676e:	60b9      	str	r1, [r7, #8]
 8016770:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8016772:	68b8      	ldr	r0, [r7, #8]
 8016774:	f000 fa12 	bl	8016b9c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8016778:	4603      	mov	r3, r0
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	601a      	str	r2, [r3, #0]
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7fb f97a 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8016786:	4603      	mov	r3, r0
 8016788:	681a      	ldr	r2, [r3, #0]
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	605a      	str	r2, [r3, #4]
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	4618      	mov	r0, r3
 8016792:	3710      	adds	r7, #16
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}

08016798 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8016798:	b580      	push	{r7, lr}
 801679a:	b084      	sub	sp, #16
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
 80167a0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80167a2:	6878      	ldr	r0, [r7, #4]
 80167a4:	f000 fa05 	bl	8016bb2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 80167a8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80167aa:	6838      	ldr	r0, [r7, #0]
 80167ac:	f7fe fbcf 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80167b0:	4603      	mov	r3, r0
 80167b2:	461a      	mov	r2, r3
 80167b4:	68f9      	ldr	r1, [r7, #12]
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 fa0c 	bl	8016bd4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80167bc:	68fb      	ldr	r3, [r7, #12]
	}
 80167be:	4618      	mov	r0, r3
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b082      	sub	sp, #8
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 fa20 	bl	8016c14 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 80167d4:	4603      	mov	r3, r0
 80167d6:	4618      	mov	r0, r3
 80167d8:	3708      	adds	r7, #8
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}

080167de <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 80167de:	b480      	push	{r7}
 80167e0:	b083      	sub	sp, #12
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
    }
 80167e6:	bf00      	nop
 80167e8:	370c      	adds	r7, #12
 80167ea:	46bd      	mov	sp, r7
 80167ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f0:	4770      	bx	lr

080167f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 80167f2:	b580      	push	{r7, lr}
 80167f4:	b084      	sub	sp, #16
 80167f6:	af00      	add	r7, sp, #0
 80167f8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f000 fa27 	bl	8016c4e <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8016800:	4602      	mov	r2, r0
 8016802:	f107 030c 	add.w	r3, r7, #12
 8016806:	4611      	mov	r1, r2
 8016808:	4618      	mov	r0, r3
 801680a:	f7fe fd71 	bl	80152f0 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 801680e:	4603      	mov	r3, r0
      }
 8016810:	4618      	mov	r0, r3
 8016812:	3710      	adds	r7, #16
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}

08016818 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8016818:	b580      	push	{r7, lr}
 801681a:	b084      	sub	sp, #16
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	68da      	ldr	r2, [r3, #12]
 8016824:	f107 030c 	add.w	r3, r7, #12
 8016828:	4611      	mov	r1, r2
 801682a:	4618      	mov	r0, r3
 801682c:	f7fe fc2e 	bl	801508c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	4618      	mov	r0, r3
 8016834:	3710      	adds	r7, #16
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}

0801683a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801683a:	b480      	push	{r7}
 801683c:	b083      	sub	sp, #12
 801683e:	af00      	add	r7, sp, #0
 8016840:	6078      	str	r0, [r7, #4]
 8016842:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681a      	ldr	r2, [r3, #0]
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	429a      	cmp	r2, r3
 801684e:	bf0c      	ite	eq
 8016850:	2301      	moveq	r3, #1
 8016852:	2300      	movne	r3, #0
 8016854:	b2db      	uxtb	r3, r3
 8016856:	4618      	mov	r0, r3
 8016858:	370c      	adds	r7, #12
 801685a:	46bd      	mov	sp, r7
 801685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016860:	4770      	bx	lr

08016862 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8016862:	b580      	push	{r7, lr}
 8016864:	b084      	sub	sp, #16
 8016866:	af00      	add	r7, sp, #0
 8016868:	60f8      	str	r0, [r7, #12]
 801686a:	60b9      	str	r1, [r7, #8]
 801686c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801686e:	68b8      	ldr	r0, [r7, #8]
 8016870:	f000 f9fb 	bl	8016c6a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8016874:	4603      	mov	r3, r0
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	601a      	str	r2, [r3, #0]
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f7fb f8fc 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8016882:	4603      	mov	r3, r0
 8016884:	681a      	ldr	r2, [r3, #0]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	605a      	str	r2, [r3, #4]
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	4618      	mov	r0, r3
 801688e:	3710      	adds	r7, #16
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 f9ee 	bl	8016c80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 80168a4:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80168a6:	6838      	ldr	r0, [r7, #0]
 80168a8:	f7fe fd2e 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80168ac:	4603      	mov	r3, r0
 80168ae:	461a      	mov	r2, r3
 80168b0:	68f9      	ldr	r1, [r7, #12]
 80168b2:	6878      	ldr	r0, [r7, #4]
 80168b4:	f000 f9f5 	bl	8016ca2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80168b8:	68fb      	ldr	r3, [r7, #12]
	}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3710      	adds	r7, #16
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}

080168c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80168c2:	b580      	push	{r7, lr}
 80168c4:	b082      	sub	sp, #8
 80168c6:	af00      	add	r7, sp, #0
 80168c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 fa09 	bl	8016ce2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 80168d0:	4603      	mov	r3, r0
 80168d2:	4618      	mov	r0, r3
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 80168da:	b480      	push	{r7}
 80168dc:	b083      	sub	sp, #12
 80168de:	af00      	add	r7, sp, #0
 80168e0:	6078      	str	r0, [r7, #4]
    }
 80168e2:	bf00      	nop
 80168e4:	370c      	adds	r7, #12
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80168ee:	b580      	push	{r7, lr}
 80168f0:	b084      	sub	sp, #16
 80168f2:	af00      	add	r7, sp, #0
 80168f4:	6078      	str	r0, [r7, #4]
 80168f6:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80168f8:	6878      	ldr	r0, [r7, #4]
 80168fa:	f7fa fbbf 	bl	801107c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 80168fe:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8016900:	6838      	ldr	r0, [r7, #0]
 8016902:	f7fe fdac 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016906:	4603      	mov	r3, r0
 8016908:	461a      	mov	r2, r3
 801690a:	68f9      	ldr	r1, [r7, #12]
 801690c:	6878      	ldr	r0, [r7, #4]
 801690e:	f000 fa05 	bl	8016d1c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8016912:	68fb      	ldr	r3, [r7, #12]
	}
 8016914:	4618      	mov	r0, r3
 8016916:	3710      	adds	r7, #16
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr() const
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	3310      	adds	r3, #16
 8016928:	4618      	mov	r0, r3
 801692a:	f000 fa17 	bl	8016d5c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 801692e:	4603      	mov	r3, r0
 8016930:	4618      	mov	r0, r3
 8016932:	3708      	adds	r7, #8
 8016934:	46bd      	mov	sp, r7
 8016936:	bd80      	pop	{r7, pc}

08016938 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016938:	b480      	push	{r7}
 801693a:	b083      	sub	sp, #12
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	4618      	mov	r0, r3
 8016944:	370c      	adds	r7, #12
 8016946:	46bd      	mov	sp, r7
 8016948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801694c:	4770      	bx	lr

0801694e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 801694e:	b580      	push	{r7, lr}
 8016950:	b082      	sub	sp, #8
 8016952:	af00      	add	r7, sp, #0
 8016954:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8016956:	6878      	ldr	r0, [r7, #4]
 8016958:	f7fe ff45 	bl	80157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 801695c:	4603      	mov	r3, r0
 801695e:	2101      	movs	r1, #1
 8016960:	4618      	mov	r0, r3
 8016962:	f000 fa07 	bl	8016d74 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>
 8016966:	4603      	mov	r3, r0
 8016968:	4618      	mov	r0, r3
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016970:	b5b0      	push	{r4, r5, r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af00      	add	r7, sp, #0
 8016976:	60f8      	str	r0, [r7, #12]
 8016978:	60b9      	str	r1, [r7, #8]
 801697a:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	4619      	mov	r1, r3
 8016980:	2024      	movs	r0, #36	; 0x24
 8016982:	f7ea fe21 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	f7fe ff2d 	bl	80157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 801698c:	4604      	mov	r4, r0
 801698e:	68b8      	ldr	r0, [r7, #8]
 8016990:	f7fe ff34 	bl	80157fc <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8016994:	4605      	mov	r5, r0
 8016996:	6878      	ldr	r0, [r7, #4]
 8016998:	f7fd fd41 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 801699c:	4603      	mov	r3, r0
 801699e:	461a      	mov	r2, r3
 80169a0:	4629      	mov	r1, r5
 80169a2:	4620      	mov	r0, r4
 80169a4:	f000 fa22 	bl	8016dec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 80169a8:	bf00      	nop
 80169aa:	3710      	adds	r7, #16
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bdb0      	pop	{r4, r5, r7, pc}

080169b0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() noexcept
 80169b0:	b480      	push	{r7}
 80169b2:	b083      	sub	sp, #12
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	4618      	mov	r0, r3
 80169bc:	370c      	adds	r7, #12
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr

080169c6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80169c6:	b580      	push	{r7, lr}
 80169c8:	b084      	sub	sp, #16
 80169ca:	af00      	add	r7, sp, #0
 80169cc:	60f8      	str	r0, [r7, #12]
 80169ce:	60b9      	str	r1, [r7, #8]
 80169d0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	4613      	mov	r3, r2
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	4413      	add	r3, r2
 80169da:	009b      	lsls	r3, r3, #2
 80169dc:	4619      	mov	r1, r3
 80169de:	68b8      	ldr	r0, [r7, #8]
 80169e0:	f002 fd9c 	bl	801951c <_ZdlPvj>
      }
 80169e4:	3710      	adds	r7, #16
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}

080169ea <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 80169ea:	b580      	push	{r7, lr}
 80169ec:	b082      	sub	sp, #8
 80169ee:	af00      	add	r7, sp, #0
 80169f0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	3310      	adds	r3, #16
 80169f6:	4618      	mov	r0, r3
 80169f8:	f000 fa0a 	bl	8016e10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 80169fc:	4603      	mov	r3, r0
 80169fe:	4618      	mov	r0, r3
 8016a00:	3708      	adds	r7, #8
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}

08016a06 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016a06:	b480      	push	{r7}
 8016a08:	b083      	sub	sp, #12
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	4618      	mov	r0, r3
 8016a12:	370c      	adds	r7, #12
 8016a14:	46bd      	mov	sp, r7
 8016a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1a:	4770      	bx	lr

08016a1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b082      	sub	sp, #8
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f7ff f845 	bl	8015ab4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2101      	movs	r1, #1
 8016a2e:	4618      	mov	r0, r3
 8016a30:	f000 f9fa 	bl	8016e28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>
 8016a34:	4603      	mov	r3, r0
 8016a36:	4618      	mov	r0, r3
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}

08016a3e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016a3e:	b5b0      	push	{r4, r5, r7, lr}
 8016a40:	b084      	sub	sp, #16
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	60f8      	str	r0, [r7, #12]
 8016a46:	60b9      	str	r1, [r7, #8]
 8016a48:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	4619      	mov	r1, r3
 8016a4e:	2020      	movs	r0, #32
 8016a50:	f7ea fdba 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f7ff f82d 	bl	8015ab4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	68b8      	ldr	r0, [r7, #8]
 8016a5e:	f7ff f834 	bl	8015aca <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8016a62:	4605      	mov	r5, r0
 8016a64:	6878      	ldr	r0, [r7, #4]
 8016a66:	f7fd feb8 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	4629      	mov	r1, r5
 8016a70:	4620      	mov	r0, r4
 8016a72:	f000 fa12 	bl	8016e9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8016a76:	bf00      	nop
 8016a78:	3710      	adds	r7, #16
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bdb0      	pop	{r4, r5, r7, pc}

08016a7e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 8016a7e:	b480      	push	{r7}
 8016a80:	b083      	sub	sp, #12
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	4618      	mov	r0, r3
 8016a8a:	370c      	adds	r7, #12
 8016a8c:	46bd      	mov	sp, r7
 8016a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a92:	4770      	bx	lr

08016a94 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	60b9      	str	r1, [r7, #8]
 8016a9e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	015b      	lsls	r3, r3, #5
 8016aa4:	4619      	mov	r1, r3
 8016aa6:	68b8      	ldr	r0, [r7, #8]
 8016aa8:	f002 fd38 	bl	801951c <_ZdlPvj>
      }
 8016aac:	3710      	adds	r7, #16
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b082      	sub	sp, #8
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	3310      	adds	r3, #16
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f000 f9fd 	bl	8016ebe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 8016ac4:	4603      	mov	r3, r0
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}

08016ace <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016ace:	b480      	push	{r7}
 8016ad0:	b083      	sub	sp, #12
 8016ad2:	af00      	add	r7, sp, #0
 8016ad4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	4618      	mov	r0, r3
 8016ada:	370c      	adds	r7, #12
 8016adc:	46bd      	mov	sp, r7
 8016ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae2:	4770      	bx	lr

08016ae4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f7ff f939 	bl	8015d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016af2:	4603      	mov	r3, r0
 8016af4:	2101      	movs	r1, #1
 8016af6:	4618      	mov	r0, r3
 8016af8:	f000 f9ed 	bl	8016ed6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>
 8016afc:	4603      	mov	r3, r0
 8016afe:	4618      	mov	r0, r3
 8016b00:	3708      	adds	r7, #8
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}

08016b06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016b06:	b5b0      	push	{r4, r5, r7, lr}
 8016b08:	b084      	sub	sp, #16
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	60f8      	str	r0, [r7, #12]
 8016b0e:	60b9      	str	r1, [r7, #8]
 8016b10:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	4619      	mov	r1, r3
 8016b16:	2028      	movs	r0, #40	; 0x28
 8016b18:	f7ea fd56 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	f7ff f921 	bl	8015d64 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016b22:	4604      	mov	r4, r0
 8016b24:	68b8      	ldr	r0, [r7, #8]
 8016b26:	f7ff f928 	bl	8015d7a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f7fe f831 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016b32:	4603      	mov	r3, r0
 8016b34:	461a      	mov	r2, r3
 8016b36:	4629      	mov	r1, r5
 8016b38:	4620      	mov	r0, r4
 8016b3a:	f000 fa0a 	bl	8016f52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8016b3e:	bf00      	nop
 8016b40:	3710      	adds	r7, #16
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bdb0      	pop	{r4, r5, r7, pc}

08016b46 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 8016b46:	b480      	push	{r7}
 8016b48:	b083      	sub	sp, #12
 8016b4a:	af00      	add	r7, sp, #0
 8016b4c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	4618      	mov	r0, r3
 8016b52:	370c      	adds	r7, #12
 8016b54:	46bd      	mov	sp, r7
 8016b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5a:	4770      	bx	lr

08016b5c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	009b      	lsls	r3, r3, #2
 8016b6e:	4413      	add	r3, r2
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	4619      	mov	r1, r3
 8016b74:	68b8      	ldr	r0, [r7, #8]
 8016b76:	f002 fcd1 	bl	801951c <_ZdlPvj>
      }
 8016b7a:	3710      	adds	r7, #16
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b082      	sub	sp, #8
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	3310      	adds	r3, #16
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f000 f9f2 	bl	8016f76 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 8016b92:	4603      	mov	r3, r0
 8016b94:	4618      	mov	r0, r3
 8016b96:	3708      	adds	r7, #8
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}

08016b9c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016b9c:	b480      	push	{r7}
 8016b9e:	b083      	sub	sp, #12
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	370c      	adds	r7, #12
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr

08016bb2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b082      	sub	sp, #8
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8016bba:	6878      	ldr	r0, [r7, #4]
 8016bbc:	f7ff fa2a 	bl	8016014 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016bc0:	4603      	mov	r3, r0
 8016bc2:	2101      	movs	r1, #1
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f000 f9e2 	bl	8016f8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	4618      	mov	r0, r3
 8016bce:	3708      	adds	r7, #8
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	bd80      	pop	{r7, pc}

08016bd4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016bd4:	b5b0      	push	{r4, r5, r7, lr}
 8016bd6:	b084      	sub	sp, #16
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	60b9      	str	r1, [r7, #8]
 8016bde:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	4619      	mov	r1, r3
 8016be4:	2038      	movs	r0, #56	; 0x38
 8016be6:	f7ea fcef 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	f7ff fa12 	bl	8016014 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	68b8      	ldr	r0, [r7, #8]
 8016bf4:	f7ff fa19 	bl	801602a <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f7fe f9a7 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016c00:	4603      	mov	r3, r0
 8016c02:	461a      	mov	r2, r3
 8016c04:	4629      	mov	r1, r5
 8016c06:	4620      	mov	r0, r4
 8016c08:	f000 fa01 	bl	801700e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8016c0c:	bf00      	nop
 8016c0e:	3710      	adds	r7, #16
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bdb0      	pop	{r4, r5, r7, pc}

08016c14 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8016c14:	b480      	push	{r7}
 8016c16:	b083      	sub	sp, #12
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	4618      	mov	r0, r3
 8016c20:	370c      	adds	r7, #12
 8016c22:	46bd      	mov	sp, r7
 8016c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c28:	4770      	bx	lr

08016c2a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b084      	sub	sp, #16
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	60f8      	str	r0, [r7, #12]
 8016c32:	60b9      	str	r1, [r7, #8]
 8016c34:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8016c36:	687a      	ldr	r2, [r7, #4]
 8016c38:	4613      	mov	r3, r2
 8016c3a:	00db      	lsls	r3, r3, #3
 8016c3c:	1a9b      	subs	r3, r3, r2
 8016c3e:	00db      	lsls	r3, r3, #3
 8016c40:	4619      	mov	r1, r3
 8016c42:	68b8      	ldr	r0, [r7, #8]
 8016c44:	f002 fc6a 	bl	801951c <_ZdlPvj>
      }
 8016c48:	3710      	adds	r7, #16
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}

08016c4e <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8016c4e:	b580      	push	{r7, lr}
 8016c50:	b082      	sub	sp, #8
 8016c52:	af00      	add	r7, sp, #0
 8016c54:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	3310      	adds	r3, #16
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f000 f9e9 	bl	8017032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8016c60:	4603      	mov	r3, r0
 8016c62:	4618      	mov	r0, r3
 8016c64:	3708      	adds	r7, #8
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}

08016c6a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016c6a:	b480      	push	{r7}
 8016c6c:	b083      	sub	sp, #12
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	4618      	mov	r0, r3
 8016c76:	370c      	adds	r7, #12
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7e:	4770      	bx	lr

08016c80 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8016c88:	6878      	ldr	r0, [r7, #4]
 8016c8a:	f7ff fb1b 	bl	80162c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016c8e:	4603      	mov	r3, r0
 8016c90:	2101      	movs	r1, #1
 8016c92:	4618      	mov	r0, r3
 8016c94:	f000 f9d9 	bl	801704a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	3708      	adds	r7, #8
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	bd80      	pop	{r7, pc}

08016ca2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016ca2:	b5b0      	push	{r4, r5, r7, lr}
 8016ca4:	b084      	sub	sp, #16
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	60f8      	str	r0, [r7, #12]
 8016caa:	60b9      	str	r1, [r7, #8]
 8016cac:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8016cae:	68bb      	ldr	r3, [r7, #8]
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	2024      	movs	r0, #36	; 0x24
 8016cb4:	f7ea fc88 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f7ff fb03 	bl	80162c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016cbe:	4604      	mov	r4, r0
 8016cc0:	68b8      	ldr	r0, [r7, #8]
 8016cc2:	f7ff fb0a 	bl	80162da <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	6878      	ldr	r0, [r7, #4]
 8016cca:	f7fe fb1d 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	461a      	mov	r2, r3
 8016cd2:	4629      	mov	r1, r5
 8016cd4:	4620      	mov	r0, r4
 8016cd6:	f000 f9f4 	bl	80170c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8016cda:	bf00      	nop
 8016cdc:	3710      	adds	r7, #16
 8016cde:	46bd      	mov	sp, r7
 8016ce0:	bdb0      	pop	{r4, r5, r7, pc}

08016ce2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8016ce2:	b480      	push	{r7}
 8016ce4:	b083      	sub	sp, #12
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	4618      	mov	r0, r3
 8016cee:	370c      	adds	r7, #12
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf6:	4770      	bx	lr

08016cf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8016d04:	687a      	ldr	r2, [r7, #4]
 8016d06:	4613      	mov	r3, r2
 8016d08:	00db      	lsls	r3, r3, #3
 8016d0a:	4413      	add	r3, r2
 8016d0c:	009b      	lsls	r3, r3, #2
 8016d0e:	4619      	mov	r1, r3
 8016d10:	68b8      	ldr	r0, [r7, #8]
 8016d12:	f002 fc03 	bl	801951c <_ZdlPvj>
      }
 8016d16:	3710      	adds	r7, #16
 8016d18:	46bd      	mov	sp, r7
 8016d1a:	bd80      	pop	{r7, pc}

08016d1c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8016d1c:	b5b0      	push	{r4, r5, r7, lr}
 8016d1e:	b084      	sub	sp, #16
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	4619      	mov	r1, r3
 8016d2c:	202c      	movs	r0, #44	; 0x2c
 8016d2e:	f7ea fc4b 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8016d32:	68f8      	ldr	r0, [r7, #12]
 8016d34:	f7fa fe1e 	bl	8011974 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8016d38:	4604      	mov	r4, r0
 8016d3a:	68b8      	ldr	r0, [r7, #8]
 8016d3c:	f7f9 f971 	bl	8010022 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8016d40:	4605      	mov	r5, r0
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f7fe fb8b 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	4629      	mov	r1, r5
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f000 f9e1 	bl	8017116 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8016d54:	bf00      	nop
 8016d56:	3710      	adds	r7, #16
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bdb0      	pop	{r4, r5, r7, pc}

08016d5c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b082      	sub	sp, #8
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f000 f9e8 	bl	801713a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3708      	adds	r7, #8
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
 8016d7c:	6039      	str	r1, [r7, #0]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	60fb      	str	r3, [r7, #12]
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8016d86:	f7f7 f839 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d009      	beq.n	8016da4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016d90:	68ba      	ldr	r2, [r7, #8]
 8016d92:	4613      	mov	r3, r2
 8016d94:	00db      	lsls	r3, r3, #3
 8016d96:	4413      	add	r3, r2
 8016d98:	009b      	lsls	r3, r3, #2
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f002 fbc0 	bl	8019520 <_Znwj>
 8016da0:	4603      	mov	r3, r0
 8016da2:	e006      	b.n	8016db2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8016da4:	2200      	movs	r2, #0
 8016da6:	68b9      	ldr	r1, [r7, #8]
 8016da8:	68f8      	ldr	r0, [r7, #12]
 8016daa:	f000 f9fd 	bl	80171a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>
 8016dae:	4603      	mov	r3, r0
 8016db0:	bf00      	nop
      { return __a.allocate(__n); }
 8016db2:	4618      	mov	r0, r3
 8016db4:	3710      	adds	r7, #16
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8016dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dbc:	b083      	sub	sp, #12
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8016dc4:	6838      	ldr	r0, [r7, #0]
 8016dc6:	f7fd fb2a 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8016dca:	4605      	mov	r5, r0
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4619      	mov	r1, r3
 8016dd0:	2014      	movs	r0, #20
 8016dd2:	f7ea fbf9 	bl	80015c8 <_ZnwjPv>
 8016dd6:	4606      	mov	r6, r0
 8016dd8:	4634      	mov	r4, r6
 8016dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016dde:	682b      	ldr	r3, [r5, #0]
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	4633      	mov	r3, r6
 8016de4:	4618      	mov	r0, r3
 8016de6:	370c      	adds	r7, #12
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	60f8      	str	r0, [r7, #12]
 8016df4:	60b9      	str	r1, [r7, #8]
 8016df6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8016df8:	6878      	ldr	r0, [r7, #4]
 8016dfa:	f7fd fb10 	bl	801441e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	4619      	mov	r1, r3
 8016e02:	68b8      	ldr	r0, [r7, #8]
 8016e04:	f7ff ffd9 	bl	8016dba <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 8016e08:	bf00      	nop
 8016e0a:	3710      	adds	r7, #16
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b082      	sub	sp, #8
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8016e18:	6878      	ldr	r0, [r7, #4]
 8016e1a:	f000 f999 	bl	8017150 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	4618      	mov	r0, r3
 8016e22:	3708      	adds	r7, #8
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}

08016e28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b084      	sub	sp, #16
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
 8016e30:	6039      	str	r1, [r7, #0]
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	60fb      	str	r3, [r7, #12]
 8016e36:	683b      	ldr	r3, [r7, #0]
 8016e38:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8016e3a:	f7f6 ffdf 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d006      	beq.n	8016e52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	015b      	lsls	r3, r3, #5
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f002 fb69 	bl	8019520 <_Znwj>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	e006      	b.n	8016e60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8016e52:	2200      	movs	r2, #0
 8016e54:	68b9      	ldr	r1, [r7, #8]
 8016e56:	68f8      	ldr	r0, [r7, #12]
 8016e58:	f000 f9c8 	bl	80171ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	bf00      	nop
      { return __a.allocate(__n); }
 8016e60:	4618      	mov	r0, r3
 8016e62:	3710      	adds	r7, #16
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}

08016e68 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8016e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e6a:	b083      	sub	sp, #12
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8016e72:	6838      	ldr	r0, [r7, #0]
 8016e74:	f7fd fcb1 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016e78:	4606      	mov	r6, r0
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	4619      	mov	r1, r3
 8016e7e:	2010      	movs	r0, #16
 8016e80:	f7ea fba2 	bl	80015c8 <_ZnwjPv>
 8016e84:	4605      	mov	r5, r0
 8016e86:	462c      	mov	r4, r5
 8016e88:	4633      	mov	r3, r6
 8016e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016e90:	462b      	mov	r3, r5
 8016e92:	4618      	mov	r0, r3
 8016e94:	370c      	adds	r7, #12
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e9a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8016e9a:	b580      	push	{r7, lr}
 8016e9c:	b084      	sub	sp, #16
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	60f8      	str	r0, [r7, #12]
 8016ea2:	60b9      	str	r1, [r7, #8]
 8016ea4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f7fd fc97 	bl	80147da <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016eac:	4603      	mov	r3, r0
 8016eae:	4619      	mov	r1, r3
 8016eb0:	68b8      	ldr	r0, [r7, #8]
 8016eb2:	f7ff ffd9 	bl	8016e68 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 8016eb6:	bf00      	nop
 8016eb8:	3710      	adds	r7, #16
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}

08016ebe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8016ebe:	b580      	push	{r7, lr}
 8016ec0:	b082      	sub	sp, #8
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f000 f94d 	bl	8017166 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 8016ecc:	4603      	mov	r3, r0
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3708      	adds	r7, #8
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}

08016ed6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8016ed6:	b580      	push	{r7, lr}
 8016ed8:	b084      	sub	sp, #16
 8016eda:	af00      	add	r7, sp, #0
 8016edc:	6078      	str	r0, [r7, #4]
 8016ede:	6039      	str	r1, [r7, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	60fb      	str	r3, [r7, #12]
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8016ee8:	f7f6 ff88 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8016eec:	4603      	mov	r3, r0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d009      	beq.n	8016f06 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016ef2:	68ba      	ldr	r2, [r7, #8]
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	009b      	lsls	r3, r3, #2
 8016ef8:	4413      	add	r3, r2
 8016efa:	00db      	lsls	r3, r3, #3
 8016efc:	4618      	mov	r0, r3
 8016efe:	f002 fb0f 	bl	8019520 <_Znwj>
 8016f02:	4603      	mov	r3, r0
 8016f04:	e006      	b.n	8016f14 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8016f06:	2200      	movs	r2, #0
 8016f08:	68b9      	ldr	r1, [r7, #8]
 8016f0a:	68f8      	ldr	r0, [r7, #12]
 8016f0c:	f000 f98d 	bl	801722a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>
 8016f10:	4603      	mov	r3, r0
 8016f12:	bf00      	nop
      { return __a.allocate(__n); }
 8016f14:	4618      	mov	r0, r3
 8016f16:	3710      	adds	r7, #16
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}

08016f1c <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8016f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f1e:	b083      	sub	sp, #12
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8016f26:	6838      	ldr	r0, [r7, #0]
 8016f28:	f7fd fe34 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016f2c:	4605      	mov	r5, r0
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	4619      	mov	r1, r3
 8016f32:	2018      	movs	r0, #24
 8016f34:	f7ea fb48 	bl	80015c8 <_ZnwjPv>
 8016f38:	4606      	mov	r6, r0
 8016f3a:	4634      	mov	r4, r6
 8016f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016f44:	e884 0003 	stmia.w	r4, {r0, r1}
 8016f48:	4633      	mov	r3, r6
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	370c      	adds	r7, #12
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f52 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b084      	sub	sp, #16
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	60f8      	str	r0, [r7, #12]
 8016f5a:	60b9      	str	r1, [r7, #8]
 8016f5c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7fd fe18 	bl	8014b94 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016f64:	4603      	mov	r3, r0
 8016f66:	4619      	mov	r1, r3
 8016f68:	68b8      	ldr	r0, [r7, #8]
 8016f6a:	f7ff ffd7 	bl	8016f1c <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8016f6e:	bf00      	nop
 8016f70:	3710      	adds	r7, #16
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}

08016f76 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8016f76:	b580      	push	{r7, lr}
 8016f78:	b082      	sub	sp, #8
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 f8fc 	bl	801717c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8016f84:	4603      	mov	r3, r0
 8016f86:	4618      	mov	r0, r3
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b084      	sub	sp, #16
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	6078      	str	r0, [r7, #4]
 8016f96:	6039      	str	r1, [r7, #0]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	60fb      	str	r3, [r7, #12]
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8016fa0:	f7f6 ff2c 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d009      	beq.n	8016fbe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8016faa:	68ba      	ldr	r2, [r7, #8]
 8016fac:	4613      	mov	r3, r2
 8016fae:	00db      	lsls	r3, r3, #3
 8016fb0:	1a9b      	subs	r3, r3, r2
 8016fb2:	00db      	lsls	r3, r3, #3
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	f002 fab3 	bl	8019520 <_Znwj>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	e006      	b.n	8016fcc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	68b9      	ldr	r1, [r7, #8]
 8016fc2:	68f8      	ldr	r0, [r7, #12]
 8016fc4:	f000 f953 	bl	801726e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	bf00      	nop
      { return __a.allocate(__n); }
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3710      	adds	r7, #16
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8016fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fd6:	b083      	sub	sp, #12
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
 8016fdc:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8016fde:	6838      	ldr	r0, [r7, #0]
 8016fe0:	f7fd ffb5 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016fe4:	4605      	mov	r5, r0
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	4619      	mov	r1, r3
 8016fea:	2028      	movs	r0, #40	; 0x28
 8016fec:	f7ea faec 	bl	80015c8 <_ZnwjPv>
 8016ff0:	4606      	mov	r6, r0
 8016ff2:	4634      	mov	r4, r6
 8016ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ffc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017000:	e884 0003 	stmia.w	r4, {r0, r1}
 8017004:	4633      	mov	r3, r6
 8017006:	4618      	mov	r0, r3
 8017008:	370c      	adds	r7, #12
 801700a:	46bd      	mov	sp, r7
 801700c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801700e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801700e:	b580      	push	{r7, lr}
 8017010:	b084      	sub	sp, #16
 8017012:	af00      	add	r7, sp, #0
 8017014:	60f8      	str	r0, [r7, #12]
 8017016:	60b9      	str	r1, [r7, #8]
 8017018:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f7fd ff97 	bl	8014f4e <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017020:	4603      	mov	r3, r0
 8017022:	4619      	mov	r1, r3
 8017024:	68b8      	ldr	r0, [r7, #8]
 8017026:	f7ff ffd5 	bl	8016fd4 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 801702a:	bf00      	nop
 801702c:	3710      	adds	r7, #16
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}

08017032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8017032:	b580      	push	{r7, lr}
 8017034:	b082      	sub	sp, #8
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f000 f8a9 	bl	8017192 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8017040:	4603      	mov	r3, r0
 8017042:	4618      	mov	r0, r3
 8017044:	3708      	adds	r7, #8
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}

0801704a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 801704a:	b580      	push	{r7, lr}
 801704c:	b084      	sub	sp, #16
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]
 8017052:	6039      	str	r1, [r7, #0]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	60fb      	str	r3, [r7, #12]
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801705c:	f7f6 fece 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d009      	beq.n	801707a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017066:	68ba      	ldr	r2, [r7, #8]
 8017068:	4613      	mov	r3, r2
 801706a:	00db      	lsls	r3, r3, #3
 801706c:	4413      	add	r3, r2
 801706e:	009b      	lsls	r3, r3, #2
 8017070:	4618      	mov	r0, r3
 8017072:	f002 fa55 	bl	8019520 <_Znwj>
 8017076:	4603      	mov	r3, r0
 8017078:	e006      	b.n	8017088 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801707a:	2200      	movs	r2, #0
 801707c:	68b9      	ldr	r1, [r7, #8]
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	f000 f917 	bl	80172b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 8017084:	4603      	mov	r3, r0
 8017086:	bf00      	nop
      { return __a.allocate(__n); }
 8017088:	4618      	mov	r0, r3
 801708a:	3710      	adds	r7, #16
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}

08017090 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8017090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017092:	b083      	sub	sp, #12
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
 8017098:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801709a:	6838      	ldr	r0, [r7, #0]
 801709c:	f7fe f934 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80170a0:	4605      	mov	r5, r0
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	4619      	mov	r1, r3
 80170a6:	2014      	movs	r0, #20
 80170a8:	f7ea fa8e 	bl	80015c8 <_ZnwjPv>
 80170ac:	4606      	mov	r6, r0
 80170ae:	4634      	mov	r4, r6
 80170b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80170b4:	682b      	ldr	r3, [r5, #0]
 80170b6:	6023      	str	r3, [r4, #0]
 80170b8:	4633      	mov	r3, r6
 80170ba:	4618      	mov	r0, r3
 80170bc:	370c      	adds	r7, #12
 80170be:	46bd      	mov	sp, r7
 80170c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80170c2:	b580      	push	{r7, lr}
 80170c4:	b084      	sub	sp, #16
 80170c6:	af00      	add	r7, sp, #0
 80170c8:	60f8      	str	r0, [r7, #12]
 80170ca:	60b9      	str	r1, [r7, #8]
 80170cc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f7fe f91a 	bl	8015308 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80170d4:	4603      	mov	r3, r0
 80170d6:	4619      	mov	r1, r3
 80170d8:	68b8      	ldr	r0, [r7, #8]
 80170da:	f7ff ffd9 	bl	8017090 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80170de:	bf00      	nop
 80170e0:	3710      	adds	r7, #16
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}

080170e6 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80170e6:	b5b0      	push	{r4, r5, r7, lr}
 80170e8:	b082      	sub	sp, #8
 80170ea:	af00      	add	r7, sp, #0
 80170ec:	6078      	str	r0, [r7, #4]
 80170ee:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80170f0:	6838      	ldr	r0, [r7, #0]
 80170f2:	f7fe f9b4 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80170f6:	4605      	mov	r5, r0
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	4619      	mov	r1, r3
 80170fc:	201c      	movs	r0, #28
 80170fe:	f7ea fa63 	bl	80015c8 <_ZnwjPv>
 8017102:	4604      	mov	r4, r0
 8017104:	4629      	mov	r1, r5
 8017106:	4620      	mov	r0, r4
 8017108:	f7f8 f86b 	bl	800f1e2 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 801710c:	4623      	mov	r3, r4
 801710e:	4618      	mov	r0, r3
 8017110:	3708      	adds	r7, #8
 8017112:	46bd      	mov	sp, r7
 8017114:	bdb0      	pop	{r4, r5, r7, pc}

08017116 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8017116:	b580      	push	{r7, lr}
 8017118:	b084      	sub	sp, #16
 801711a:	af00      	add	r7, sp, #0
 801711c:	60f8      	str	r0, [r7, #12]
 801711e:	60b9      	str	r1, [r7, #8]
 8017120:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8017122:	6878      	ldr	r0, [r7, #4]
 8017124:	f7fe f99b 	bl	801545e <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017128:	4603      	mov	r3, r0
 801712a:	4619      	mov	r1, r3
 801712c:	68b8      	ldr	r0, [r7, #8]
 801712e:	f7ff ffda 	bl	80170e6 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 8017132:	bf00      	nop
 8017134:	3710      	adds	r7, #16
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() const noexcept
 801713a:	b480      	push	{r7}
 801713c:	b083      	sub	sp, #12
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	4618      	mov	r0, r3
 8017146:	370c      	adds	r7, #12
 8017148:	46bd      	mov	sp, r7
 801714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714e:	4770      	bx	lr

08017150 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 8017150:	b480      	push	{r7}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	4618      	mov	r0, r3
 801715c:	370c      	adds	r7, #12
 801715e:	46bd      	mov	sp, r7
 8017160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017164:	4770      	bx	lr

08017166 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 8017166:	b480      	push	{r7}
 8017168:	b083      	sub	sp, #12
 801716a:	af00      	add	r7, sp, #0
 801716c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	4618      	mov	r0, r3
 8017172:	370c      	adds	r7, #12
 8017174:	46bd      	mov	sp, r7
 8017176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717a:	4770      	bx	lr

0801717c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 801717c:	b480      	push	{r7}
 801717e:	b083      	sub	sp, #12
 8017180:	af00      	add	r7, sp, #0
 8017182:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	4618      	mov	r0, r3
 8017188:	370c      	adds	r7, #12
 801718a:	46bd      	mov	sp, r7
 801718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017190:	4770      	bx	lr

08017192 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8017192:	b480      	push	{r7}
 8017194:	b083      	sub	sp, #12
 8017196:	af00      	add	r7, sp, #0
 8017198:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	4618      	mov	r0, r3
 801719e:	370c      	adds	r7, #12
 80171a0:	46bd      	mov	sp, r7
 80171a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a6:	4770      	bx	lr

080171a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	60f8      	str	r0, [r7, #12]
 80171b0:	60b9      	str	r1, [r7, #8]
 80171b2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80171b4:	68f8      	ldr	r0, [r7, #12]
 80171b6:	f000 f89f 	bl	80172f8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>
 80171ba:	4602      	mov	r2, r0
 80171bc:	68bb      	ldr	r3, [r7, #8]
 80171be:	4293      	cmp	r3, r2
 80171c0:	bf8c      	ite	hi
 80171c2:	2301      	movhi	r3, #1
 80171c4:	2300      	movls	r3, #0
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d001      	beq.n	80171d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80171cc:	f002 fa6c 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80171d0:	68ba      	ldr	r2, [r7, #8]
 80171d2:	4613      	mov	r3, r2
 80171d4:	00db      	lsls	r3, r3, #3
 80171d6:	4413      	add	r3, r2
 80171d8:	009b      	lsls	r3, r3, #2
 80171da:	4618      	mov	r0, r3
 80171dc:	f002 f9a0 	bl	8019520 <_Znwj>
 80171e0:	4603      	mov	r3, r0
 80171e2:	bf00      	nop
      }
 80171e4:	4618      	mov	r0, r3
 80171e6:	3710      	adds	r7, #16
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd80      	pop	{r7, pc}

080171ec <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80171f8:	68f8      	ldr	r0, [r7, #12]
 80171fa:	f000 f88b 	bl	8017314 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>
 80171fe:	4602      	mov	r2, r0
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	4293      	cmp	r3, r2
 8017204:	bf8c      	ite	hi
 8017206:	2301      	movhi	r3, #1
 8017208:	2300      	movls	r3, #0
 801720a:	b2db      	uxtb	r3, r3
 801720c:	2b00      	cmp	r3, #0
 801720e:	d001      	beq.n	8017214 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017210:	f002 fa4a 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017214:	68bb      	ldr	r3, [r7, #8]
 8017216:	015b      	lsls	r3, r3, #5
 8017218:	4618      	mov	r0, r3
 801721a:	f002 f981 	bl	8019520 <_Znwj>
 801721e:	4603      	mov	r3, r0
 8017220:	bf00      	nop
      }
 8017222:	4618      	mov	r0, r3
 8017224:	3710      	adds	r7, #16
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}

0801722a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801722a:	b580      	push	{r7, lr}
 801722c:	b084      	sub	sp, #16
 801722e:	af00      	add	r7, sp, #0
 8017230:	60f8      	str	r0, [r7, #12]
 8017232:	60b9      	str	r1, [r7, #8]
 8017234:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8017236:	68f8      	ldr	r0, [r7, #12]
 8017238:	f000 f878 	bl	801732c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>
 801723c:	4602      	mov	r2, r0
 801723e:	68bb      	ldr	r3, [r7, #8]
 8017240:	4293      	cmp	r3, r2
 8017242:	bf8c      	ite	hi
 8017244:	2301      	movhi	r3, #1
 8017246:	2300      	movls	r3, #0
 8017248:	b2db      	uxtb	r3, r3
 801724a:	2b00      	cmp	r3, #0
 801724c:	d001      	beq.n	8017252 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801724e:	f002 fa2b 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017252:	68ba      	ldr	r2, [r7, #8]
 8017254:	4613      	mov	r3, r2
 8017256:	009b      	lsls	r3, r3, #2
 8017258:	4413      	add	r3, r2
 801725a:	00db      	lsls	r3, r3, #3
 801725c:	4618      	mov	r0, r3
 801725e:	f002 f95f 	bl	8019520 <_Znwj>
 8017262:	4603      	mov	r3, r0
 8017264:	bf00      	nop
      }
 8017266:	4618      	mov	r0, r3
 8017268:	3710      	adds	r7, #16
 801726a:	46bd      	mov	sp, r7
 801726c:	bd80      	pop	{r7, pc}

0801726e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801726e:	b580      	push	{r7, lr}
 8017270:	b084      	sub	sp, #16
 8017272:	af00      	add	r7, sp, #0
 8017274:	60f8      	str	r0, [r7, #12]
 8017276:	60b9      	str	r1, [r7, #8]
 8017278:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	f000 f864 	bl	8017348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 8017280:	4602      	mov	r2, r0
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	4293      	cmp	r3, r2
 8017286:	bf8c      	ite	hi
 8017288:	2301      	movhi	r3, #1
 801728a:	2300      	movls	r3, #0
 801728c:	b2db      	uxtb	r3, r3
 801728e:	2b00      	cmp	r3, #0
 8017290:	d001      	beq.n	8017296 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8017292:	f002 fa09 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017296:	68ba      	ldr	r2, [r7, #8]
 8017298:	4613      	mov	r3, r2
 801729a:	00db      	lsls	r3, r3, #3
 801729c:	1a9b      	subs	r3, r3, r2
 801729e:	00db      	lsls	r3, r3, #3
 80172a0:	4618      	mov	r0, r3
 80172a2:	f002 f93d 	bl	8019520 <_Znwj>
 80172a6:	4603      	mov	r3, r0
 80172a8:	bf00      	nop
      }
 80172aa:	4618      	mov	r0, r3
 80172ac:	3710      	adds	r7, #16
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd80      	pop	{r7, pc}

080172b2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80172b2:	b580      	push	{r7, lr}
 80172b4:	b084      	sub	sp, #16
 80172b6:	af00      	add	r7, sp, #0
 80172b8:	60f8      	str	r0, [r7, #12]
 80172ba:	60b9      	str	r1, [r7, #8]
 80172bc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80172be:	68f8      	ldr	r0, [r7, #12]
 80172c0:	f000 f850 	bl	8017364 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 80172c4:	4602      	mov	r2, r0
 80172c6:	68bb      	ldr	r3, [r7, #8]
 80172c8:	4293      	cmp	r3, r2
 80172ca:	bf8c      	ite	hi
 80172cc:	2301      	movhi	r3, #1
 80172ce:	2300      	movls	r3, #0
 80172d0:	b2db      	uxtb	r3, r3
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d001      	beq.n	80172da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80172d6:	f002 f9e7 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80172da:	68ba      	ldr	r2, [r7, #8]
 80172dc:	4613      	mov	r3, r2
 80172de:	00db      	lsls	r3, r3, #3
 80172e0:	4413      	add	r3, r2
 80172e2:	009b      	lsls	r3, r3, #2
 80172e4:	4618      	mov	r0, r3
 80172e6:	f002 f91b 	bl	8019520 <_Znwj>
 80172ea:	4603      	mov	r3, r0
 80172ec:	bf00      	nop
      }
 80172ee:	4618      	mov	r0, r3
 80172f0:	3710      	adds	r7, #16
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
	...

080172f8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80172f8:	b480      	push	{r7}
 80172fa:	b083      	sub	sp, #12
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017300:	4b03      	ldr	r3, [pc, #12]	; (8017310 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv+0x18>)
      }
 8017302:	4618      	mov	r0, r3
 8017304:	370c      	adds	r7, #12
 8017306:	46bd      	mov	sp, r7
 8017308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730c:	4770      	bx	lr
 801730e:	bf00      	nop
 8017310:	038e38e3 	.word	0x038e38e3

08017314 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017314:	b480      	push	{r7}
 8017316:	b083      	sub	sp, #12
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801731c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8017320:	4618      	mov	r0, r3
 8017322:	370c      	adds	r7, #12
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr

0801732c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801732c:	b480      	push	{r7}
 801732e:	b083      	sub	sp, #12
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017334:	4b03      	ldr	r3, [pc, #12]	; (8017344 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv+0x18>)
      }
 8017336:	4618      	mov	r0, r3
 8017338:	370c      	adds	r7, #12
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr
 8017342:	bf00      	nop
 8017344:	03333333 	.word	0x03333333

08017348 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017348:	b480      	push	{r7}
 801734a:	b083      	sub	sp, #12
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017350:	4b03      	ldr	r3, [pc, #12]	; (8017360 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 8017352:	4618      	mov	r0, r3
 8017354:	370c      	adds	r7, #12
 8017356:	46bd      	mov	sp, r7
 8017358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735c:	4770      	bx	lr
 801735e:	bf00      	nop
 8017360:	02492492 	.word	0x02492492

08017364 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8017364:	b480      	push	{r7}
 8017366:	b083      	sub	sp, #12
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801736c:	4b03      	ldr	r3, [pc, #12]	; (801737c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 801736e:	4618      	mov	r0, r3
 8017370:	370c      	adds	r7, #12
 8017372:	46bd      	mov	sp, r7
 8017374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017378:	4770      	bx	lr
 801737a:	bf00      	nop
 801737c:	038e38e3 	.word	0x038e38e3

08017380 <_Z41__static_initialization_and_destruction_0ii>:
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
};
 8017380:	b590      	push	{r4, r7, lr}
 8017382:	b0ef      	sub	sp, #444	; 0x1bc
 8017384:	af02      	add	r7, sp, #8
 8017386:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801738a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 801738e:	6018      	str	r0, [r3, #0]
 8017390:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017394:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017398:	6019      	str	r1, [r3, #0]
 801739a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801739e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	2b01      	cmp	r3, #1
 80173a6:	f040 8239 	bne.w	801781c <_Z41__static_initialization_and_destruction_0ii+0x49c>
 80173aa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80173ae:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80173b8:	4293      	cmp	r3, r2
 80173ba:	f040 822f 	bne.w	801781c <_Z41__static_initialization_and_destruction_0ii+0x49c>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 80173be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80173c2:	4acc      	ldr	r2, [pc, #816]	; (80176f4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80173c4:	49cc      	ldr	r1, [pc, #816]	; (80176f8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7fb f999 	bl	80126fe <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PC6, PC7}, {&htim8}},
 80173cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80173d0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80173d4:	4ac9      	ldr	r2, [pc, #804]	; (80176fc <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80173d6:	601a      	str	r2, [r3, #0]
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 80173d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80173dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80173e0:	f107 0314 	add.w	r3, r7, #20
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7fb f9a8 	bl	801273a <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>
 80173ea:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80173ee:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80173f2:	f107 0214 	add.w	r2, r7, #20
 80173f6:	601a      	str	r2, [r3, #0]
 80173f8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80173fc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8017400:	2201      	movs	r2, #1
 8017402:	605a      	str	r2, [r3, #4]
 8017404:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017408:	4618      	mov	r0, r3
 801740a:	f7fb f9ac 	bl	8012766 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>
 801740e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8017412:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017416:	f5a3 72d2 	sub.w	r2, r3, #420	; 0x1a4
 801741a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801741e:	9300      	str	r3, [sp, #0]
 8017420:	460b      	mov	r3, r1
 8017422:	ca06      	ldmia	r2, {r1, r2}
 8017424:	48b6      	ldr	r0, [pc, #728]	; (8017700 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8017426:	f7fb f9b5 	bl	8012794 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 801742a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801742e:	4618      	mov	r0, r3
 8017430:	f7fb f9a5 	bl	801277e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8017434:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017438:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801743c:	4ab1      	ldr	r2, [pc, #708]	; (8017704 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 801743e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017442:	e883 0003 	stmia.w	r3, {r0, r1}
 8017446:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801744a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801744e:	49ae      	ldr	r1, [pc, #696]	; (8017708 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8017450:	4618      	mov	r0, r3
 8017452:	f7fb f85c 	bl	801250e <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 8017456:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801745a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 801745e:	4aab      	ldr	r2, [pc, #684]	; (801770c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8017460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017464:	e883 0003 	stmia.w	r3, {r0, r1}
 8017468:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801746c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017470:	3310      	adds	r3, #16
 8017472:	49a7      	ldr	r1, [pc, #668]	; (8017710 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8017474:	4618      	mov	r0, r3
 8017476:	f7fb f84a 	bl	801250e <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 801747a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801747e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8017482:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017486:	601a      	str	r2, [r3, #0]
 8017488:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801748c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8017490:	2202      	movs	r2, #2
 8017492:	605a      	str	r2, [r3, #4]
 8017494:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8017498:	4618      	mov	r0, r3
 801749a:	f7fb f9cc 	bl	8012836 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>
 801749e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80174a2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80174a6:	f5a3 72b6 	sub.w	r2, r3, #364	; 0x16c
 80174aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80174ae:	9300      	str	r3, [sp, #0]
 80174b0:	460b      	mov	r3, r1
 80174b2:	ca06      	ldmia	r2, {r1, r2}
 80174b4:	4897      	ldr	r0, [pc, #604]	; (8017714 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80174b6:	f7fb f9d5 	bl	8012864 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 80174ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fb f9c5 	bl	801284e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 80174c4:	4b94      	ldr	r3, [pc, #592]	; (8017718 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80174c6:	461a      	mov	r2, r3
 80174c8:	2300      	movs	r3, #0
 80174ca:	6013      	str	r3, [r2, #0]
 80174cc:	6053      	str	r3, [r2, #4]
 80174ce:	6093      	str	r3, [r2, #8]
 80174d0:	60d3      	str	r3, [r2, #12]
 80174d2:	6113      	str	r3, [r2, #16]
 80174d4:	6153      	str	r3, [r2, #20]
 80174d6:	4890      	ldr	r0, [pc, #576]	; (8017718 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80174d8:	f7fb f865 	bl	80125a6 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 80174dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80174e0:	4a8e      	ldr	r2, [pc, #568]	; (801771c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80174e2:	498f      	ldr	r1, [pc, #572]	; (8017720 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7fb f90a 	bl	80126fe <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 80174ea:	4b8e      	ldr	r3, [pc, #568]	; (8017724 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80174ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80174f0:	2300      	movs	r3, #0
 80174f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80174f6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80174fa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80174fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017502:	4618      	mov	r0, r3
 8017504:	f7fb fa13 	bl	801292e <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>
 8017508:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801750c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8017510:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8017514:	601a      	str	r2, [r3, #0]
 8017516:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801751a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801751e:	2201      	movs	r2, #1
 8017520:	605a      	str	r2, [r3, #4]
 8017522:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8017526:	4618      	mov	r0, r3
 8017528:	f7fb fa1a 	bl	8012960 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>
 801752c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8017530:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017534:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 8017538:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801753c:	9300      	str	r3, [sp, #0]
 801753e:	460b      	mov	r3, r1
 8017540:	ca06      	ldmia	r2, {r1, r2}
 8017542:	4879      	ldr	r0, [pc, #484]	; (8017728 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8017544:	f7fb fa23 	bl	801298e <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 8017548:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801754c:	4618      	mov	r0, r3
 801754e:	f7fb fa13 	bl	8012978 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
		{PA0, InputCapture::Instance(PA0, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 8017552:	4a76      	ldr	r2, [pc, #472]	; (801772c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8017554:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8017558:	2304      	movs	r3, #4
 801755a:	9301      	str	r3, [sp, #4]
 801755c:	2300      	movs	r3, #0
 801755e:	9300      	str	r3, [sp, #0]
 8017560:	4b73      	ldr	r3, [pc, #460]	; (8017730 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8017562:	ca06      	ldmia	r2, {r1, r2}
 8017564:	f000 feea 	bl	801833c <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8017568:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801756c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8017570:	496e      	ldr	r1, [pc, #440]	; (801772c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8017572:	4618      	mov	r0, r3
 8017574:	f7fb fa5c 	bl	8012a30 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8017578:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801757c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017580:	2301      	movs	r3, #1
 8017582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801758a:	4618      	mov	r0, r3
 801758c:	f7fb fa72 	bl	8012a74 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 8017590:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8017594:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	4613      	mov	r3, r2
 801759c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80175a0:	ca06      	ldmia	r2, {r1, r2}
 80175a2:	4864      	ldr	r0, [pc, #400]	; (8017734 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 80175a4:	f7fb fa7d 	bl	8012aa2 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 80175a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7fb fa6d 	bl	8012a8c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
LowPowerTimer lptim1 = LowPowerTimer(&hlptim1, LPTIM1_PERIOD);
 80175b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80175b6:	4960      	ldr	r1, [pc, #384]	; (8017738 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 80175b8:	4860      	ldr	r0, [pc, #384]	; (801773c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 80175ba:	f7fa ff87 	bl	80124cc <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(&hlptim2, LPTIM2_PERIOD);
 80175be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80175c2:	495f      	ldr	r1, [pc, #380]	; (8017740 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 80175c4:	485f      	ldr	r0, [pc, #380]	; (8017744 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 80175c6:	f7fa ff81 	bl	80124cc <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(&hlptim3, LPTIM3_PERIOD);
 80175ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80175ce:	495e      	ldr	r1, [pc, #376]	; (8017748 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 80175d0:	485e      	ldr	r0, [pc, #376]	; (801774c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80175d2:	f7fa ff7b 	bl	80124cc <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 80175d6:	4b5e      	ldr	r3, [pc, #376]	; (8017750 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 80175d8:	461a      	mov	r2, r3
 80175da:	2300      	movs	r3, #0
 80175dc:	6013      	str	r3, [r2, #0]
 80175de:	6053      	str	r3, [r2, #4]
 80175e0:	6093      	str	r3, [r2, #8]
 80175e2:	485b      	ldr	r0, [pc, #364]	; (8017750 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 80175e4:	f7fa ff41 	bl	801246a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 80175e8:	4b5a      	ldr	r3, [pc, #360]	; (8017754 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 80175ea:	461a      	mov	r2, r3
 80175ec:	2300      	movs	r3, #0
 80175ee:	6013      	str	r3, [r2, #0]
 80175f0:	6053      	str	r3, [r2, #4]
 80175f2:	6093      	str	r3, [r2, #8]
 80175f4:	4857      	ldr	r0, [pc, #348]	; (8017754 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 80175f6:	f7fa ff38 	bl	801246a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 80175fa:	4b57      	ldr	r3, [pc, #348]	; (8017758 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80175fc:	461a      	mov	r2, r3
 80175fe:	2300      	movs	r3, #0
 8017600:	6013      	str	r3, [r2, #0]
 8017602:	6053      	str	r3, [r2, #4]
 8017604:	6093      	str	r3, [r2, #8]
 8017606:	4854      	ldr	r0, [pc, #336]	; (8017758 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8017608:	f7fa ff2f 	bl	801246a <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 801760c:	4b50      	ldr	r3, [pc, #320]	; (8017750 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8017614:	2200      	movs	r2, #0
 8017616:	4951      	ldr	r1, [pc, #324]	; (801775c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8017618:	4851      	ldr	r0, [pc, #324]	; (8017760 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 801761a:	f000 f9a8 	bl	801796e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 801761e:	4b4d      	ldr	r3, [pc, #308]	; (8017754 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8017620:	9300      	str	r3, [sp, #0]
 8017622:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8017626:	2200      	movs	r2, #0
 8017628:	494e      	ldr	r1, [pc, #312]	; (8017764 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 801762a:	484f      	ldr	r0, [pc, #316]	; (8017768 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 801762c:	f000 f99f 	bl	801796e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8017630:	4b49      	ldr	r3, [pc, #292]	; (8017758 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8017632:	9300      	str	r3, [sp, #0]
 8017634:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8017638:	2208      	movs	r2, #8
 801763a:	494c      	ldr	r1, [pc, #304]	; (801776c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 801763c:	484c      	ldr	r0, [pc, #304]	; (8017770 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 801763e:	f000 f996 	bl	801796e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
};
 8017642:	4c4c      	ldr	r4, [pc, #304]	; (8017774 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8017644:	4b46      	ldr	r3, [pc, #280]	; (8017760 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8017646:	9300      	str	r3, [sp, #0]
 8017648:	4b3c      	ldr	r3, [pc, #240]	; (801773c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 801764a:	4a4b      	ldr	r2, [pc, #300]	; (8017778 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 801764c:	494b      	ldr	r1, [pc, #300]	; (801777c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 801764e:	4620      	mov	r0, r4
 8017650:	f000 f9c7 	bl	80179e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8017654:	342c      	adds	r4, #44	; 0x2c
 8017656:	4b44      	ldr	r3, [pc, #272]	; (8017768 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8017658:	9300      	str	r3, [sp, #0]
 801765a:	4b3a      	ldr	r3, [pc, #232]	; (8017744 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 801765c:	4a48      	ldr	r2, [pc, #288]	; (8017780 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 801765e:	4949      	ldr	r1, [pc, #292]	; (8017784 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8017660:	4620      	mov	r0, r4
 8017662:	f000 f9be 	bl	80179e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8017666:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801766a:	4b41      	ldr	r3, [pc, #260]	; (8017770 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 801766c:	9300      	str	r3, [sp, #0]
 801766e:	4b37      	ldr	r3, [pc, #220]	; (801774c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8017670:	4a45      	ldr	r2, [pc, #276]	; (8017788 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8017672:	4946      	ldr	r1, [pc, #280]	; (801778c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8017674:	f000 f9b5 	bl	80179e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
		{PF11, Instance(&peripherals[0], ADC_CHANNEL_2)},
 8017678:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801767c:	4a44      	ldr	r2, [pc, #272]	; (8017790 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 801767e:	493d      	ldr	r1, [pc, #244]	; (8017774 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8017680:	4618      	mov	r0, r3
 8017682:	f000 f9d1 	bl	8017a28 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8017686:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 801768a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801768e:	4941      	ldr	r1, [pc, #260]	; (8017794 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8017690:	4618      	mov	r0, r3
 8017692:	f7fb fa57 	bl	8012b44 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PA6, Instance(&peripherals[0], ADC_CHANNEL_3)}
 8017696:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801769a:	4a3f      	ldr	r2, [pc, #252]	; (8017798 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 801769c:	4935      	ldr	r1, [pc, #212]	; (8017774 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 801769e:	4618      	mov	r0, r3
 80176a0:	f000 f9c2 	bl	8017a28 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 80176a4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80176a8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80176ac:	3314      	adds	r3, #20
 80176ae:	493b      	ldr	r1, [pc, #236]	; (801779c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7fb fa47 	bl	8012b44 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 80176b6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80176ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80176be:	2302      	movs	r3, #2
 80176c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80176c4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7fb fa58 	bl	8012b7e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 80176ce:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 80176d2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80176d6:	9300      	str	r3, [sp, #0]
 80176d8:	4613      	mov	r3, r2
 80176da:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80176de:	ca06      	ldmia	r2, {r1, r2}
 80176e0:	482f      	ldr	r0, [pc, #188]	; (80177a0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 80176e2:	f7fb fa63 	bl	8012bac <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 80176e6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80176ea:	4618      	mov	r0, r3
 80176ec:	f7fb fa53 	bl	8012b96 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
 80176f0:	e058      	b.n	80177a4 <_Z41__static_initialization_and_destruction_0ii+0x424>
 80176f2:	bf00      	nop
 80176f4:	24000e74 	.word	0x24000e74
 80176f8:	24000e6c 	.word	0x24000e6c
 80176fc:	24000928 	.word	0x24000928
 8017700:	24000fac 	.word	0x24000fac
 8017704:	08019d84 	.word	0x08019d84
 8017708:	24000c34 	.word	0x24000c34
 801770c:	08019d8c 	.word	0x08019d8c
 8017710:	24000c5c 	.word	0x24000c5c
 8017714:	24000fc4 	.word	0x24000fc4
 8017718:	24000fdc 	.word	0x24000fdc
 801771c:	24000c2c 	.word	0x24000c2c
 8017720:	24000c24 	.word	0x24000c24
 8017724:	240009c0 	.word	0x240009c0
 8017728:	24000ff4 	.word	0x24000ff4
 801772c:	24000cdc 	.word	0x24000cdc
 8017730:	24000844 	.word	0x24000844
 8017734:	2400100c 	.word	0x2400100c
 8017738:	240006a0 	.word	0x240006a0
 801773c:	24001084 	.word	0x24001084
 8017740:	240006d8 	.word	0x240006d8
 8017744:	2400108c 	.word	0x2400108c
 8017748:	24000710 	.word	0x24000710
 801774c:	24001094 	.word	0x24001094
 8017750:	2400109c 	.word	0x2400109c
 8017754:	240010a8 	.word	0x240010a8
 8017758:	240010b4 	.word	0x240010b4
 801775c:	40022000 	.word	0x40022000
 8017760:	240010c0 	.word	0x240010c0
 8017764:	40022100 	.word	0x40022100
 8017768:	240010d8 	.word	0x240010d8
 801776c:	58026000 	.word	0x58026000
 8017770:	240010f0 	.word	0x240010f0
 8017774:	24001108 	.word	0x24001108
 8017778:	24001024 	.word	0x24001024
 801777c:	24000150 	.word	0x24000150
 8017780:	24001044 	.word	0x24001044
 8017784:	240001c0 	.word	0x240001c0
 8017788:	24001064 	.word	0x24001064
 801778c:	24000230 	.word	0x24000230
 8017790:	08600004 	.word	0x08600004
 8017794:	24000d44 	.word	0x24000d44
 8017798:	0c900008 	.word	0x0c900008
 801779c:	24000d0c 	.word	0x24000d0c
 80177a0:	2400118c 	.word	0x2400118c
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
 80177a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80177a8:	2106      	movs	r1, #6
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7f7 fc5d 	bl	800f06a <_ZN17ExternalInterrupt8InstanceC1E9IRQn_Type>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 80177b0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80177b4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80177b8:	493b      	ldr	r1, [pc, #236]	; (80178a8 <_Z41__static_initialization_and_destruction_0ii+0x528>)
 80177ba:	4618      	mov	r0, r3
 80177bc:	f7fb fa6d 	bl	8012c9a <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>
 80177c0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80177c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80177c8:	2301      	movs	r3, #1
 80177ca:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80177ce:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fb fa7d 	bl	8012cd2 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 80177d8:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80177dc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	4613      	mov	r3, r2
 80177e4:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 80177e8:	ca06      	ldmia	r2, {r1, r2}
 80177ea:	4830      	ldr	r0, [pc, #192]	; (80178ac <_Z41__static_initialization_and_destruction_0ii+0x52c>)
 80177ec:	f7fb fa88 	bl	8012d00 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 80177f0:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7fb fa78 	bl	8012cea <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
};
 80177fa:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 80177fe:	341c      	adds	r4, #28
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8017800:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017804:	429c      	cmp	r4, r3
 8017806:	d004      	beq.n	8017812 <_Z41__static_initialization_and_destruction_0ii+0x492>
};
 8017808:	3c1c      	subs	r4, #28
 801780a:	4620      	mov	r0, r4
 801780c:	f7f7 fcff 	bl	800f20e <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8017810:	e7f6      	b.n	8017800 <_Z41__static_initialization_and_destruction_0ii+0x480>
	{PE0.gpio_pin, Instance(EXTI0_IRQn)}
 8017812:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8017816:	4618      	mov	r0, r3
 8017818:	f7f7 fcd5 	bl	800f1c6 <_ZN17ExternalInterrupt8InstanceD1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 801781c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017820:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d138      	bne.n	801789c <_Z41__static_initialization_and_destruction_0ii+0x51c>
 801782a:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801782e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017838:	4293      	cmp	r3, r2
 801783a:	d12f      	bne.n	801789c <_Z41__static_initialization_and_destruction_0ii+0x51c>
 801783c:	481b      	ldr	r0, [pc, #108]	; (80178ac <_Z41__static_initialization_and_destruction_0ii+0x52c>)
 801783e:	f7fa ff02 	bl	8012646 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<Pin, ADC::Instance> ADC::available_instances = {
 8017842:	481b      	ldr	r0, [pc, #108]	; (80178b0 <_Z41__static_initialization_and_destruction_0ii+0x530>)
 8017844:	f7fa fef2 	bl	801262c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
ADC::Peripheral ADC::peripherals[3] = {
 8017848:	4c1a      	ldr	r4, [pc, #104]	; (80178b4 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 801784a:	4b1b      	ldr	r3, [pc, #108]	; (80178b8 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 801784c:	429c      	cmp	r4, r3
 801784e:	d004      	beq.n	801785a <_Z41__static_initialization_and_destruction_0ii+0x4da>
 8017850:	3c2c      	subs	r4, #44	; 0x2c
 8017852:	4620      	mov	r0, r4
 8017854:	f7fa fedc 	bl	8012610 <_ZN3ADC10PeripheralD1Ev>
 8017858:	e7f7      	b.n	801784a <_Z41__static_initialization_and_destruction_0ii+0x4ca>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 801785a:	4818      	ldr	r0, [pc, #96]	; (80178bc <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 801785c:	f7fa feca 	bl	80125f4 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8017860:	4817      	ldr	r0, [pc, #92]	; (80178c0 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 8017862:	f7fa fec7 	bl	80125f4 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8017866:	4817      	ldr	r0, [pc, #92]	; (80178c4 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8017868:	f7fa fec4 	bl	80125f4 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 801786c:	4816      	ldr	r0, [pc, #88]	; (80178c8 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 801786e:	f7fa ff2b 	bl	80126c8 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 8017872:	4816      	ldr	r0, [pc, #88]	; (80178cc <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8017874:	f7fa ff28 	bl	80126c8 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 8017878:	4815      	ldr	r0, [pc, #84]	; (80178d0 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 801787a:	f7fa ff25 	bl	80126c8 <_ZNSt6vectorImSaImEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 801787e:	4815      	ldr	r0, [pc, #84]	; (80178d4 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8017880:	f7fa feab 	bl	80125da <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8017884:	4814      	ldr	r0, [pc, #80]	; (80178d8 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8017886:	f7fa fe9b 	bl	80125c0 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 801788a:	4814      	ldr	r0, [pc, #80]	; (80178dc <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 801788c:	f7fa fe65 	bl	801255a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8017890:	4813      	ldr	r0, [pc, #76]	; (80178e0 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8017892:	f7fa fe62 	bl	801255a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8017896:	4813      	ldr	r0, [pc, #76]	; (80178e4 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8017898:	f7fa fe2c 	bl	80124f4 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
};
 801789c:	bf00      	nop
 801789e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd90      	pop	{r4, r7, pc}
 80178a6:	bf00      	nop
 80178a8:	24000f78 	.word	0x24000f78
 80178ac:	240011a4 	.word	0x240011a4
 80178b0:	2400118c 	.word	0x2400118c
 80178b4:	2400118c 	.word	0x2400118c
 80178b8:	24001108 	.word	0x24001108
 80178bc:	240010f0 	.word	0x240010f0
 80178c0:	240010d8 	.word	0x240010d8
 80178c4:	240010c0 	.word	0x240010c0
 80178c8:	240010b4 	.word	0x240010b4
 80178cc:	240010a8 	.word	0x240010a8
 80178d0:	2400109c 	.word	0x2400109c
 80178d4:	2400100c 	.word	0x2400100c
 80178d8:	24000ff4 	.word	0x24000ff4
 80178dc:	24000fdc 	.word	0x24000fdc
 80178e0:	24000fc4 	.word	0x24000fc4
 80178e4:	24000fac 	.word	0x24000fac

080178e8 <_GLOBAL__sub_I__ZN7Encoder13pin_timer_mapE>:
 80178e8:	b580      	push	{r7, lr}
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80178f0:	2001      	movs	r0, #1
 80178f2:	f7ff fd45 	bl	8017380 <_Z41__static_initialization_and_destruction_0ii>
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <_GLOBAL__sub_D__ZN7Encoder13pin_timer_mapE>:
 80178f8:	b580      	push	{r7, lr}
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017900:	2000      	movs	r0, #0
 8017902:	f7ff fd3d 	bl	8017380 <_Z41__static_initialization_and_destruction_0ii>
 8017906:	bd80      	pop	{r7, pc}

08017908 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6878      	ldr	r0, [r7, #4]
 8017912:	f000 f8c1 	bl	8017a98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	4618      	mov	r0, r3
 801791a:	3708      	adds	r7, #8
 801791c:	46bd      	mov	sp, r7
 801791e:	bd80      	pop	{r7, pc}

08017920 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	4618      	mov	r0, r3
 801792c:	f000 f89f 	bl	8017a6e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	4618      	mov	r0, r3
 8017934:	3708      	adds	r7, #8
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}

0801793a <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 801793a:	b580      	push	{r7, lr}
 801793c:	b082      	sub	sp, #8
 801793e:	af00      	add	r7, sp, #0
 8017940:	6078      	str	r0, [r7, #4]
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	4618      	mov	r0, r3
 8017946:	f7ff ffeb 	bl	8017920 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	4618      	mov	r0, r3
 801794e:	3708      	adds	r7, #8
 8017950:	46bd      	mov	sp, r7
 8017952:	bd80      	pop	{r7, pc}

08017954 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	4618      	mov	r0, r3
 8017960:	f000 f8a5 	bl	8017aae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	4618      	mov	r0, r3
 8017968:	3708      	adds	r7, #8
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}

0801796e <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
extern ADC_HandleTypeDef hadc3;

forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, ADC::Instance> ADC::active_instances = {};

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 801796e:	b580      	push	{r7, lr}
 8017970:	b084      	sub	sp, #16
 8017972:	af00      	add	r7, sp, #0
 8017974:	60f8      	str	r0, [r7, #12]
 8017976:	60b9      	str	r1, [r7, #8]
 8017978:	607a      	str	r2, [r7, #4]
 801797a:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	68ba      	ldr	r2, [r7, #8]
 8017980:	601a      	str	r2, [r3, #0]
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	687a      	ldr	r2, [r7, #4]
 8017986:	605a      	str	r2, [r3, #4]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	683a      	ldr	r2, [r7, #0]
 801798c:	609a      	str	r2, [r3, #8]
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	330c      	adds	r3, #12
 8017992:	69b9      	ldr	r1, [r7, #24]
 8017994:	4618      	mov	r0, r3
 8017996:	f000 f89f 	bl	8017ad8 <_ZNSt6vectorImSaImEEC1ERKS1_>
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	4618      	mov	r0, r3
 801799e:	3710      	adds	r7, #16
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <_ZN3ADC8InitDataC1ERKS0_>:
	struct InitData {
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	601a      	str	r2, [r3, #0]
 80179b6:	683b      	ldr	r3, [r7, #0]
 80179b8:	685a      	ldr	r2, [r3, #4]
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	605a      	str	r2, [r3, #4]
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	689a      	ldr	r2, [r3, #8]
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	609a      	str	r2, [r3, #8]
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f103 020c 	add.w	r2, r3, #12
 80179cc:	683b      	ldr	r3, [r7, #0]
 80179ce:	330c      	adds	r3, #12
 80179d0:	4619      	mov	r1, r3
 80179d2:	4610      	mov	r0, r2
 80179d4:	f000 f880 	bl	8017ad8 <_ZNSt6vectorImSaImEEC1ERKS1_>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	4618      	mov	r0, r3
 80179dc:	3708      	adds	r7, #8
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}

080179e2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 80179e2:	b580      	push	{r7, lr}
 80179e4:	b084      	sub	sp, #16
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	60b9      	str	r1, [r7, #8]
 80179ec:	607a      	str	r2, [r7, #4]
 80179ee:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	68ba      	ldr	r2, [r7, #8]
 80179f4:	601a      	str	r2, [r3, #0]
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	605a      	str	r2, [r3, #4]
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	683a      	ldr	r2, [r7, #0]
 8017a00:	3308      	adds	r3, #8
 8017a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017a06:	e883 0003 	stmia.w	r3, {r0, r1}
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	3310      	adds	r3, #16
 8017a0e:	69b9      	ldr	r1, [r7, #24]
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7ff ffc7 	bl	80179a4 <_ZN3ADC8InitDataC1ERKS0_>
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2200      	movs	r2, #0
 8017a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	4618      	mov	r0, r3
 8017a22:	3710      	adds	r7, #16
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

bool ADC::Peripheral::is_registered() {
	return init_data.channels.size();
}

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 8017a28:	b480      	push	{r7}
 8017a2a:	b085      	sub	sp, #20
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60f8      	str	r0, [r7, #12]
 8017a30:	60b9      	str	r1, [r7, #8]
 8017a32:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 8017a34:	68fb      	ldr	r3, [r7, #12]
 8017a36:	68ba      	ldr	r2, [r7, #8]
 8017a38:	601a      	str	r2, [r3, #0]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	687a      	ldr	r2, [r7, #4]
 8017a3e:	605a      	str	r2, [r3, #4]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	4618      	mov	r0, r3
 8017a44:	3714      	adds	r7, #20
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr

08017a4e <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017a4e:	b480      	push	{r7}
 8017a50:	b083      	sub	sp, #12
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	685a      	ldr	r2, [r3, #4]
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	1ad3      	subs	r3, r2, r3
 8017a60:	109b      	asrs	r3, r3, #2
 8017a62:	4618      	mov	r0, r3
 8017a64:	370c      	adds	r7, #12
 8017a66:	46bd      	mov	sp, r7
 8017a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6c:	4770      	bx	lr

08017a6e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8017a6e:	b580      	push	{r7, lr}
 8017a70:	b082      	sub	sp, #8
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f000 f86b 	bl	8017b52 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f7f7 ffef 	bl	800fa62 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	3304      	adds	r3, #4
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f7 fa85 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	4618      	mov	r0, r3
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8017a98:	b480      	push	{r7}
 8017a9a:	b083      	sub	sp, #12
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	370c      	adds	r7, #12
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr

08017aae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8017aae:	b580      	push	{r7, lr}
 8017ab0:	b082      	sub	sp, #8
 8017ab2:	af00      	add	r7, sp, #0
 8017ab4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f000 f876 	bl	8017ba8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8017abc:	4603      	mov	r3, r0
 8017abe:	4619      	mov	r1, r3
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f000 f852 	bl	8017b6a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7ff ff1d 	bl	8017908 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	3708      	adds	r7, #8
 8017ad4:	46bd      	mov	sp, r7
 8017ad6:	bd80      	pop	{r7, pc}

08017ad8 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8017ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017ada:	b085      	sub	sp, #20
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8017ae2:	687c      	ldr	r4, [r7, #4]
 8017ae4:	6838      	ldr	r0, [r7, #0]
 8017ae6:	f7ff ffb2 	bl	8017a4e <_ZNKSt6vectorImSaImEE4sizeEv>
 8017aea:	4605      	mov	r5, r0
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	4618      	mov	r0, r3
 8017af0:	f000 f874 	bl	8017bdc <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8017af4:	4602      	mov	r2, r0
 8017af6:	f107 030c 	add.w	r3, r7, #12
 8017afa:	4611      	mov	r1, r2
 8017afc:	4618      	mov	r0, r3
 8017afe:	f000 f85f 	bl	8017bc0 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8017b02:	f107 030c 	add.w	r3, r7, #12
 8017b06:	461a      	mov	r2, r3
 8017b08:	4629      	mov	r1, r5
 8017b0a:	4620      	mov	r0, r4
 8017b0c:	f000 f871 	bl	8017bf2 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 8017b10:	f107 030c 	add.w	r3, r7, #12
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7fa fdb3 	bl	8012680 <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8017b1a:	6838      	ldr	r0, [r7, #0]
 8017b1c:	f000 f87d 	bl	8017c1a <_ZNKSt6vectorImSaImEE5beginEv>
 8017b20:	4605      	mov	r5, r0
 8017b22:	6838      	ldr	r0, [r7, #0]
 8017b24:	f000 f889 	bl	8017c3a <_ZNKSt6vectorImSaImEE3endEv>
 8017b28:	4606      	mov	r6, r0
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7fb f969 	bl	8012e08 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8017b36:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8017b38:	4622      	mov	r2, r4
 8017b3a:	4631      	mov	r1, r6
 8017b3c:	4628      	mov	r0, r5
 8017b3e:	f000 f88d 	bl	8017c5c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8017b42:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	605a      	str	r2, [r3, #4]
      }
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3714      	adds	r7, #20
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017b52 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8017b52:	b580      	push	{r7, lr}
 8017b54:	b082      	sub	sp, #8
 8017b56:	af00      	add	r7, sp, #0
 8017b58:	6078      	str	r0, [r7, #4]
 8017b5a:	6878      	ldr	r0, [r7, #4]
 8017b5c:	f000 f88f 	bl	8017c7e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	4618      	mov	r0, r3
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b084      	sub	sp, #16
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	6078      	str	r0, [r7, #4]
 8017b72:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d012      	beq.n	8017ba0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8017b7a:	6838      	ldr	r0, [r7, #0]
 8017b7c:	f000 f88a 	bl	8017c94 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017b80:	4603      	mov	r3, r0
 8017b82:	4619      	mov	r1, r3
 8017b84:	6878      	ldr	r0, [r7, #4]
 8017b86:	f7ff fff0 	bl	8017b6a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8017b8a:	6838      	ldr	r0, [r7, #0]
 8017b8c:	f000 f88e 	bl	8017cac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017b90:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8017b92:	6839      	ldr	r1, [r7, #0]
 8017b94:	6878      	ldr	r0, [r7, #4]
 8017b96:	f000 f895 	bl	8017cc4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8017b9e:	e7e9      	b.n	8017b74 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8017ba0:	bf00      	nop
 8017ba2:	3710      	adds	r7, #16
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}

08017ba8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8017ba8:	b480      	push	{r7}
 8017baa:	b083      	sub	sp, #12
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	689b      	ldr	r3, [r3, #8]
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	370c      	adds	r7, #12
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbe:	4770      	bx	lr

08017bc0 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b082      	sub	sp, #8
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
 8017bc8:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	6839      	ldr	r1, [r7, #0]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f000 f889 	bl	8017ce6 <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 8017bd4:	6878      	ldr	r0, [r7, #4]
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017bdc:	b480      	push	{r7}
 8017bde:	b083      	sub	sp, #12
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	4618      	mov	r0, r3
 8017be8:	370c      	adds	r7, #12
 8017bea:	46bd      	mov	sp, r7
 8017bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf0:	4770      	bx	lr

08017bf2 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b084      	sub	sp, #16
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	60f8      	str	r0, [r7, #12]
 8017bfa:	60b9      	str	r1, [r7, #8]
 8017bfc:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	6879      	ldr	r1, [r7, #4]
 8017c02:	4618      	mov	r0, r3
 8017c04:	f000 f87c 	bl	8017d00 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8017c08:	68b9      	ldr	r1, [r7, #8]
 8017c0a:	68f8      	ldr	r0, [r7, #12]
 8017c0c:	f000 f88a 	bl	8017d24 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	4618      	mov	r0, r3
 8017c14:	3710      	adds	r7, #16
 8017c16:	46bd      	mov	sp, r7
 8017c18:	bd80      	pop	{r7, pc}

08017c1a <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8017c1a:	b580      	push	{r7, lr}
 8017c1c:	b084      	sub	sp, #16
 8017c1e:	af00      	add	r7, sp, #0
 8017c20:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8017c22:	687a      	ldr	r2, [r7, #4]
 8017c24:	f107 030c 	add.w	r3, r7, #12
 8017c28:	4611      	mov	r1, r2
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f000 f895 	bl	8017d5a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	4618      	mov	r0, r3
 8017c34:	3710      	adds	r7, #16
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}

08017c3a <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8017c3a:	b580      	push	{r7, lr}
 8017c3c:	b084      	sub	sp, #16
 8017c3e:	af00      	add	r7, sp, #0
 8017c40:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	1d1a      	adds	r2, r3, #4
 8017c46:	f107 030c 	add.w	r3, r7, #12
 8017c4a:	4611      	mov	r1, r2
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	f000 f884 	bl	8017d5a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	4618      	mov	r0, r3
 8017c56:	3710      	adds	r7, #16
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	bd80      	pop	{r7, pc}

08017c5c <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b084      	sub	sp, #16
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	60f8      	str	r0, [r7, #12]
 8017c64:	60b9      	str	r1, [r7, #8]
 8017c66:	607a      	str	r2, [r7, #4]
 8017c68:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8017c6a:	687a      	ldr	r2, [r7, #4]
 8017c6c:	68b9      	ldr	r1, [r7, #8]
 8017c6e:	68f8      	ldr	r0, [r7, #12]
 8017c70:	f000 f883 	bl	8017d7a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8017c74:	4603      	mov	r3, r0
 8017c76:	4618      	mov	r0, r3
 8017c78:	3710      	adds	r7, #16
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd80      	pop	{r7, pc}

08017c7e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017c7e:	b480      	push	{r7}
 8017c80:	b083      	sub	sp, #12
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	4618      	mov	r0, r3
 8017c8a:	370c      	adds	r7, #12
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c92:	4770      	bx	lr

08017c94 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017c94:	b480      	push	{r7}
 8017c96:	b083      	sub	sp, #12
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	68db      	ldr	r3, [r3, #12]
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	370c      	adds	r7, #12
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017caa:	4770      	bx	lr

08017cac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	689b      	ldr	r3, [r3, #8]
 8017cb8:	4618      	mov	r0, r3
 8017cba:	370c      	adds	r7, #12
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc2:	4770      	bx	lr

08017cc4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b082      	sub	sp, #8
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8017cce:	6839      	ldr	r1, [r7, #0]
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f000 f886 	bl	8017de2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8017cd6:	6839      	ldr	r1, [r7, #0]
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f000 f897 	bl	8017e0c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8017cde:	bf00      	nop
 8017ce0:	3708      	adds	r7, #8
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}

08017ce6 <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8017ce6:	b580      	push	{r7, lr}
 8017ce8:	b082      	sub	sp, #8
 8017cea:	af00      	add	r7, sp, #0
 8017cec:	6078      	str	r0, [r7, #4]
 8017cee:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8017cf0:	6839      	ldr	r1, [r7, #0]
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f000 f89c 	bl	8017e30 <_ZNSaImEC1ERKS_>
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	3708      	adds	r7, #8
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b082      	sub	sp, #8
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	6078      	str	r0, [r7, #4]
 8017d08:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8017d0a:	6839      	ldr	r1, [r7, #0]
 8017d0c:	6878      	ldr	r0, [r7, #4]
 8017d0e:	f000 f88f 	bl	8017e30 <_ZNSaImEC1ERKS_>
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7fb f850 	bl	8012dba <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	3708      	adds	r7, #8
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}

08017d24 <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b082      	sub	sp, #8
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8017d2e:	6839      	ldr	r1, [r7, #0]
 8017d30:	6878      	ldr	r0, [r7, #4]
 8017d32:	f000 f842 	bl	8017dba <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8017d36:	4602      	mov	r2, r0
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681a      	ldr	r2, [r3, #0]
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	681a      	ldr	r2, [r3, #0]
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	009b      	lsls	r3, r3, #2
 8017d4c:	441a      	add	r2, r3
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	609a      	str	r2, [r3, #8]
      }
 8017d52:	bf00      	nop
 8017d54:	3708      	adds	r7, #8
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8017d5a:	b480      	push	{r7}
 8017d5c:	b083      	sub	sp, #12
 8017d5e:	af00      	add	r7, sp, #0
 8017d60:	6078      	str	r0, [r7, #4]
 8017d62:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	681a      	ldr	r2, [r3, #0]
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	601a      	str	r2, [r3, #0]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	4618      	mov	r0, r3
 8017d70:	370c      	adds	r7, #12
 8017d72:	46bd      	mov	sp, r7
 8017d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d78:	4770      	bx	lr

08017d7a <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017d7a:	b580      	push	{r7, lr}
 8017d7c:	b086      	sub	sp, #24
 8017d7e:	af00      	add	r7, sp, #0
 8017d80:	60f8      	str	r0, [r7, #12]
 8017d82:	60b9      	str	r1, [r7, #8]
 8017d84:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017d86:	2301      	movs	r3, #1
 8017d88:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017d8a:	687a      	ldr	r2, [r7, #4]
 8017d8c:	68b9      	ldr	r1, [r7, #8]
 8017d8e:	68f8      	ldr	r0, [r7, #12]
 8017d90:	f000 f85c 	bl	8017e4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 8017d94:	4603      	mov	r3, r0
    }
 8017d96:	4618      	mov	r0, r3
 8017d98:	3718      	adds	r7, #24
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}

08017d9e <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8017d9e:	b580      	push	{r7, lr}
 8017da0:	b082      	sub	sp, #8
 8017da2:	af00      	add	r7, sp, #0
 8017da4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	3310      	adds	r3, #16
 8017daa:	4618      	mov	r0, r3
 8017dac:	f000 f85e 	bl	8017e6c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 8017db0:	4603      	mov	r3, r0
 8017db2:	4618      	mov	r0, r3
 8017db4:	3708      	adds	r7, #8
 8017db6:	46bd      	mov	sp, r7
 8017db8:	bd80      	pop	{r7, pc}

08017dba <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8017dba:	b580      	push	{r7, lr}
 8017dbc:	b082      	sub	sp, #8
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
 8017dc2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8017dc4:	683b      	ldr	r3, [r7, #0]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d006      	beq.n	8017dd8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	6839      	ldr	r1, [r7, #0]
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f000 f858 	bl	8017e84 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	e000      	b.n	8017dda <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8017dd8:	2300      	movs	r3, #0
      }
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8017de2:	b590      	push	{r4, r7, lr}
 8017de4:	b083      	sub	sp, #12
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	6078      	str	r0, [r7, #4]
 8017dea:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f000 f869 	bl	8017ec4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8017df2:	4604      	mov	r4, r0
 8017df4:	6838      	ldr	r0, [r7, #0]
 8017df6:	f7ff ffd2 	bl	8017d9e <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	4619      	mov	r1, r3
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f000 f86b 	bl	8017eda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8017e04:	bf00      	nop
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd90      	pop	{r4, r7, pc}

08017e0c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f000 f854 	bl	8017ec4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8017e1c:	4603      	mov	r3, r0
 8017e1e:	2201      	movs	r2, #1
 8017e20:	6839      	ldr	r1, [r7, #0]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f000 f865 	bl	8017ef2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 8017e28:	bf00      	nop
 8017e2a:	3708      	adds	r7, #8
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b082      	sub	sp, #8
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
 8017e38:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8017e3a:	6839      	ldr	r1, [r7, #0]
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	f000 f877 	bl	8017f30 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	4618      	mov	r0, r3
 8017e46:	3708      	adds	r7, #8
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}

08017e4c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b084      	sub	sp, #16
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	60f8      	str	r0, [r7, #12]
 8017e54:	60b9      	str	r1, [r7, #8]
 8017e56:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017e58:	687a      	ldr	r2, [r7, #4]
 8017e5a:	68b9      	ldr	r1, [r7, #8]
 8017e5c:	68f8      	ldr	r0, [r7, #12]
 8017e5e:	f000 f873 	bl	8017f48 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8017e62:	4603      	mov	r3, r0
 8017e64:	4618      	mov	r0, r3
 8017e66:	3710      	adds	r7, #16
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017e74:	6878      	ldr	r0, [r7, #4]
 8017e76:	f000 f87f 	bl	8017f78 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3708      	adds	r7, #8
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
 8017e8c:	6039      	str	r1, [r7, #0]
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	60fb      	str	r3, [r7, #12]
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8017e96:	f7f5 ffb1 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8017e9a:	4603      	mov	r3, r0
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d006      	beq.n	8017eae <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	009b      	lsls	r3, r3, #2
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 fb3b 	bl	8019520 <_Znwj>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	e006      	b.n	8017ebc <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8017eae:	2200      	movs	r2, #0
 8017eb0:	68b9      	ldr	r1, [r7, #8]
 8017eb2:	68f8      	ldr	r0, [r7, #12]
 8017eb4:	f000 f8a3 	bl	8017ffe <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	bf00      	nop
      { return __a.allocate(__n); }
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	3710      	adds	r7, #16
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}

08017ec4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017ec4:	b480      	push	{r7}
 8017ec6:	b083      	sub	sp, #12
 8017ec8:	af00      	add	r7, sp, #0
 8017eca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	370c      	adds	r7, #12
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed8:	4770      	bx	lr

08017eda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017eda:	b580      	push	{r7, lr}
 8017edc:	b082      	sub	sp, #8
 8017ede:	af00      	add	r7, sp, #0
 8017ee0:	6078      	str	r0, [r7, #4]
 8017ee2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017ee4:	6838      	ldr	r0, [r7, #0]
 8017ee6:	f000 f852 	bl	8017f8e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 8017eea:	bf00      	nop
 8017eec:	3708      	adds	r7, #8
 8017eee:	46bd      	mov	sp, r7
 8017ef0:	bd80      	pop	{r7, pc}

08017ef2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017ef2:	b580      	push	{r7, lr}
 8017ef4:	b088      	sub	sp, #32
 8017ef6:	af00      	add	r7, sp, #0
 8017ef8:	60f8      	str	r0, [r7, #12]
 8017efa:	60b9      	str	r1, [r7, #8]
 8017efc:	607a      	str	r2, [r7, #4]
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	61fb      	str	r3, [r7, #28]
 8017f02:	68bb      	ldr	r3, [r7, #8]
 8017f04:	61bb      	str	r3, [r7, #24]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8017f0a:	f7f5 ff77 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d003      	beq.n	8017f1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8017f14:	69b8      	ldr	r0, [r7, #24]
 8017f16:	f001 faff 	bl	8019518 <_ZdlPv>
	    return;
 8017f1a:	e005      	b.n	8017f28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8017f1c:	697a      	ldr	r2, [r7, #20]
 8017f1e:	69b9      	ldr	r1, [r7, #24]
 8017f20:	69f8      	ldr	r0, [r7, #28]
 8017f22:	f000 f896 	bl	8018052 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8017f26:	bf00      	nop
 8017f28:	bf00      	nop
 8017f2a:	3720      	adds	r7, #32
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}

08017f30 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8017f30:	b480      	push	{r7}
 8017f32:	b083      	sub	sp, #12
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	6039      	str	r1, [r7, #0]
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	4618      	mov	r0, r3
 8017f3e:	370c      	adds	r7, #12
 8017f40:	46bd      	mov	sp, r7
 8017f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f46:	4770      	bx	lr

08017f48 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8017f48:	b590      	push	{r4, r7, lr}
 8017f4a:	b085      	sub	sp, #20
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	60f8      	str	r0, [r7, #12]
 8017f50:	60b9      	str	r1, [r7, #8]
 8017f52:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017f54:	68f8      	ldr	r0, [r7, #12]
 8017f56:	f000 f824 	bl	8017fa2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	68b8      	ldr	r0, [r7, #8]
 8017f5e:	f000 f820 	bl	8017fa2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8017f62:	4603      	mov	r3, r0
 8017f64:	687a      	ldr	r2, [r7, #4]
 8017f66:	4619      	mov	r1, r3
 8017f68:	4620      	mov	r0, r4
 8017f6a:	f000 f825 	bl	8017fb8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 8017f6e:	4603      	mov	r3, r0
    }
 8017f70:	4618      	mov	r0, r3
 8017f72:	3714      	adds	r7, #20
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd90      	pop	{r4, r7, pc}

08017f78 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8017f78:	b480      	push	{r7}
 8017f7a:	b083      	sub	sp, #12
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	4618      	mov	r0, r3
 8017f84:	370c      	adds	r7, #12
 8017f86:	46bd      	mov	sp, r7
 8017f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8c:	4770      	bx	lr

08017f8e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017f8e:	b480      	push	{r7}
 8017f90:	b083      	sub	sp, #12
 8017f92:	af00      	add	r7, sp, #0
 8017f94:	6078      	str	r0, [r7, #4]
    }
 8017f96:	bf00      	nop
 8017f98:	370c      	adds	r7, #12
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa0:	4770      	bx	lr

08017fa2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8017fa2:	b480      	push	{r7}
 8017fa4:	b083      	sub	sp, #12
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	4618      	mov	r0, r3
 8017fae:	370c      	adds	r7, #12
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb6:	4770      	bx	lr

08017fb8 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017fb8:	b5b0      	push	{r4, r5, r7, lr}
 8017fba:	b084      	sub	sp, #16
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	60f8      	str	r0, [r7, #12]
 8017fc0:	60b9      	str	r1, [r7, #8]
 8017fc2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017fc4:	68f8      	ldr	r0, [r7, #12]
 8017fc6:	f000 f853 	bl	8018070 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8017fca:	4604      	mov	r4, r0
 8017fcc:	68b8      	ldr	r0, [r7, #8]
 8017fce:	f000 f84f 	bl	8018070 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8017fd2:	4605      	mov	r5, r0
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	f000 f830 	bl	801803c <_ZSt12__niter_baseIPmET_S1_>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	461a      	mov	r2, r3
 8017fe0:	4629      	mov	r1, r5
 8017fe2:	4620      	mov	r0, r4
 8017fe4:	f000 f852 	bl	801808c <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 8017fe8:	4602      	mov	r2, r0
 8017fea:	1d3b      	adds	r3, r7, #4
 8017fec:	4611      	mov	r1, r2
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f000 f85c 	bl	80180ac <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 8017ff4:	4603      	mov	r3, r0
    }
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3710      	adds	r7, #16
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bdb0      	pop	{r4, r5, r7, pc}

08017ffe <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017ffe:	b580      	push	{r7, lr}
 8018000:	b084      	sub	sp, #16
 8018002:	af00      	add	r7, sp, #0
 8018004:	60f8      	str	r0, [r7, #12]
 8018006:	60b9      	str	r1, [r7, #8]
 8018008:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801800a:	68f8      	ldr	r0, [r7, #12]
 801800c:	f000 f85a 	bl	80180c4 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 8018010:	4602      	mov	r2, r0
 8018012:	68bb      	ldr	r3, [r7, #8]
 8018014:	4293      	cmp	r3, r2
 8018016:	bf8c      	ite	hi
 8018018:	2301      	movhi	r3, #1
 801801a:	2300      	movls	r3, #0
 801801c:	b2db      	uxtb	r3, r3
 801801e:	2b00      	cmp	r3, #0
 8018020:	d001      	beq.n	8018026 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018022:	f001 fb41 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	4618      	mov	r0, r3
 801802c:	f001 fa78 	bl	8019520 <_Znwj>
 8018030:	4603      	mov	r3, r0
 8018032:	bf00      	nop
      }
 8018034:	4618      	mov	r0, r3
 8018036:	3710      	adds	r7, #16
 8018038:	46bd      	mov	sp, r7
 801803a:	bd80      	pop	{r7, pc}

0801803c <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 801803c:	b480      	push	{r7}
 801803e:	b083      	sub	sp, #12
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
    { return __it; }
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	4618      	mov	r0, r3
 8018048:	370c      	adds	r7, #12
 801804a:	46bd      	mov	sp, r7
 801804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018050:	4770      	bx	lr

08018052 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8018052:	b580      	push	{r7, lr}
 8018054:	b084      	sub	sp, #16
 8018056:	af00      	add	r7, sp, #0
 8018058:	60f8      	str	r0, [r7, #12]
 801805a:	60b9      	str	r1, [r7, #8]
 801805c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	015b      	lsls	r3, r3, #5
 8018062:	4619      	mov	r1, r3
 8018064:	68b8      	ldr	r0, [r7, #8]
 8018066:	f001 fa59 	bl	801951c <_ZdlPvj>
      }
 801806a:	3710      	adds	r7, #16
 801806c:	46bd      	mov	sp, r7
 801806e:	bd80      	pop	{r7, pc}

08018070 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8018070:	b580      	push	{r7, lr}
 8018072:	b082      	sub	sp, #8
 8018074:	af00      	add	r7, sp, #0
 8018076:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8018078:	1d3b      	adds	r3, r7, #4
 801807a:	4618      	mov	r0, r3
 801807c:	f000 f82e 	bl	80180dc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 8018080:	4603      	mov	r3, r0
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	4618      	mov	r0, r3
 8018086:	3708      	adds	r7, #8
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801808c:	b580      	push	{r7, lr}
 801808e:	b084      	sub	sp, #16
 8018090:	af00      	add	r7, sp, #0
 8018092:	60f8      	str	r0, [r7, #12]
 8018094:	60b9      	str	r1, [r7, #8]
 8018096:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8018098:	687a      	ldr	r2, [r7, #4]
 801809a:	68b9      	ldr	r1, [r7, #8]
 801809c:	68f8      	ldr	r0, [r7, #12]
 801809e:	f000 f828 	bl	80180f2 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 80180a2:	4603      	mov	r3, r0
 80180a4:	4618      	mov	r0, r3
 80180a6:	3710      	adds	r7, #16
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bd80      	pop	{r7, pc}

080180ac <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80180ac:	b480      	push	{r7}
 80180ae:	b083      	sub	sp, #12
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
 80180b4:	6039      	str	r1, [r7, #0]
    { return __res; }
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	4618      	mov	r0, r3
 80180ba:	370c      	adds	r7, #12
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr

080180c4 <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80180c4:	b480      	push	{r7}
 80180c6:	b083      	sub	sp, #12
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80180cc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80180d0:	4618      	mov	r0, r3
 80180d2:	370c      	adds	r7, #12
 80180d4:	46bd      	mov	sp, r7
 80180d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180da:	4770      	bx	lr

080180dc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80180dc:	b480      	push	{r7}
 80180de:	b083      	sub	sp, #12
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	4618      	mov	r0, r3
 80180e8:	370c      	adds	r7, #12
 80180ea:	46bd      	mov	sp, r7
 80180ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f0:	4770      	bx	lr

080180f2 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80180f2:	b580      	push	{r7, lr}
 80180f4:	b084      	sub	sp, #16
 80180f6:	af00      	add	r7, sp, #0
 80180f8:	60f8      	str	r0, [r7, #12]
 80180fa:	60b9      	str	r1, [r7, #8]
 80180fc:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 80180fe:	f7f5 fe7d 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8018102:	4603      	mov	r3, r0
 8018104:	2b00      	cmp	r3, #0
 8018106:	d006      	beq.n	8018116 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8018108:	687a      	ldr	r2, [r7, #4]
 801810a:	68b9      	ldr	r1, [r7, #8]
 801810c:	68f8      	ldr	r0, [r7, #12]
 801810e:	f000 f80d 	bl	801812c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 8018112:	4603      	mov	r3, r0
 8018114:	e006      	b.n	8018124 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8018116:	687a      	ldr	r2, [r7, #4]
 8018118:	68b9      	ldr	r1, [r7, #8]
 801811a:	68f8      	ldr	r0, [r7, #12]
 801811c:	f000 f829 	bl	8018172 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8018120:	4603      	mov	r3, r0
 8018122:	bf00      	nop
    }
 8018124:	4618      	mov	r0, r3
 8018126:	3710      	adds	r7, #16
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801812c:	b480      	push	{r7}
 801812e:	b087      	sub	sp, #28
 8018130:	af00      	add	r7, sp, #0
 8018132:	60f8      	str	r0, [r7, #12]
 8018134:	60b9      	str	r1, [r7, #8]
 8018136:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8018138:	68ba      	ldr	r2, [r7, #8]
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	1ad3      	subs	r3, r2, r3
 801813e:	109b      	asrs	r3, r3, #2
 8018140:	617b      	str	r3, [r7, #20]
 8018142:	697b      	ldr	r3, [r7, #20]
 8018144:	2b00      	cmp	r3, #0
 8018146:	dd0d      	ble.n	8018164 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 8018148:	68fb      	ldr	r3, [r7, #12]
 801814a:	681a      	ldr	r2, [r3, #0]
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	601a      	str	r2, [r3, #0]
	      ++__first;
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	3304      	adds	r3, #4
 8018154:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	3304      	adds	r3, #4
 801815a:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	3b01      	subs	r3, #1
 8018160:	617b      	str	r3, [r7, #20]
 8018162:	e7ee      	b.n	8018142 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 8018164:	687b      	ldr	r3, [r7, #4]
	}
 8018166:	4618      	mov	r0, r3
 8018168:	371c      	adds	r7, #28
 801816a:	46bd      	mov	sp, r7
 801816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018170:	4770      	bx	lr

08018172 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8018172:	b580      	push	{r7, lr}
 8018174:	b086      	sub	sp, #24
 8018176:	af00      	add	r7, sp, #0
 8018178:	60f8      	str	r0, [r7, #12]
 801817a:	60b9      	str	r1, [r7, #8]
 801817c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801817e:	68ba      	ldr	r2, [r7, #8]
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	1ad3      	subs	r3, r2, r3
 8018184:	109b      	asrs	r3, r3, #2
 8018186:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8018188:	697b      	ldr	r3, [r7, #20]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d006      	beq.n	801819c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801818e:	697b      	ldr	r3, [r7, #20]
 8018190:	009b      	lsls	r3, r3, #2
 8018192:	461a      	mov	r2, r3
 8018194:	68f9      	ldr	r1, [r7, #12]
 8018196:	6878      	ldr	r0, [r7, #4]
 8018198:	f001 fae8 	bl	801976c <memmove>
	  return __result + _Num;
 801819c:	697b      	ldr	r3, [r7, #20]
 801819e:	009b      	lsls	r3, r3, #2
 80181a0:	687a      	ldr	r2, [r7, #4]
 80181a2:	4413      	add	r3, r2
	}
 80181a4:	4618      	mov	r0, r3
 80181a6:	3718      	adds	r7, #24
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <_Z41__static_initialization_and_destruction_0ii>:
	  	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
	  		  //TODO: Error handler
	  	  }
	  	  counter++;
	  }
}
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b0c6      	sub	sp, #280	; 0x118
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80181ba:	6018      	str	r0, [r3, #0]
 80181bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80181c4:	6019      	str	r1, [r3, #0]
 80181c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d142      	bne.n	801825a <_Z41__static_initialization_and_destruction_0ii+0xae>
 80181d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80181e2:	4293      	cmp	r3, r2
 80181e4:	d139      	bne.n	801825a <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80181e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80181ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80181ee:	4a28      	ldr	r2, [pc, #160]	; (8018290 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80181f0:	4618      	mov	r0, r3
 80181f2:	4611      	mov	r1, r2
 80181f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80181f8:	461a      	mov	r2, r3
 80181fa:	f001 faa9 	bl	8019750 <memcpy>
 80181fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018202:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8018206:	f107 0214 	add.w	r2, r7, #20
 801820a:	601a      	str	r2, [r3, #0]
 801820c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8018214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018218:	605a      	str	r2, [r3, #4]
 801821a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801821e:	4618      	mov	r0, r3
 8018220:	f7f7 f88a 	bl	800f338 <_ZNSaIhEC1Ev>
 8018224:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8018228:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801822c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8018230:	ca06      	ldmia	r2, {r1, r2}
 8018232:	4818      	ldr	r0, [pc, #96]	; (8018294 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8018234:	f7f7 f897 	bl	800f366 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8018238:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801823c:	4618      	mov	r0, r3
 801823e:	f7f7 f887 	bl	800f350 <_ZNSaIhED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = {};
 8018242:	4b15      	ldr	r3, [pc, #84]	; (8018298 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8018244:	461a      	mov	r2, r3
 8018246:	2300      	movs	r3, #0
 8018248:	6013      	str	r3, [r2, #0]
 801824a:	6053      	str	r3, [r2, #4]
 801824c:	6093      	str	r3, [r2, #8]
 801824e:	60d3      	str	r3, [r2, #12]
 8018250:	6113      	str	r3, [r2, #16]
 8018252:	6153      	str	r3, [r2, #20]
 8018254:	4810      	ldr	r0, [pc, #64]	; (8018298 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8018256:	f7ff fb70 	bl	801793a <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 801825a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801825e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	2b00      	cmp	r3, #0
 8018266:	d10e      	bne.n	8018286 <_Z41__static_initialization_and_destruction_0ii+0xda>
 8018268:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801826c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018276:	4293      	cmp	r3, r2
 8018278:	d105      	bne.n	8018286 <_Z41__static_initialization_and_destruction_0ii+0xda>
 801827a:	4807      	ldr	r0, [pc, #28]	; (8018298 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801827c:	f7ff fb6a 	bl	8017954 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8018280:	4804      	ldr	r0, [pc, #16]	; (8018294 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8018282:	f7f7 f89e 	bl	800f3c2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8018286:	bf00      	nop
 8018288:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	08019db0 	.word	0x08019db0
 8018294:	240011bc 	.word	0x240011bc
 8018298:	240011c0 	.word	0x240011c0

0801829c <_GLOBAL__sub_I__ZN3ADC10id_managerE>:
 801829c:	b580      	push	{r7, lr}
 801829e:	af00      	add	r7, sp, #0
 80182a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80182a4:	2001      	movs	r0, #1
 80182a6:	f7ff ff81 	bl	80181ac <_Z41__static_initialization_and_destruction_0ii>
 80182aa:	bd80      	pop	{r7, pc}

080182ac <_GLOBAL__sub_D__ZN3ADC10id_managerE>:
 80182ac:	b580      	push	{r7, lr}
 80182ae:	af00      	add	r7, sp, #0
 80182b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80182b4:	2000      	movs	r0, #0
 80182b6:	f7ff ff79 	bl	80181ac <_Z41__static_initialization_and_destruction_0ii>
 80182ba:	bd80      	pop	{r7, pc}

080182bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6878      	ldr	r0, [r7, #4]
 80182c6:	f000 f86d 	bl	80183a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	4618      	mov	r0, r3
 80182ce:	3708      	adds	r7, #8
 80182d0:	46bd      	mov	sp, r7
 80182d2:	bd80      	pop	{r7, pc}

080182d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	4618      	mov	r0, r3
 80182e0:	f000 f84b 	bl	801837a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	4618      	mov	r0, r3
 80182e8:	3708      	adds	r7, #8
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}

080182ee <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 80182ee:	b580      	push	{r7, lr}
 80182f0:	b082      	sub	sp, #8
 80182f2:	af00      	add	r7, sp, #0
 80182f4:	6078      	str	r0, [r7, #4]
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7ff ffeb 	bl	80182d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	4618      	mov	r0, r3
 8018302:	3708      	adds	r7, #8
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}

08018308 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	4618      	mov	r0, r3
 8018314:	f000 f851 	bl	80183ba <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	4618      	mov	r0, r3
 801831c:	3708      	adds	r7, #8
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}

08018322 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 8018322:	b580      	push	{r7, lr}
 8018324:	b082      	sub	sp, #8
 8018326:	af00      	add	r7, sp, #0
 8018328:	6078      	str	r0, [r7, #4]
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	4618      	mov	r0, r3
 801832e:	f000 f8ac 	bl	801848a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	4618      	mov	r0, r3
 8018336:	3708      	adds	r7, #8
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TIM_HandleTypeDef* timer, uint32_t channel_rising, uint32_t channel_falling) :
 801833c:	b480      	push	{r7}
 801833e:	b085      	sub	sp, #20
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	1d38      	adds	r0, r7, #4
 8018346:	e880 0006 	stmia.w	r0, {r1, r2}
 801834a:	603b      	str	r3, [r7, #0]
	pin(pin),
	timer(timer),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	3304      	adds	r3, #4
 8018350:	1d3a      	adds	r2, r7, #4
 8018352:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018356:	e883 0003 	stmia.w	r3, {r0, r1}
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	683a      	ldr	r2, [r7, #0]
 801835e:	60da      	str	r2, [r3, #12]
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	69ba      	ldr	r2, [r7, #24]
 8018364:	611a      	str	r2, [r3, #16]
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	69fa      	ldr	r2, [r7, #28]
 801836a:	615a      	str	r2, [r3, #20]
	{ }
 801836c:	68fb      	ldr	r3, [r7, #12]
 801836e:	4618      	mov	r0, r3
 8018370:	3714      	adds	r7, #20
 8018372:	46bd      	mov	sp, r7
 8018374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018378:	4770      	bx	lr

0801837a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801837a:	b580      	push	{r7, lr}
 801837c:	b082      	sub	sp, #8
 801837e:	af00      	add	r7, sp, #0
 8018380:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8018382:	6878      	ldr	r0, [r7, #4]
 8018384:	f000 f896 	bl	80184b4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	4618      	mov	r0, r3
 801838c:	f7f7 fb69 	bl	800fa62 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	3304      	adds	r3, #4
 8018394:	4618      	mov	r0, r3
 8018396:	f7f6 fdff 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	4618      	mov	r0, r3
 801839e:	3708      	adds	r7, #8
 80183a0:	46bd      	mov	sp, r7
 80183a2:	bd80      	pop	{r7, pc}

080183a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80183a4:	b480      	push	{r7}
 80183a6:	b083      	sub	sp, #12
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	4618      	mov	r0, r3
 80183b0:	370c      	adds	r7, #12
 80183b2:	46bd      	mov	sp, r7
 80183b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b8:	4770      	bx	lr

080183ba <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80183ba:	b580      	push	{r7, lr}
 80183bc:	b082      	sub	sp, #8
 80183be:	af00      	add	r7, sp, #0
 80183c0:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80183c2:	6878      	ldr	r0, [r7, #4]
 80183c4:	f000 f8a1 	bl	801850a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80183c8:	4603      	mov	r3, r0
 80183ca:	4619      	mov	r1, r3
 80183cc:	6878      	ldr	r0, [r7, #4]
 80183ce:	f000 f87d 	bl	80184cc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	4618      	mov	r0, r3
 80183d6:	f7ff ff71 	bl	80182bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	4618      	mov	r0, r3
 80183de:	3708      	adds	r7, #8
 80183e0:	46bd      	mov	sp, r7
 80183e2:	bd80      	pop	{r7, pc}

080183e4 <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f000 f898 	bl	8018522 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	4618      	mov	r0, r3
 80183f6:	3708      	adds	r7, #8
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd80      	pop	{r7, pc}

080183fc <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80183fc:	b480      	push	{r7}
 80183fe:	b083      	sub	sp, #12
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	4618      	mov	r0, r3
 8018408:	370c      	adds	r7, #12
 801840a:	46bd      	mov	sp, r7
 801840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018410:	4770      	bx	lr

08018412 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 8018412:	b5b0      	push	{r4, r5, r7, lr}
 8018414:	b086      	sub	sp, #24
 8018416:	af00      	add	r7, sp, #0
 8018418:	60f8      	str	r0, [r7, #12]
 801841a:	1d38      	adds	r0, r7, #4
 801841c:	e880 0006 	stmia.w	r0, {r1, r2}
 8018420:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8018422:	68fc      	ldr	r4, [r7, #12]
 8018424:	f107 0314 	add.w	r3, r7, #20
 8018428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801842a:	4618      	mov	r0, r3
 801842c:	f000 f884 	bl	8018538 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 8018430:	f107 0314 	add.w	r3, r7, #20
 8018434:	461a      	mov	r2, r3
 8018436:	6839      	ldr	r1, [r7, #0]
 8018438:	4620      	mov	r0, r4
 801843a:	f000 f88b 	bl	8018554 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 801843e:	f107 0314 	add.w	r3, r7, #20
 8018442:	4618      	mov	r0, r3
 8018444:	f7ff ffda 	bl	80183fc <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8018448:	68fc      	ldr	r4, [r7, #12]
 801844a:	1d3b      	adds	r3, r7, #4
 801844c:	4618      	mov	r0, r3
 801844e:	f000 f89f 	bl	8018590 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 8018452:	4605      	mov	r5, r0
 8018454:	1d3b      	adds	r3, r7, #4
 8018456:	4618      	mov	r0, r3
 8018458:	f000 f8a6 	bl	80185a8 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 801845c:	4603      	mov	r3, r0
 801845e:	461a      	mov	r2, r3
 8018460:	4629      	mov	r1, r5
 8018462:	4620      	mov	r0, r4
 8018464:	f000 f8b2 	bl	80185cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	4618      	mov	r0, r3
 801846c:	3718      	adds	r7, #24
 801846e:	46bd      	mov	sp, r7
 8018470:	bdb0      	pop	{r4, r5, r7, pc}

08018472 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8018472:	b580      	push	{r7, lr}
 8018474:	b082      	sub	sp, #8
 8018476:	af00      	add	r7, sp, #0
 8018478:	6078      	str	r0, [r7, #4]
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f000 f8d2 	bl	8018624 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	4618      	mov	r0, r3
 8018484:	3708      	adds	r7, #8
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}

0801848a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801848a:	b580      	push	{r7, lr}
 801848c:	b082      	sub	sp, #8
 801848e:	af00      	add	r7, sp, #0
 8018490:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8018492:	6878      	ldr	r0, [r7, #4]
 8018494:	f000 f8f0 	bl	8018678 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8018498:	4603      	mov	r3, r0
 801849a:	4619      	mov	r1, r3
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f000 f8cc 	bl	801863a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7ff ffe4 	bl	8018472 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	4618      	mov	r0, r3
 80184ae:	3708      	adds	r7, #8
 80184b0:	46bd      	mov	sp, r7
 80184b2:	bd80      	pop	{r7, pc}

080184b4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b082      	sub	sp, #8
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	6078      	str	r0, [r7, #4]
 80184bc:	6878      	ldr	r0, [r7, #4]
 80184be:	f000 f92e 	bl	801871e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	4618      	mov	r0, r3
 80184c6:	3708      	adds	r7, #8
 80184c8:	46bd      	mov	sp, r7
 80184ca:	bd80      	pop	{r7, pc}

080184cc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80184d6:	683b      	ldr	r3, [r7, #0]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d012      	beq.n	8018502 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 80184dc:	6838      	ldr	r0, [r7, #0]
 80184de:	f000 f929 	bl	8018734 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80184e2:	4603      	mov	r3, r0
 80184e4:	4619      	mov	r1, r3
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f7ff fff0 	bl	80184cc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 80184ec:	6838      	ldr	r0, [r7, #0]
 80184ee:	f000 f92d 	bl	801874c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80184f2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80184f4:	6839      	ldr	r1, [r7, #0]
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f000 f934 	bl	8018764 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8018500:	e7e9      	b.n	80184d6 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8018502:	bf00      	nop
 8018504:	3710      	adds	r7, #16
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}

0801850a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801850a:	b480      	push	{r7}
 801850c:	b083      	sub	sp, #12
 801850e:	af00      	add	r7, sp, #0
 8018510:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	689b      	ldr	r3, [r3, #8]
 8018516:	4618      	mov	r0, r3
 8018518:	370c      	adds	r7, #12
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr

08018522 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018522:	b480      	push	{r7}
 8018524:	b083      	sub	sp, #12
 8018526:	af00      	add	r7, sp, #0
 8018528:	6078      	str	r0, [r7, #4]
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	4618      	mov	r0, r3
 801852e:	370c      	adds	r7, #12
 8018530:	46bd      	mov	sp, r7
 8018532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018536:	4770      	bx	lr

08018538 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8018542:	6839      	ldr	r1, [r7, #0]
 8018544:	6878      	ldr	r0, [r7, #4]
 8018546:	f000 f91e 	bl	8018786 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	4618      	mov	r0, r3
 801854e:	3708      	adds	r7, #8
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}

08018554 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 8018554:	b590      	push	{r4, r7, lr}
 8018556:	b087      	sub	sp, #28
 8018558:	af00      	add	r7, sp, #0
 801855a:	60f8      	str	r0, [r7, #12]
 801855c:	60b9      	str	r1, [r7, #8]
 801855e:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8018560:	68fc      	ldr	r4, [r7, #12]
 8018562:	f107 0314 	add.w	r3, r7, #20
 8018566:	6879      	ldr	r1, [r7, #4]
 8018568:	4618      	mov	r0, r3
 801856a:	f000 f918 	bl	801879e <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 801856e:	f107 0314 	add.w	r3, r7, #20
 8018572:	461a      	mov	r2, r3
 8018574:	68b9      	ldr	r1, [r7, #8]
 8018576:	4620      	mov	r0, r4
 8018578:	f000 f91e 	bl	80187b8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 801857c:	f107 0314 	add.w	r3, r7, #20
 8018580:	4618      	mov	r0, r3
 8018582:	f000 f84f 	bl	8018624 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	4618      	mov	r0, r3
 801858a:	371c      	adds	r7, #28
 801858c:	46bd      	mov	sp, r7
 801858e:	bd90      	pop	{r4, r7, pc}

08018590 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8018590:	b480      	push	{r7}
 8018592:	b083      	sub	sp, #12
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	4618      	mov	r0, r3
 801859e:	370c      	adds	r7, #12
 80185a0:	46bd      	mov	sp, r7
 80185a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a6:	4770      	bx	lr

080185a8 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80185a8:	b590      	push	{r4, r7, lr}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7ff ffed 	bl	8018590 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 80185b6:	4604      	mov	r4, r0
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f000 f91a 	bl	80187f2 <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 80185be:	4603      	mov	r3, r0
 80185c0:	00db      	lsls	r3, r3, #3
 80185c2:	4423      	add	r3, r4
 80185c4:	4618      	mov	r0, r3
 80185c6:	370c      	adds	r7, #12
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd90      	pop	{r4, r7, pc}

080185cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b088      	sub	sp, #32
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80185d8:	f107 0314 	add.w	r3, r7, #20
 80185dc:	68f9      	ldr	r1, [r7, #12]
 80185de:	4618      	mov	r0, r3
 80185e0:	f000 f913 	bl	801880a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 80185e4:	68ba      	ldr	r2, [r7, #8]
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	429a      	cmp	r2, r3
 80185ea:	d017      	beq.n	801861c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80185ec:	68f8      	ldr	r0, [r7, #12]
 80185ee:	f000 f91b 	bl	8018828 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 80185f2:	4603      	mov	r3, r0
 80185f4:	61fb      	str	r3, [r7, #28]
 80185f6:	f107 021c 	add.w	r2, r7, #28
 80185fa:	f107 0318 	add.w	r3, r7, #24
 80185fe:	4611      	mov	r1, r2
 8018600:	4618      	mov	r0, r3
 8018602:	f000 f87c 	bl	80186fe <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 8018606:	f107 0314 	add.w	r3, r7, #20
 801860a:	68ba      	ldr	r2, [r7, #8]
 801860c:	69b9      	ldr	r1, [r7, #24]
 801860e:	68f8      	ldr	r0, [r7, #12]
 8018610:	f000 f91b 	bl	801884a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8018614:	68bb      	ldr	r3, [r7, #8]
 8018616:	3308      	adds	r3, #8
 8018618:	60bb      	str	r3, [r7, #8]
 801861a:	e7e3      	b.n	80185e4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 801861c:	bf00      	nop
 801861e:	3720      	adds	r7, #32
 8018620:	46bd      	mov	sp, r7
 8018622:	bd80      	pop	{r7, pc}

08018624 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018624:	b480      	push	{r7}
 8018626:	b083      	sub	sp, #12
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	4618      	mov	r0, r3
 8018630:	370c      	adds	r7, #12
 8018632:	46bd      	mov	sp, r7
 8018634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018638:	4770      	bx	lr

0801863a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801863a:	b580      	push	{r7, lr}
 801863c:	b084      	sub	sp, #16
 801863e:	af00      	add	r7, sp, #0
 8018640:	6078      	str	r0, [r7, #4]
 8018642:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8018644:	683b      	ldr	r3, [r7, #0]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d012      	beq.n	8018670 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 801864a:	6838      	ldr	r0, [r7, #0]
 801864c:	f000 f930 	bl	80188b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8018650:	4603      	mov	r3, r0
 8018652:	4619      	mov	r1, r3
 8018654:	6878      	ldr	r0, [r7, #4]
 8018656:	f7ff fff0 	bl	801863a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 801865a:	6838      	ldr	r0, [r7, #0]
 801865c:	f000 f934 	bl	80188c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8018660:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8018662:	6839      	ldr	r1, [r7, #0]
 8018664:	6878      	ldr	r0, [r7, #4]
 8018666:	f000 f93b 	bl	80188e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801866e:	e7e9      	b.n	8018644 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 8018670:	bf00      	nop
 8018672:	3710      	adds	r7, #16
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}

08018678 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8018678:	b480      	push	{r7}
 801867a:	b083      	sub	sp, #12
 801867c:	af00      	add	r7, sp, #0
 801867e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	689b      	ldr	r3, [r3, #8]
 8018684:	4618      	mov	r0, r3
 8018686:	370c      	adds	r7, #12
 8018688:	46bd      	mov	sp, r7
 801868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868e:	4770      	bx	lr

08018690 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	3310      	adds	r3, #16
 801869c:	4618      	mov	r0, r3
 801869e:	f000 f930 	bl	8018902 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 80186a2:	4603      	mov	r3, r0
 80186a4:	4618      	mov	r0, r3
 80186a6:	3708      	adds	r7, #8
 80186a8:	46bd      	mov	sp, r7
 80186aa:	bd80      	pop	{r7, pc}

080186ac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	681a      	ldr	r2, [r3, #0]
 80186ba:	683b      	ldr	r3, [r7, #0]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	429a      	cmp	r2, r3
 80186c0:	bf0c      	ite	eq
 80186c2:	2301      	moveq	r3, #1
 80186c4:	2300      	movne	r3, #0
 80186c6:	b2db      	uxtb	r3, r3
 80186c8:	4618      	mov	r0, r3
 80186ca:	370c      	adds	r7, #12
 80186cc:	46bd      	mov	sp, r7
 80186ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d2:	4770      	bx	lr

080186d4 <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80186d4:	b480      	push	{r7}
 80186d6:	b085      	sub	sp, #20
 80186d8:	af00      	add	r7, sp, #0
 80186da:	60f8      	str	r0, [r7, #12]
 80186dc:	60b9      	str	r1, [r7, #8]
 80186de:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	681a      	ldr	r2, [r3, #0]
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	429a      	cmp	r2, r3
 80186ea:	bf34      	ite	cc
 80186ec:	2301      	movcc	r3, #1
 80186ee:	2300      	movcs	r3, #0
 80186f0:	b2db      	uxtb	r3, r3
 80186f2:	4618      	mov	r0, r3
 80186f4:	3714      	adds	r7, #20
 80186f6:	46bd      	mov	sp, r7
 80186f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fc:	4770      	bx	lr

080186fe <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80186fe:	b480      	push	{r7}
 8018700:	b083      	sub	sp, #12
 8018702:	af00      	add	r7, sp, #0
 8018704:	6078      	str	r0, [r7, #4]
 8018706:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	681a      	ldr	r2, [r3, #0]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	601a      	str	r2, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	4618      	mov	r0, r3
 8018714:	370c      	adds	r7, #12
 8018716:	46bd      	mov	sp, r7
 8018718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871c:	4770      	bx	lr

0801871e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 801871e:	b480      	push	{r7}
 8018720:	b083      	sub	sp, #12
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	4618      	mov	r0, r3
 801872a:	370c      	adds	r7, #12
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8018734:	b480      	push	{r7}
 8018736:	b083      	sub	sp, #12
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	68db      	ldr	r3, [r3, #12]
 8018740:	4618      	mov	r0, r3
 8018742:	370c      	adds	r7, #12
 8018744:	46bd      	mov	sp, r7
 8018746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801874a:	4770      	bx	lr

0801874c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801874c:	b480      	push	{r7}
 801874e:	b083      	sub	sp, #12
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	689b      	ldr	r3, [r3, #8]
 8018758:	4618      	mov	r0, r3
 801875a:	370c      	adds	r7, #12
 801875c:	46bd      	mov	sp, r7
 801875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018762:	4770      	bx	lr

08018764 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
 801876c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801876e:	6839      	ldr	r1, [r7, #0]
 8018770:	6878      	ldr	r0, [r7, #4]
 8018772:	f000 fa25 	bl	8018bc0 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8018776:	6839      	ldr	r1, [r7, #0]
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f000 fa36 	bl	8018bea <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 801877e:	bf00      	nop
 8018780:	3708      	adds	r7, #8
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}

08018786 <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8018786:	b480      	push	{r7}
 8018788:	b083      	sub	sp, #12
 801878a:	af00      	add	r7, sp, #0
 801878c:	6078      	str	r0, [r7, #4]
 801878e:	6039      	str	r1, [r7, #0]
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	4618      	mov	r0, r3
 8018794:	370c      	adds	r7, #12
 8018796:	46bd      	mov	sp, r7
 8018798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879c:	4770      	bx	lr

0801879e <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801879e:	b580      	push	{r7, lr}
 80187a0:	b082      	sub	sp, #8
 80187a2:	af00      	add	r7, sp, #0
 80187a4:	6078      	str	r0, [r7, #4]
 80187a6:	6039      	str	r1, [r7, #0]
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f000 fa30 	bl	8018c0e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	4618      	mov	r0, r3
 80187b2:	3708      	adds	r7, #8
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}

080187b8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b084      	sub	sp, #16
 80187bc:	af00      	add	r7, sp, #0
 80187be:	60f8      	str	r0, [r7, #12]
 80187c0:	60b9      	str	r1, [r7, #8]
 80187c2:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f000 fa2d 	bl	8018c24 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 80187ca:	4603      	mov	r3, r0
 80187cc:	4619      	mov	r1, r3
 80187ce:	68f8      	ldr	r0, [r7, #12]
 80187d0:	f000 fa33 	bl	8018c3a <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	68b9      	ldr	r1, [r7, #8]
 80187d8:	4618      	mov	r0, r3
 80187da:	f000 fa3c 	bl	8018c56 <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	3304      	adds	r3, #4
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f6 fbd8 	bl	800ef98 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	4618      	mov	r0, r3
 80187ec:	3710      	adds	r7, #16
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}

080187f2 <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80187f2:	b480      	push	{r7}
 80187f4:	b083      	sub	sp, #12
 80187f6:	af00      	add	r7, sp, #0
 80187f8:	6078      	str	r0, [r7, #4]
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	685b      	ldr	r3, [r3, #4]
 80187fe:	4618      	mov	r0, r3
 8018800:	370c      	adds	r7, #12
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr

0801880a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 801880a:	b480      	push	{r7}
 801880c:	b083      	sub	sp, #12
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
 8018812:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	683a      	ldr	r2, [r7, #0]
 8018818:	601a      	str	r2, [r3, #0]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	4618      	mov	r0, r3
 801881e:	370c      	adds	r7, #12
 8018820:	46bd      	mov	sp, r7
 8018822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018826:	4770      	bx	lr

08018828 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8018828:	b580      	push	{r7, lr}
 801882a:	b084      	sub	sp, #16
 801882c:	af00      	add	r7, sp, #0
 801882e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	1d1a      	adds	r2, r3, #4
 8018834:	f107 030c 	add.w	r3, r7, #12
 8018838:	4611      	mov	r1, r2
 801883a:	4618      	mov	r0, r3
 801883c:	f000 f9b1 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	4618      	mov	r0, r3
 8018844:	3710      	adds	r7, #16
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}

0801884a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801884a:	b5b0      	push	{r4, r5, r7, lr}
 801884c:	b08a      	sub	sp, #40	; 0x28
 801884e:	af02      	add	r7, sp, #8
 8018850:	60f8      	str	r0, [r7, #12]
 8018852:	60b9      	str	r1, [r7, #8]
 8018854:	607a      	str	r2, [r7, #4]
 8018856:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8018858:	f107 0318 	add.w	r3, r7, #24
 801885c:	6879      	ldr	r1, [r7, #4]
 801885e:	4618      	mov	r0, r3
 8018860:	f000 fa05 	bl	8018c6e <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8018864:	4603      	mov	r3, r0
 8018866:	f107 0010 	add.w	r0, r7, #16
 801886a:	68ba      	ldr	r2, [r7, #8]
 801886c:	68f9      	ldr	r1, [r7, #12]
 801886e:	f000 f862 	bl	8018936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 8018872:	697b      	ldr	r3, [r7, #20]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d00f      	beq.n	8018898 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8018878:	693c      	ldr	r4, [r7, #16]
 801887a:	697d      	ldr	r5, [r7, #20]
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	f000 fa02 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8018882:	4602      	mov	r2, r0
 8018884:	683b      	ldr	r3, [r7, #0]
 8018886:	9300      	str	r3, [sp, #0]
 8018888:	4613      	mov	r3, r2
 801888a:	462a      	mov	r2, r5
 801888c:	4621      	mov	r1, r4
 801888e:	68f8      	ldr	r0, [r7, #12]
 8018890:	f000 fa04 	bl	8018c9c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 8018894:	4603      	mov	r3, r0
			  __node_gen);
 8018896:	e007      	b.n	80188a8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8018898:	693a      	ldr	r2, [r7, #16]
 801889a:	f107 031c 	add.w	r3, r7, #28
 801889e:	4611      	mov	r1, r2
 80188a0:	4618      	mov	r0, r3
 80188a2:	f000 f97e 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80188a6:	69fb      	ldr	r3, [r7, #28]
    }
 80188a8:	4618      	mov	r0, r3
 80188aa:	3720      	adds	r7, #32
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bdb0      	pop	{r4, r5, r7, pc}

080188b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80188b0:	b480      	push	{r7}
 80188b2:	b083      	sub	sp, #12
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	4618      	mov	r0, r3
 80188be:	370c      	adds	r7, #12
 80188c0:	46bd      	mov	sp, r7
 80188c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c6:	4770      	bx	lr

080188c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80188c8:	b480      	push	{r7}
 80188ca:	b083      	sub	sp, #12
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	689b      	ldr	r3, [r3, #8]
 80188d4:	4618      	mov	r0, r3
 80188d6:	370c      	adds	r7, #12
 80188d8:	46bd      	mov	sp, r7
 80188da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188de:	4770      	bx	lr

080188e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b082      	sub	sp, #8
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
 80188e8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80188ea:	6839      	ldr	r1, [r7, #0]
 80188ec:	6878      	ldr	r0, [r7, #4]
 80188ee:	f000 fa1e 	bl	8018d2e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 80188f2:	6839      	ldr	r1, [r7, #0]
 80188f4:	6878      	ldr	r0, [r7, #4]
 80188f6:	f000 fa2f 	bl	8018d58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 80188fa:	bf00      	nop
 80188fc:	3708      	adds	r7, #8
 80188fe:	46bd      	mov	sp, r7
 8018900:	bd80      	pop	{r7, pc}

08018902 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8018902:	b580      	push	{r7, lr}
 8018904:	b082      	sub	sp, #8
 8018906:	af00      	add	r7, sp, #0
 8018908:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f000 fa36 	bl	8018d7c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8018910:	4603      	mov	r3, r0
 8018912:	4618      	mov	r0, r3
 8018914:	3708      	adds	r7, #8
 8018916:	46bd      	mov	sp, r7
 8018918:	bd80      	pop	{r7, pc}

0801891a <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 801891a:	b580      	push	{r7, lr}
 801891c:	b082      	sub	sp, #8
 801891e:	af00      	add	r7, sp, #0
 8018920:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	3310      	adds	r3, #16
 8018926:	4618      	mov	r0, r3
 8018928:	f000 fa3f 	bl	8018daa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 801892c:	4603      	mov	r3, r0
 801892e:	4618      	mov	r0, r3
 8018930:	3708      	adds	r7, #8
 8018932:	46bd      	mov	sp, r7
 8018934:	bd80      	pop	{r7, pc}

08018936 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8018936:	b590      	push	{r4, r7, lr}
 8018938:	b08d      	sub	sp, #52	; 0x34
 801893a:	af00      	add	r7, sp, #0
 801893c:	60f8      	str	r0, [r7, #12]
 801893e:	60b9      	str	r1, [r7, #8]
 8018940:	607a      	str	r2, [r7, #4]
 8018942:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8018944:	1d3b      	adds	r3, r7, #4
 8018946:	4618      	mov	r0, r3
 8018948:	f000 fa4c 	bl	8018de4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 801894c:	4603      	mov	r3, r0
 801894e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8018950:	69bc      	ldr	r4, [r7, #24]
 8018952:	68b8      	ldr	r0, [r7, #8]
 8018954:	f000 fa1d 	bl	8018d92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8018958:	4603      	mov	r3, r0
 801895a:	429c      	cmp	r4, r3
 801895c:	bf0c      	ite	eq
 801895e:	2301      	moveq	r3, #1
 8018960:	2300      	movne	r3, #0
 8018962:	b2db      	uxtb	r3, r3
 8018964:	2b00      	cmp	r3, #0
 8018966:	d030      	beq.n	80189ca <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 8018968:	68b8      	ldr	r0, [r7, #8]
 801896a:	f000 fa4c 	bl	8018e06 <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 801896e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8018970:	2b00      	cmp	r3, #0
 8018972:	d013      	beq.n	801899c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8018974:	68bc      	ldr	r4, [r7, #8]
 8018976:	68b8      	ldr	r0, [r7, #8]
 8018978:	f000 fa51 	bl	8018e1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 801897c:	4603      	mov	r3, r0
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	4618      	mov	r0, r3
 8018982:	f000 fa58 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018986:	4603      	mov	r3, r0
 8018988:	683a      	ldr	r2, [r7, #0]
 801898a:	4619      	mov	r1, r3
 801898c:	4620      	mov	r0, r4
 801898e:	f7ff fea1 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018992:	4603      	mov	r3, r0
 8018994:	2b00      	cmp	r3, #0
 8018996:	d001      	beq.n	801899c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8018998:	2301      	movs	r3, #1
 801899a:	e000      	b.n	801899e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 801899c:	2300      	movs	r3, #0
	  if (size() > 0
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d00c      	beq.n	80189bc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80189a2:	2300      	movs	r3, #0
 80189a4:	61fb      	str	r3, [r7, #28]
 80189a6:	68b8      	ldr	r0, [r7, #8]
 80189a8:	f000 fa39 	bl	8018e1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 80189ac:	4602      	mov	r2, r0
 80189ae:	f107 031c 	add.w	r3, r7, #28
 80189b2:	4619      	mov	r1, r3
 80189b4:	68f8      	ldr	r0, [r7, #12]
 80189b6:	f7f8 fbc8 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80189ba:	e0db      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	683a      	ldr	r2, [r7, #0]
 80189c0:	68b9      	ldr	r1, [r7, #8]
 80189c2:	4618      	mov	r0, r3
 80189c4:	f000 fa43 	bl	8018e4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80189c8:	e0d4      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80189ca:	68bc      	ldr	r4, [r7, #8]
 80189cc:	69bb      	ldr	r3, [r7, #24]
 80189ce:	4618      	mov	r0, r3
 80189d0:	f000 fa31 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80189d4:	4603      	mov	r3, r0
 80189d6:	461a      	mov	r2, r3
 80189d8:	6839      	ldr	r1, [r7, #0]
 80189da:	4620      	mov	r0, r4
 80189dc:	f7ff fe7a 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 80189e0:	4603      	mov	r3, r0
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d057      	beq.n	8018a96 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80189ea:	69bc      	ldr	r4, [r7, #24]
 80189ec:	68b8      	ldr	r0, [r7, #8]
 80189ee:	f000 fab3 	bl	8018f58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 80189f2:	4603      	mov	r3, r0
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	429c      	cmp	r4, r3
 80189f8:	bf0c      	ite	eq
 80189fa:	2301      	moveq	r3, #1
 80189fc:	2300      	movne	r3, #0
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d00d      	beq.n	8018a20 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8018a04:	68b8      	ldr	r0, [r7, #8]
 8018a06:	f000 faa7 	bl	8018f58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	68b8      	ldr	r0, [r7, #8]
 8018a0e:	f000 faa3 	bl	8018f58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8018a12:	4603      	mov	r3, r0
 8018a14:	461a      	mov	r2, r3
 8018a16:	4621      	mov	r1, r4
 8018a18:	68f8      	ldr	r0, [r7, #12]
 8018a1a:	f7f8 fc3d 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8018a1e:	e0a9      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8018a20:	68bc      	ldr	r4, [r7, #8]
 8018a22:	f107 0314 	add.w	r3, r7, #20
 8018a26:	4618      	mov	r0, r3
 8018a28:	f000 faa2 	bl	8018f70 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	4618      	mov	r0, r3
 8018a32:	f000 fa00 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018a36:	4603      	mov	r3, r0
 8018a38:	683a      	ldr	r2, [r7, #0]
 8018a3a:	4619      	mov	r1, r3
 8018a3c:	4620      	mov	r0, r4
 8018a3e:	f7ff fe49 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018a42:	4603      	mov	r3, r0
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d01f      	beq.n	8018a88 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8018a48:	697b      	ldr	r3, [r7, #20]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7ff ff30 	bl	80188b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8018a50:	4603      	mov	r3, r0
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	bf0c      	ite	eq
 8018a56:	2301      	moveq	r3, #1
 8018a58:	2300      	movne	r3, #0
 8018a5a:	b2db      	uxtb	r3, r3
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d00a      	beq.n	8018a76 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8018a60:	2300      	movs	r3, #0
 8018a62:	623b      	str	r3, [r7, #32]
 8018a64:	f107 0214 	add.w	r2, r7, #20
 8018a68:	f107 0320 	add.w	r3, r7, #32
 8018a6c:	4619      	mov	r1, r3
 8018a6e:	68f8      	ldr	r0, [r7, #12]
 8018a70:	f7f8 fb6b 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8018a74:	e07e      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8018a76:	f107 0218 	add.w	r2, r7, #24
 8018a7a:	f107 0318 	add.w	r3, r7, #24
 8018a7e:	4619      	mov	r1, r3
 8018a80:	68f8      	ldr	r0, [r7, #12]
 8018a82:	f7f8 fc09 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8018a86:	e075      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	683a      	ldr	r2, [r7, #0]
 8018a8c:	68b9      	ldr	r1, [r7, #8]
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f000 f9dd 	bl	8018e4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8018a94:	e06e      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8018a96:	68bc      	ldr	r4, [r7, #8]
 8018a98:	69bb      	ldr	r3, [r7, #24]
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f000 f9cb 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	683a      	ldr	r2, [r7, #0]
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	4620      	mov	r0, r4
 8018aa8:	f7ff fe14 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018aac:	4603      	mov	r3, r0
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d056      	beq.n	8018b60 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 8018ab2:	69bb      	ldr	r3, [r7, #24]
 8018ab4:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8018ab6:	69bc      	ldr	r4, [r7, #24]
 8018ab8:	68b8      	ldr	r0, [r7, #8]
 8018aba:	f000 f9b0 	bl	8018e1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8018abe:	4603      	mov	r3, r0
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	429c      	cmp	r4, r3
 8018ac4:	bf0c      	ite	eq
 8018ac6:	2301      	moveq	r3, #1
 8018ac8:	2300      	movne	r3, #0
 8018aca:	b2db      	uxtb	r3, r3
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d00c      	beq.n	8018aea <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8018ad4:	68b8      	ldr	r0, [r7, #8]
 8018ad6:	f000 f9a2 	bl	8018e1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8018ada:	4602      	mov	r2, r0
 8018adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018ae0:	4619      	mov	r1, r3
 8018ae2:	68f8      	ldr	r0, [r7, #12]
 8018ae4:	f7f8 fb31 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8018ae8:	e044      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8018aea:	68bc      	ldr	r4, [r7, #8]
 8018aec:	f107 0310 	add.w	r3, r7, #16
 8018af0:	4618      	mov	r0, r3
 8018af2:	f000 fa4e 	bl	8018f92 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 8018af6:	4603      	mov	r3, r0
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	4618      	mov	r0, r3
 8018afc:	f000 f99b 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018b00:	4603      	mov	r3, r0
 8018b02:	461a      	mov	r2, r3
 8018b04:	6839      	ldr	r1, [r7, #0]
 8018b06:	4620      	mov	r0, r4
 8018b08:	f7ff fde4 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018b0c:	4603      	mov	r3, r0
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d01f      	beq.n	8018b52 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8018b12:	69bb      	ldr	r3, [r7, #24]
 8018b14:	4618      	mov	r0, r3
 8018b16:	f7ff fecb 	bl	80188b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	bf0c      	ite	eq
 8018b20:	2301      	moveq	r3, #1
 8018b22:	2300      	movne	r3, #0
 8018b24:	b2db      	uxtb	r3, r3
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d00a      	beq.n	8018b40 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8018b2a:	2300      	movs	r3, #0
 8018b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8018b2e:	f107 0218 	add.w	r2, r7, #24
 8018b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018b36:	4619      	mov	r1, r3
 8018b38:	68f8      	ldr	r0, [r7, #12]
 8018b3a:	f7f8 fb06 	bl	801114a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8018b3e:	e019      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8018b40:	f107 0210 	add.w	r2, r7, #16
 8018b44:	f107 0310 	add.w	r3, r7, #16
 8018b48:	4619      	mov	r1, r3
 8018b4a:	68f8      	ldr	r0, [r7, #12]
 8018b4c:	f7f8 fba4 	bl	8011298 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8018b50:	e010      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	683a      	ldr	r2, [r7, #0]
 8018b56:	68b9      	ldr	r1, [r7, #8]
 8018b58:	4618      	mov	r0, r3
 8018b5a:	f000 f978 	bl	8018e4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8018b5e:	e009      	b.n	8018b74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8018b60:	2300      	movs	r3, #0
 8018b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b64:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8018b68:	f107 0318 	add.w	r3, r7, #24
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	68f8      	ldr	r0, [r7, #12]
 8018b70:	f7f8 fbc8 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8018b74:	68f8      	ldr	r0, [r7, #12]
 8018b76:	3734      	adds	r7, #52	; 0x34
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd90      	pop	{r4, r7, pc}

08018b7c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8018b7c:	b580      	push	{r7, lr}
 8018b7e:	b084      	sub	sp, #16
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8018b84:	6878      	ldr	r0, [r7, #4]
 8018b86:	f000 fa15 	bl	8018fb4 <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	f107 030c 	add.w	r3, r7, #12
 8018b90:	4611      	mov	r1, r2
 8018b92:	4618      	mov	r0, r3
 8018b94:	f000 f86b 	bl	8018c6e <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8018b98:	4603      	mov	r3, r0
      }
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3710      	adds	r7, #16
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}

08018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8018ba2:	b480      	push	{r7}
 8018ba4:	b083      	sub	sp, #12
 8018ba6:	af00      	add	r7, sp, #0
 8018ba8:	6078      	str	r0, [r7, #4]
 8018baa:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	683a      	ldr	r2, [r7, #0]
 8018bb0:	601a      	str	r2, [r3, #0]
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	370c      	adds	r7, #12
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr

08018bc0 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018bc0:	b590      	push	{r4, r7, lr}
 8018bc2:	b083      	sub	sp, #12
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
 8018bc8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f000 fa00 	bl	8018fd0 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	6838      	ldr	r0, [r7, #0]
 8018bd4:	f7ff fd5c 	bl	8018690 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 8018bd8:	4603      	mov	r3, r0
 8018bda:	4619      	mov	r1, r3
 8018bdc:	4620      	mov	r0, r4
 8018bde:	f000 fa02 	bl	8018fe6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8018be2:	bf00      	nop
 8018be4:	370c      	adds	r7, #12
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd90      	pop	{r4, r7, pc}

08018bea <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018bea:	b580      	push	{r7, lr}
 8018bec:	b082      	sub	sp, #8
 8018bee:	af00      	add	r7, sp, #0
 8018bf0:	6078      	str	r0, [r7, #4]
 8018bf2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8018bf4:	6878      	ldr	r0, [r7, #4]
 8018bf6:	f000 f9eb 	bl	8018fd0 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	2201      	movs	r2, #1
 8018bfe:	6839      	ldr	r1, [r7, #0]
 8018c00:	4618      	mov	r0, r3
 8018c02:	f000 f9fc 	bl	8018ffe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 8018c06:	bf00      	nop
 8018c08:	3708      	adds	r7, #8
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}

08018c0e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018c0e:	b480      	push	{r7}
 8018c10:	b083      	sub	sp, #12
 8018c12:	af00      	add	r7, sp, #0
 8018c14:	6078      	str	r0, [r7, #4]
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	4618      	mov	r0, r3
 8018c1a:	370c      	adds	r7, #12
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c22:	4770      	bx	lr

08018c24 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8018c24:	b480      	push	{r7}
 8018c26:	b083      	sub	sp, #12
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	370c      	adds	r7, #12
 8018c32:	46bd      	mov	sp, r7
 8018c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c38:	4770      	bx	lr

08018c3a <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8018c3a:	b580      	push	{r7, lr}
 8018c3c:	b082      	sub	sp, #8
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	6078      	str	r0, [r7, #4]
 8018c42:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8018c44:	6839      	ldr	r1, [r7, #0]
 8018c46:	6878      	ldr	r0, [r7, #4]
 8018c48:	f000 f9f8 	bl	801903c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	4618      	mov	r0, r3
 8018c50:	3708      	adds	r7, #8
 8018c52:	46bd      	mov	sp, r7
 8018c54:	bd80      	pop	{r7, pc}

08018c56 <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8018c56:	b480      	push	{r7}
 8018c58:	b083      	sub	sp, #12
 8018c5a:	af00      	add	r7, sp, #0
 8018c5c:	6078      	str	r0, [r7, #4]
 8018c5e:	6039      	str	r1, [r7, #0]
      { }
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	4618      	mov	r0, r3
 8018c64:	370c      	adds	r7, #12
 8018c66:	46bd      	mov	sp, r7
 8018c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c6c:	4770      	bx	lr

08018c6e <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 8018c6e:	b480      	push	{r7}
 8018c70:	b083      	sub	sp, #12
 8018c72:	af00      	add	r7, sp, #0
 8018c74:	6078      	str	r0, [r7, #4]
 8018c76:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	370c      	adds	r7, #12
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c84:	4770      	bx	lr

08018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018c86:	b480      	push	{r7}
 8018c88:	b083      	sub	sp, #12
 8018c8a:	af00      	add	r7, sp, #0
 8018c8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	4618      	mov	r0, r3
 8018c92:	370c      	adds	r7, #12
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr

08018c9c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8018c9c:	b5b0      	push	{r4, r5, r7, lr}
 8018c9e:	b088      	sub	sp, #32
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	60f8      	str	r0, [r7, #12]
 8018ca4:	60b9      	str	r1, [r7, #8]
 8018ca6:	607a      	str	r2, [r7, #4]
 8018ca8:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8018caa:	68bb      	ldr	r3, [r7, #8]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d11a      	bne.n	8018ce6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8018cb0:	68f8      	ldr	r0, [r7, #12]
 8018cb2:	f000 f86e 	bl	8018d92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d013      	beq.n	8018ce6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8018cbe:	68fc      	ldr	r4, [r7, #12]
 8018cc0:	f107 0310 	add.w	r3, r7, #16
 8018cc4:	6839      	ldr	r1, [r7, #0]
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	f7ff ffd1 	bl	8018c6e <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8018ccc:	4605      	mov	r5, r0
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f000 f8b1 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	461a      	mov	r2, r3
 8018cd8:	4629      	mov	r1, r5
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f7ff fcfa 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d001      	beq.n	8018cea <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	e000      	b.n	8018cec <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8018cea:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8018cec:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8018cee:	6838      	ldr	r0, [r7, #0]
 8018cf0:	f7ff ffc9 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8018cf4:	4603      	mov	r3, r0
 8018cf6:	4619      	mov	r1, r3
 8018cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018cfa:	f000 f9ab 	bl	8019054 <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8018cfe:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8018d04:	7ff8      	ldrb	r0, [r7, #31]
 8018d06:	687a      	ldr	r2, [r7, #4]
 8018d08:	69b9      	ldr	r1, [r7, #24]
 8018d0a:	f000 fc72 	bl	80195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	695b      	ldr	r3, [r3, #20]
 8018d12:	1c5a      	adds	r2, r3, #1
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8018d18:	f107 0314 	add.w	r3, r7, #20
 8018d1c:	69b9      	ldr	r1, [r7, #24]
 8018d1e:	4618      	mov	r0, r3
 8018d20:	f7ff ff3f 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8018d24:	697b      	ldr	r3, [r7, #20]
      }
 8018d26:	4618      	mov	r0, r3
 8018d28:	3720      	adds	r7, #32
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bdb0      	pop	{r4, r5, r7, pc}

08018d2e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018d2e:	b590      	push	{r4, r7, lr}
 8018d30:	b083      	sub	sp, #12
 8018d32:	af00      	add	r7, sp, #0
 8018d34:	6078      	str	r0, [r7, #4]
 8018d36:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f000 f99f 	bl	801907c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8018d3e:	4604      	mov	r4, r0
 8018d40:	6838      	ldr	r0, [r7, #0]
 8018d42:	f7ff fdea 	bl	801891a <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8018d46:	4603      	mov	r3, r0
 8018d48:	4619      	mov	r1, r3
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	f000 f9a1 	bl	8019092 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 8018d50:	bf00      	nop
 8018d52:	370c      	adds	r7, #12
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd90      	pop	{r4, r7, pc}

08018d58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	f000 f98a 	bl	801907c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	2201      	movs	r2, #1
 8018d6c:	6839      	ldr	r1, [r7, #0]
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f000 f99b 	bl	80190aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 8018d74:	bf00      	nop
 8018d76:	3708      	adds	r7, #8
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd80      	pop	{r7, pc}

08018d7c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8018d7c:	b480      	push	{r7}
 8018d7e:	b083      	sub	sp, #12
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	4618      	mov	r0, r3
 8018d88:	370c      	adds	r7, #12
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d90:	4770      	bx	lr

08018d92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8018d92:	b480      	push	{r7}
 8018d94:	b083      	sub	sp, #12
 8018d96:	af00      	add	r7, sp, #0
 8018d98:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	3304      	adds	r3, #4
 8018d9e:	4618      	mov	r0, r3
 8018da0:	370c      	adds	r7, #12
 8018da2:	46bd      	mov	sp, r7
 8018da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da8:	4770      	bx	lr

08018daa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 8018daa:	b580      	push	{r7, lr}
 8018dac:	b082      	sub	sp, #8
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f000 f998 	bl	80190e8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8018db8:	4603      	mov	r3, r0
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3708      	adds	r7, #8
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}

08018dc2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8018dc2:	b580      	push	{r7, lr}
 8018dc4:	b082      	sub	sp, #8
 8018dc6:	af00      	add	r7, sp, #0
 8018dc8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f000 f956 	bl	801907c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2101      	movs	r1, #1
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f000 f992 	bl	80190fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b084      	sub	sp, #16
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	f107 030c 	add.w	r3, r7, #12
 8018df4:	4611      	mov	r1, r2
 8018df6:	4618      	mov	r0, r3
 8018df8:	f7ff fed3 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3710      	adds	r7, #16
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}

08018e06 <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8018e06:	b480      	push	{r7}
 8018e08:	b083      	sub	sp, #12
 8018e0a:	af00      	add	r7, sp, #0
 8018e0c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	695b      	ldr	r3, [r3, #20]
 8018e12:	4618      	mov	r0, r3
 8018e14:	370c      	adds	r7, #12
 8018e16:	46bd      	mov	sp, r7
 8018e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1c:	4770      	bx	lr

08018e1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8018e1e:	b480      	push	{r7}
 8018e20:	b083      	sub	sp, #12
 8018e22:	af00      	add	r7, sp, #0
 8018e24:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	3310      	adds	r3, #16
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	370c      	adds	r7, #12
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e34:	4770      	bx	lr

08018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8018e36:	b580      	push	{r7, lr}
 8018e38:	b082      	sub	sp, #8
 8018e3a:	af00      	add	r7, sp, #0
 8018e3c:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8018e3e:	6878      	ldr	r0, [r7, #4]
 8018e40:	f7ff fe9c 	bl	8018b7c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8018e44:	4603      	mov	r3, r0
 8018e46:	4618      	mov	r0, r3
 8018e48:	3708      	adds	r7, #8
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}

08018e4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8018e4e:	b590      	push	{r4, r7, lr}
 8018e50:	b08b      	sub	sp, #44	; 0x2c
 8018e52:	af00      	add	r7, sp, #0
 8018e54:	60f8      	str	r0, [r7, #12]
 8018e56:	60b9      	str	r1, [r7, #8]
 8018e58:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8018e5a:	68b8      	ldr	r0, [r7, #8]
 8018e5c:	f7ff fc0c 	bl	8018678 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8018e60:	4603      	mov	r3, r0
 8018e62:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8018e64:	68b8      	ldr	r0, [r7, #8]
 8018e66:	f7ff ff94 	bl	8018d92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8018e6e:	2301      	movs	r3, #1
 8018e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8018e74:	69bb      	ldr	r3, [r7, #24]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d020      	beq.n	8018ebc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8018e7a:	69bb      	ldr	r3, [r7, #24]
 8018e7c:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8018e7e:	68bc      	ldr	r4, [r7, #8]
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	4618      	mov	r0, r3
 8018e84:	f7ff fe7a 	bl	8018b7c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	6879      	ldr	r1, [r7, #4]
 8018e8e:	4620      	mov	r0, r4
 8018e90:	f7ff fc20 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018e94:	4603      	mov	r3, r0
 8018e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8018e9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d005      	beq.n	8018eae <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 8018ea2:	69bb      	ldr	r3, [r7, #24]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f7ff fd0f 	bl	80188c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8018eaa:	4603      	mov	r3, r0
 8018eac:	e004      	b.n	8018eb8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 8018eae:	69bb      	ldr	r3, [r7, #24]
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7ff fcfd 	bl	80188b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8018eba:	e7db      	b.n	8018e74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8018ebc:	697a      	ldr	r2, [r7, #20]
 8018ebe:	f107 0310 	add.w	r3, r7, #16
 8018ec2:	4611      	mov	r1, r2
 8018ec4:	4618      	mov	r0, r3
 8018ec6:	f7ff fe6c 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8018eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d01d      	beq.n	8018f0e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8018ed2:	68b8      	ldr	r0, [r7, #8]
 8018ed4:	f000 f936 	bl	8019144 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	61fb      	str	r3, [r7, #28]
 8018edc:	f107 021c 	add.w	r2, r7, #28
 8018ee0:	f107 0310 	add.w	r3, r7, #16
 8018ee4:	4611      	mov	r1, r2
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7ff fbe0 	bl	80186ac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 8018eec:	4603      	mov	r3, r0
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d008      	beq.n	8018f04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8018ef2:	f107 0214 	add.w	r2, r7, #20
 8018ef6:	f107 0318 	add.w	r3, r7, #24
 8018efa:	4619      	mov	r1, r3
 8018efc:	68f8      	ldr	r0, [r7, #12]
 8018efe:	f000 f932 	bl	8019166 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8018f02:	e025      	b.n	8018f50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8018f04:	f107 0310 	add.w	r3, r7, #16
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f000 f831 	bl	8018f70 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8018f0e:	68bc      	ldr	r4, [r7, #8]
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	4618      	mov	r0, r3
 8018f14:	f7ff ff8f 	bl	8018e36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	687a      	ldr	r2, [r7, #4]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f7ff fbd8 	bl	80186d4 <_ZNKSt4lessImEclERKmS2_>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d008      	beq.n	8018f3c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8018f2a:	f107 0214 	add.w	r2, r7, #20
 8018f2e:	f107 0318 	add.w	r3, r7, #24
 8018f32:	4619      	mov	r1, r3
 8018f34:	68f8      	ldr	r0, [r7, #12]
 8018f36:	f000 f916 	bl	8019166 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8018f3a:	e009      	b.n	8018f50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	623b      	str	r3, [r7, #32]
 8018f40:	f107 0220 	add.w	r2, r7, #32
 8018f44:	f107 0310 	add.w	r3, r7, #16
 8018f48:	4619      	mov	r1, r3
 8018f4a:	68f8      	ldr	r0, [r7, #12]
 8018f4c:	f7f8 f9da 	bl	8011304 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8018f50:	68f8      	ldr	r0, [r7, #12]
 8018f52:	372c      	adds	r7, #44	; 0x2c
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd90      	pop	{r4, r7, pc}

08018f58 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8018f58:	b480      	push	{r7}
 8018f5a:	b083      	sub	sp, #12
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	330c      	adds	r3, #12
 8018f64:	4618      	mov	r0, r3
 8018f66:	370c      	adds	r7, #12
 8018f68:	46bd      	mov	sp, r7
 8018f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6e:	4770      	bx	lr

08018f70 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f000 fb36 	bl	80195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8018f82:	4602      	mov	r2, r0
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	601a      	str	r2, [r3, #0]
	return *this;
 8018f88:	687b      	ldr	r3, [r7, #4]
      }
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3708      	adds	r7, #8
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	bd80      	pop	{r7, pc}

08018f92 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8018f92:	b580      	push	{r7, lr}
 8018f94:	b082      	sub	sp, #8
 8018f96:	af00      	add	r7, sp, #0
 8018f98:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	4618      	mov	r0, r3
 8018fa0:	f000 fb23 	bl	80195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8018fa4:	4602      	mov	r2, r0
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	601a      	str	r2, [r3, #0]
	return *this;
 8018faa:	687b      	ldr	r3, [r7, #4]
      }
 8018fac:	4618      	mov	r0, r3
 8018fae:	3708      	adds	r7, #8
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}

08018fb4 <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	3310      	adds	r3, #16
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f000 f8e9 	bl	8019198 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	4618      	mov	r0, r3
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}

08018fd0 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8018fd0:	b480      	push	{r7}
 8018fd2:	b083      	sub	sp, #12
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	4618      	mov	r0, r3
 8018fdc:	370c      	adds	r7, #12
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe4:	4770      	bx	lr

08018fe6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8018fe6:	b580      	push	{r7, lr}
 8018fe8:	b082      	sub	sp, #8
 8018fea:	af00      	add	r7, sp, #0
 8018fec:	6078      	str	r0, [r7, #4]
 8018fee:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8018ff0:	6838      	ldr	r0, [r7, #0]
 8018ff2:	f000 f8dd 	bl	80191b0 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 8018ff6:	bf00      	nop
 8018ff8:	3708      	adds	r7, #8
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	bd80      	pop	{r7, pc}

08018ffe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8018ffe:	b580      	push	{r7, lr}
 8019000:	b088      	sub	sp, #32
 8019002:	af00      	add	r7, sp, #0
 8019004:	60f8      	str	r0, [r7, #12]
 8019006:	60b9      	str	r1, [r7, #8]
 8019008:	607a      	str	r2, [r7, #4]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	61fb      	str	r3, [r7, #28]
 801900e:	68bb      	ldr	r3, [r7, #8]
 8019010:	61bb      	str	r3, [r7, #24]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8019016:	f7f4 fef1 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 801901a:	4603      	mov	r3, r0
 801901c:	2b00      	cmp	r3, #0
 801901e:	d003      	beq.n	8019028 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8019020:	69b8      	ldr	r0, [r7, #24]
 8019022:	f000 fa79 	bl	8019518 <_ZdlPv>
	    return;
 8019026:	e005      	b.n	8019034 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8019028:	697a      	ldr	r2, [r7, #20]
 801902a:	69b9      	ldr	r1, [r7, #24]
 801902c:	69f8      	ldr	r0, [r7, #28]
 801902e:	f000 f900 	bl	8019232 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8019032:	bf00      	nop
 8019034:	bf00      	nop
 8019036:	3720      	adds	r7, #32
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801903c:	b480      	push	{r7}
 801903e:	b083      	sub	sp, #12
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	6039      	str	r1, [r7, #0]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	4618      	mov	r0, r3
 801904a:	370c      	adds	r7, #12
 801904c:	46bd      	mov	sp, r7
 801904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019052:	4770      	bx	lr

08019054 <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 8019054:	b590      	push	{r4, r7, lr}
 8019056:	b083      	sub	sp, #12
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	681c      	ldr	r4, [r3, #0]
 8019062:	6838      	ldr	r0, [r7, #0]
 8019064:	f7ff fe0f 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019068:	4603      	mov	r3, r0
 801906a:	4619      	mov	r1, r3
 801906c:	4620      	mov	r0, r4
 801906e:	f000 f8a9 	bl	80191c4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8019072:	4603      	mov	r3, r0
 8019074:	4618      	mov	r0, r3
 8019076:	370c      	adds	r7, #12
 8019078:	46bd      	mov	sp, r7
 801907a:	bd90      	pop	{r4, r7, pc}

0801907c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801907c:	b480      	push	{r7}
 801907e:	b083      	sub	sp, #12
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	4618      	mov	r0, r3
 8019088:	370c      	adds	r7, #12
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr

08019092 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8019092:	b580      	push	{r7, lr}
 8019094:	b082      	sub	sp, #8
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
 801909a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801909c:	6838      	ldr	r0, [r7, #0]
 801909e:	f000 f8a8 	bl	80191f2 <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 80190a2:	bf00      	nop
 80190a4:	3708      	adds	r7, #8
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}

080190aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b088      	sub	sp, #32
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	60f8      	str	r0, [r7, #12]
 80190b2:	60b9      	str	r1, [r7, #8]
 80190b4:	607a      	str	r2, [r7, #4]
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	61fb      	str	r3, [r7, #28]
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	61bb      	str	r3, [r7, #24]
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80190c2:	f7f4 fe9b 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 80190c6:	4603      	mov	r3, r0
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d003      	beq.n	80190d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 80190cc:	69b8      	ldr	r0, [r7, #24]
 80190ce:	f000 fa23 	bl	8019518 <_ZdlPv>
	    return;
 80190d2:	e005      	b.n	80190e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80190d4:	697a      	ldr	r2, [r7, #20]
 80190d6:	69b9      	ldr	r1, [r7, #24]
 80190d8:	69f8      	ldr	r0, [r7, #28]
 80190da:	f000 f8db 	bl	8019294 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 80190de:	bf00      	nop
 80190e0:	bf00      	nop
 80190e2:	3720      	adds	r7, #32
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}

080190e8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 80190e8:	b480      	push	{r7}
 80190ea:	b083      	sub	sp, #12
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	4618      	mov	r0, r3
 80190f4:	370c      	adds	r7, #12
 80190f6:	46bd      	mov	sp, r7
 80190f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fc:	4770      	bx	lr

080190fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 80190fe:	b580      	push	{r7, lr}
 8019100:	b084      	sub	sp, #16
 8019102:	af00      	add	r7, sp, #0
 8019104:	6078      	str	r0, [r7, #4]
 8019106:	6039      	str	r1, [r7, #0]
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	60fb      	str	r3, [r7, #12]
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8019110:	f7f4 fe74 	bl	800ddfc <_ZSt21is_constant_evaluatedv>
 8019114:	4603      	mov	r3, r0
 8019116:	2b00      	cmp	r3, #0
 8019118:	d009      	beq.n	801912e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801911a:	68ba      	ldr	r2, [r7, #8]
 801911c:	4613      	mov	r3, r2
 801911e:	005b      	lsls	r3, r3, #1
 8019120:	4413      	add	r3, r2
 8019122:	00db      	lsls	r3, r3, #3
 8019124:	4618      	mov	r0, r3
 8019126:	f000 f9fb 	bl	8019520 <_Znwj>
 801912a:	4603      	mov	r3, r0
 801912c:	e006      	b.n	801913c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801912e:	2200      	movs	r2, #0
 8019130:	68b9      	ldr	r1, [r7, #8]
 8019132:	68f8      	ldr	r0, [r7, #12]
 8019134:	f000 f8c0 	bl	80192b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 8019138:	4603      	mov	r3, r0
 801913a:	bf00      	nop
      { return __a.allocate(__n); }
 801913c:	4618      	mov	r0, r3
 801913e:	3710      	adds	r7, #16
 8019140:	46bd      	mov	sp, r7
 8019142:	bd80      	pop	{r7, pc}

08019144 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8019144:	b580      	push	{r7, lr}
 8019146:	b084      	sub	sp, #16
 8019148:	af00      	add	r7, sp, #0
 801914a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	68da      	ldr	r2, [r3, #12]
 8019150:	f107 030c 	add.w	r3, r7, #12
 8019154:	4611      	mov	r1, r2
 8019156:	4618      	mov	r0, r3
 8019158:	f7ff fd23 	bl	8018ba2 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	4618      	mov	r0, r3
 8019160:	3710      	adds	r7, #16
 8019162:	46bd      	mov	sp, r7
 8019164:	bd80      	pop	{r7, pc}

08019166 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8019166:	b580      	push	{r7, lr}
 8019168:	b084      	sub	sp, #16
 801916a:	af00      	add	r7, sp, #0
 801916c:	60f8      	str	r0, [r7, #12]
 801916e:	60b9      	str	r1, [r7, #8]
 8019170:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8019172:	68b8      	ldr	r0, [r7, #8]
 8019174:	f000 f847 	bl	8019206 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019178:	4603      	mov	r3, r0
 801917a:	681a      	ldr	r2, [r3, #0]
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	601a      	str	r2, [r3, #0]
 8019180:	6878      	ldr	r0, [r7, #4]
 8019182:	f7f8 fc7a 	bl	8011a7a <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8019186:	4603      	mov	r3, r0
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	605a      	str	r2, [r3, #4]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	4618      	mov	r0, r3
 8019192:	3710      	adds	r7, #16
 8019194:	46bd      	mov	sp, r7
 8019196:	bd80      	pop	{r7, pc}

08019198 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8019198:	b580      	push	{r7, lr}
 801919a:	b082      	sub	sp, #8
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80191a0:	6878      	ldr	r0, [r7, #4]
 80191a2:	f000 f83b 	bl	801921c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 80191a6:	4603      	mov	r3, r0
 80191a8:	4618      	mov	r0, r3
 80191aa:	3708      	adds	r7, #8
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd80      	pop	{r7, pc}

080191b0 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 80191b0:	b480      	push	{r7}
 80191b2:	b083      	sub	sp, #12
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
    }
 80191b8:	bf00      	nop
 80191ba:	370c      	adds	r7, #12
 80191bc:	46bd      	mov	sp, r7
 80191be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c2:	4770      	bx	lr

080191c4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80191ce:	6878      	ldr	r0, [r7, #4]
 80191d0:	f7ff fdf7 	bl	8018dc2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 80191d4:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80191d6:	6838      	ldr	r0, [r7, #0]
 80191d8:	f7ff fd55 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 80191dc:	4603      	mov	r3, r0
 80191de:	461a      	mov	r2, r3
 80191e0:	68f9      	ldr	r1, [r7, #12]
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f000 f836 	bl	8019254 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 80191e8:	68fb      	ldr	r3, [r7, #12]
	}
 80191ea:	4618      	mov	r0, r3
 80191ec:	3710      	adds	r7, #16
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}

080191f2 <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 80191f2:	b480      	push	{r7}
 80191f4:	b083      	sub	sp, #12
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	6078      	str	r0, [r7, #4]
    }
 80191fa:	bf00      	nop
 80191fc:	370c      	adds	r7, #12
 80191fe:	46bd      	mov	sp, r7
 8019200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019204:	4770      	bx	lr

08019206 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019206:	b480      	push	{r7}
 8019208:	b083      	sub	sp, #12
 801920a:	af00      	add	r7, sp, #0
 801920c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	4618      	mov	r0, r3
 8019212:	370c      	adds	r7, #12
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr

0801921c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 801921c:	b480      	push	{r7}
 801921e:	b083      	sub	sp, #12
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	4618      	mov	r0, r3
 8019228:	370c      	adds	r7, #12
 801922a:	46bd      	mov	sp, r7
 801922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019230:	4770      	bx	lr

08019232 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8019232:	b580      	push	{r7, lr}
 8019234:	b084      	sub	sp, #16
 8019236:	af00      	add	r7, sp, #0
 8019238:	60f8      	str	r0, [r7, #12]
 801923a:	60b9      	str	r1, [r7, #8]
 801923c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	2234      	movs	r2, #52	; 0x34
 8019242:	fb02 f303 	mul.w	r3, r2, r3
 8019246:	4619      	mov	r1, r3
 8019248:	68b8      	ldr	r0, [r7, #8]
 801924a:	f000 f967 	bl	801951c <_ZdlPvj>
      }
 801924e:	3710      	adds	r7, #16
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}

08019254 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8019254:	b5b0      	push	{r4, r5, r7, lr}
 8019256:	b084      	sub	sp, #16
 8019258:	af00      	add	r7, sp, #0
 801925a:	60f8      	str	r0, [r7, #12]
 801925c:	60b9      	str	r1, [r7, #8]
 801925e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8019260:	68bb      	ldr	r3, [r7, #8]
 8019262:	4619      	mov	r1, r3
 8019264:	2018      	movs	r0, #24
 8019266:	f7e8 f9af 	bl	80015c8 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801926a:	68f8      	ldr	r0, [r7, #12]
 801926c:	f7ff ff06 	bl	801907c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019270:	4604      	mov	r4, r0
 8019272:	68b8      	ldr	r0, [r7, #8]
 8019274:	f7ff fb51 	bl	801891a <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8019278:	4605      	mov	r5, r0
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f7ff fd03 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019280:	4603      	mov	r3, r0
 8019282:	461a      	mov	r2, r3
 8019284:	4629      	mov	r1, r5
 8019286:	4620      	mov	r0, r4
 8019288:	f000 f852 	bl	8019330 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 801928c:	bf00      	nop
 801928e:	3710      	adds	r7, #16
 8019290:	46bd      	mov	sp, r7
 8019292:	bdb0      	pop	{r4, r5, r7, pc}

08019294 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8019294:	b580      	push	{r7, lr}
 8019296:	b084      	sub	sp, #16
 8019298:	af00      	add	r7, sp, #0
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	4613      	mov	r3, r2
 80192a4:	005b      	lsls	r3, r3, #1
 80192a6:	4413      	add	r3, r2
 80192a8:	00db      	lsls	r3, r3, #3
 80192aa:	4619      	mov	r1, r3
 80192ac:	68b8      	ldr	r0, [r7, #8]
 80192ae:	f000 f935 	bl	801951c <_ZdlPvj>
      }
 80192b2:	3710      	adds	r7, #16
 80192b4:	46bd      	mov	sp, r7
 80192b6:	bd80      	pop	{r7, pc}

080192b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
 80192be:	60f8      	str	r0, [r7, #12]
 80192c0:	60b9      	str	r1, [r7, #8]
 80192c2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80192c4:	68f8      	ldr	r0, [r7, #12]
 80192c6:	f000 f845 	bl	8019354 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 80192ca:	4602      	mov	r2, r0
 80192cc:	68bb      	ldr	r3, [r7, #8]
 80192ce:	4293      	cmp	r3, r2
 80192d0:	bf8c      	ite	hi
 80192d2:	2301      	movhi	r3, #1
 80192d4:	2300      	movls	r3, #0
 80192d6:	b2db      	uxtb	r3, r3
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d001      	beq.n	80192e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80192dc:	f000 f9e4 	bl	80196a8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80192e0:	68ba      	ldr	r2, [r7, #8]
 80192e2:	4613      	mov	r3, r2
 80192e4:	005b      	lsls	r3, r3, #1
 80192e6:	4413      	add	r3, r2
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	4618      	mov	r0, r3
 80192ec:	f000 f918 	bl	8019520 <_Znwj>
 80192f0:	4603      	mov	r3, r0
 80192f2:	bf00      	nop
      }
 80192f4:	4618      	mov	r0, r3
 80192f6:	3710      	adds	r7, #16
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}

080192fc <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80192fc:	b5b0      	push	{r4, r5, r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8019306:	6838      	ldr	r0, [r7, #0]
 8019308:	f7ff fcbd 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801930c:	4605      	mov	r5, r0
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	4619      	mov	r1, r3
 8019312:	2008      	movs	r0, #8
 8019314:	f7e8 f958 	bl	80015c8 <_ZnwjPv>
 8019318:	4604      	mov	r4, r0
 801931a:	4623      	mov	r3, r4
 801931c:	462a      	mov	r2, r5
 801931e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019322:	e883 0003 	stmia.w	r3, {r0, r1}
 8019326:	4623      	mov	r3, r4
 8019328:	4618      	mov	r0, r3
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bdb0      	pop	{r4, r5, r7, pc}

08019330 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8019330:	b580      	push	{r7, lr}
 8019332:	b084      	sub	sp, #16
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801933c:	6878      	ldr	r0, [r7, #4]
 801933e:	f7ff fca2 	bl	8018c86 <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019342:	4603      	mov	r3, r0
 8019344:	4619      	mov	r1, r3
 8019346:	68b8      	ldr	r0, [r7, #8]
 8019348:	f7ff ffd8 	bl	80192fc <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 801934c:	bf00      	nop
 801934e:	3710      	adds	r7, #16
 8019350:	46bd      	mov	sp, r7
 8019352:	bd80      	pop	{r7, pc}

08019354 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8019354:	b480      	push	{r7}
 8019356:	b083      	sub	sp, #12
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801935c:	4b03      	ldr	r3, [pc, #12]	; (801936c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 801935e:	4618      	mov	r0, r3
 8019360:	370c      	adds	r7, #12
 8019362:	46bd      	mov	sp, r7
 8019364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019368:	4770      	bx	lr
 801936a:	bf00      	nop
 801936c:	05555555 	.word	0x05555555

08019370 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 8019370:	b580      	push	{r7, lr}
 8019372:	b0d8      	sub	sp, #352	; 0x160
 8019374:	af02      	add	r7, sp, #8
 8019376:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801937a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801937e:	6018      	str	r0, [r3, #0]
 8019380:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8019384:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8019388:	6019      	str	r1, [r3, #0]
 801938a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801938e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	2b01      	cmp	r3, #1
 8019396:	f040 8088 	bne.w	80194aa <_Z41__static_initialization_and_destruction_0ii+0x13a>
 801939a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801939e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d17e      	bne.n	80194aa <_Z41__static_initialization_and_destruction_0ii+0x13a>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80193ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80193b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80193b4:	4a4c      	ldr	r2, [pc, #304]	; (80194e8 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80193b6:	4618      	mov	r0, r3
 80193b8:	4611      	mov	r1, r2
 80193ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80193be:	461a      	mov	r2, r3
 80193c0:	f000 f9c6 	bl	8019750 <memcpy>
 80193c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80193c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80193cc:	f107 0214 	add.w	r2, r7, #20
 80193d0:	601a      	str	r2, [r3, #0]
 80193d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80193d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80193da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80193de:	605a      	str	r2, [r3, #4]
 80193e0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80193e4:	4618      	mov	r0, r3
 80193e6:	f7f5 ffa7 	bl	800f338 <_ZNSaIhEC1Ev>
 80193ea:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80193ee:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80193f2:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80193f6:	ca06      	ldmia	r2, {r1, r2}
 80193f8:	483c      	ldr	r0, [pc, #240]	; (80194ec <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80193fa:	f7f5 ffb4 	bl	800f366 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80193fe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8019402:	4618      	mov	r0, r3
 8019404:	f7f5 ffa4 	bl	800f350 <_ZNSaIhED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 8019408:	4b39      	ldr	r3, [pc, #228]	; (80194f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801940a:	461a      	mov	r2, r3
 801940c:	2300      	movs	r3, #0
 801940e:	6013      	str	r3, [r2, #0]
 8019410:	6053      	str	r3, [r2, #4]
 8019412:	6093      	str	r3, [r2, #8]
 8019414:	60d3      	str	r3, [r2, #12]
 8019416:	6113      	str	r3, [r2, #16]
 8019418:	6153      	str	r3, [r2, #20]
 801941a:	4835      	ldr	r0, [pc, #212]	; (80194f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801941c:	f7fe ff67 	bl	80182ee <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 8019420:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8019424:	2230      	movs	r2, #48	; 0x30
 8019426:	2100      	movs	r1, #0
 8019428:	4618      	mov	r0, r3
 801942a:	f000 f9b9 	bl	80197a0 <memset>
 801942e:	2301      	movs	r3, #1
 8019430:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8019434:	2302      	movs	r3, #2
 8019436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801943a:	2304      	movs	r3, #4
 801943c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8019440:	2304      	movs	r3, #4
 8019442:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8019446:	2308      	movs	r3, #8
 8019448:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801944c:	2308      	movs	r3, #8
 801944e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8019452:	230c      	movs	r3, #12
 8019454:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8019458:	2310      	movs	r3, #16
 801945a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801945e:	2310      	movs	r3, #16
 8019460:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8019464:	2320      	movs	r3, #32
 8019466:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801946a:	2314      	movs	r3, #20
 801946c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8019470:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8019474:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8019478:	2306      	movs	r3, #6
 801947a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801947e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8019482:	4618      	mov	r0, r3
 8019484:	f7fe ffae 	bl	80183e4 <_ZNSaISt4pairIKmmEEC1Ev>
 8019488:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801948c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8019490:	9300      	str	r3, [sp, #0]
 8019492:	4613      	mov	r3, r2
 8019494:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8019498:	ca06      	ldmia	r2, {r1, r2}
 801949a:	4816      	ldr	r0, [pc, #88]	; (80194f4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801949c:	f7fe ffb9 	bl	8018412 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 80194a0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80194a4:	4618      	mov	r0, r3
 80194a6:	f7fe ffa9 	bl	80183fc <_ZNSaISt4pairIKmmEED1Ev>
 80194aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80194ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d111      	bne.n	80194dc <_Z41__static_initialization_and_destruction_0ii+0x16c>
 80194b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80194bc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194c6:	4293      	cmp	r3, r2
 80194c8:	d108      	bne.n	80194dc <_Z41__static_initialization_and_destruction_0ii+0x16c>
 80194ca:	480a      	ldr	r0, [pc, #40]	; (80194f4 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80194cc:	f7fe ff29 	bl	8018322 <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 80194d0:	4807      	ldr	r0, [pc, #28]	; (80194f0 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80194d2:	f7fe ff19 	bl	8018308 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80194d6:	4805      	ldr	r0, [pc, #20]	; (80194ec <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80194d8:	f7f5 ff73 	bl	800f3c2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 80194dc:	bf00      	nop
 80194de:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	08019eb0 	.word	0x08019eb0
 80194ec:	240011d8 	.word	0x240011d8
 80194f0:	240011dc 	.word	0x240011dc
 80194f4:	240011f4 	.word	0x240011f4

080194f8 <_GLOBAL__sub_I__ZN12InputCapture10id_managerE>:
 80194f8:	b580      	push	{r7, lr}
 80194fa:	af00      	add	r7, sp, #0
 80194fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019500:	2001      	movs	r0, #1
 8019502:	f7ff ff35 	bl	8019370 <_Z41__static_initialization_and_destruction_0ii>
 8019506:	bd80      	pop	{r7, pc}

08019508 <_GLOBAL__sub_D__ZN12InputCapture10id_managerE>:
 8019508:	b580      	push	{r7, lr}
 801950a:	af00      	add	r7, sp, #0
 801950c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019510:	2000      	movs	r0, #0
 8019512:	f7ff ff2d 	bl	8019370 <_Z41__static_initialization_and_destruction_0ii>
 8019516:	bd80      	pop	{r7, pc}

08019518 <_ZdlPv>:
 8019518:	f000 b912 	b.w	8019740 <free>

0801951c <_ZdlPvj>:
 801951c:	f7ff bffc 	b.w	8019518 <_ZdlPv>

08019520 <_Znwj>:
 8019520:	2801      	cmp	r0, #1
 8019522:	bf38      	it	cc
 8019524:	2001      	movcc	r0, #1
 8019526:	b510      	push	{r4, lr}
 8019528:	4604      	mov	r4, r0
 801952a:	4620      	mov	r0, r4
 801952c:	f000 f900 	bl	8019730 <malloc>
 8019530:	b930      	cbnz	r0, 8019540 <_Znwj+0x20>
 8019532:	f000 f8c3 	bl	80196bc <_ZSt15get_new_handlerv>
 8019536:	b908      	cbnz	r0, 801953c <_Znwj+0x1c>
 8019538:	f000 f8c8 	bl	80196cc <abort>
 801953c:	4780      	blx	r0
 801953e:	e7f4      	b.n	801952a <_Znwj+0xa>
 8019540:	bd10      	pop	{r4, pc}

08019542 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8019542:	68c3      	ldr	r3, [r0, #12]
 8019544:	689a      	ldr	r2, [r3, #8]
 8019546:	60c2      	str	r2, [r0, #12]
 8019548:	b510      	push	{r4, lr}
 801954a:	b102      	cbz	r2, 801954e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801954c:	6050      	str	r0, [r2, #4]
 801954e:	6842      	ldr	r2, [r0, #4]
 8019550:	605a      	str	r2, [r3, #4]
 8019552:	680c      	ldr	r4, [r1, #0]
 8019554:	4284      	cmp	r4, r0
 8019556:	d103      	bne.n	8019560 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8019558:	600b      	str	r3, [r1, #0]
 801955a:	6098      	str	r0, [r3, #8]
 801955c:	6043      	str	r3, [r0, #4]
 801955e:	bd10      	pop	{r4, pc}
 8019560:	6891      	ldr	r1, [r2, #8]
 8019562:	4281      	cmp	r1, r0
 8019564:	bf0c      	ite	eq
 8019566:	6093      	streq	r3, [r2, #8]
 8019568:	60d3      	strne	r3, [r2, #12]
 801956a:	e7f6      	b.n	801955a <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0801956c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 801956c:	6883      	ldr	r3, [r0, #8]
 801956e:	68da      	ldr	r2, [r3, #12]
 8019570:	6082      	str	r2, [r0, #8]
 8019572:	b510      	push	{r4, lr}
 8019574:	b102      	cbz	r2, 8019578 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8019576:	6050      	str	r0, [r2, #4]
 8019578:	6842      	ldr	r2, [r0, #4]
 801957a:	605a      	str	r2, [r3, #4]
 801957c:	680c      	ldr	r4, [r1, #0]
 801957e:	4284      	cmp	r4, r0
 8019580:	d103      	bne.n	801958a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8019582:	600b      	str	r3, [r1, #0]
 8019584:	60d8      	str	r0, [r3, #12]
 8019586:	6043      	str	r3, [r0, #4]
 8019588:	bd10      	pop	{r4, pc}
 801958a:	68d1      	ldr	r1, [r2, #12]
 801958c:	4281      	cmp	r1, r0
 801958e:	bf0c      	ite	eq
 8019590:	60d3      	streq	r3, [r2, #12]
 8019592:	6093      	strne	r3, [r2, #8]
 8019594:	e7f6      	b.n	8019584 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08019596 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8019596:	68c3      	ldr	r3, [r0, #12]
 8019598:	b123      	cbz	r3, 80195a4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 801959a:	4618      	mov	r0, r3
 801959c:	689b      	ldr	r3, [r3, #8]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d1fb      	bne.n	801959a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80195a2:	4770      	bx	lr
 80195a4:	6843      	ldr	r3, [r0, #4]
 80195a6:	68da      	ldr	r2, [r3, #12]
 80195a8:	4282      	cmp	r2, r0
 80195aa:	d102      	bne.n	80195b2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80195ac:	4618      	mov	r0, r3
 80195ae:	685b      	ldr	r3, [r3, #4]
 80195b0:	e7f9      	b.n	80195a6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80195b2:	68c2      	ldr	r2, [r0, #12]
 80195b4:	4293      	cmp	r3, r2
 80195b6:	bf18      	it	ne
 80195b8:	4618      	movne	r0, r3
 80195ba:	4770      	bx	lr

080195bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80195bc:	7803      	ldrb	r3, [r0, #0]
 80195be:	b933      	cbnz	r3, 80195ce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80195c0:	6843      	ldr	r3, [r0, #4]
 80195c2:	685b      	ldr	r3, [r3, #4]
 80195c4:	4283      	cmp	r3, r0
 80195c6:	d102      	bne.n	80195ce <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80195c8:	68db      	ldr	r3, [r3, #12]
 80195ca:	4618      	mov	r0, r3
 80195cc:	4770      	bx	lr
 80195ce:	6882      	ldr	r2, [r0, #8]
 80195d0:	b122      	cbz	r2, 80195dc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80195d2:	4613      	mov	r3, r2
 80195d4:	68d2      	ldr	r2, [r2, #12]
 80195d6:	2a00      	cmp	r2, #0
 80195d8:	d1fb      	bne.n	80195d2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80195da:	e7f6      	b.n	80195ca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80195dc:	6843      	ldr	r3, [r0, #4]
 80195de:	689a      	ldr	r2, [r3, #8]
 80195e0:	4282      	cmp	r2, r0
 80195e2:	d1f2      	bne.n	80195ca <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80195e4:	4618      	mov	r0, r3
 80195e6:	685b      	ldr	r3, [r3, #4]
 80195e8:	e7f9      	b.n	80195de <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080195ea <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80195ea:	f7ff bfd4 	b.w	8019596 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080195ee <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80195ee:	f7ff bfe5 	b.w	80195bc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080195f2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80195f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195f6:	461e      	mov	r6, r3
 80195f8:	f103 0804 	add.w	r8, r3, #4
 80195fc:	2300      	movs	r3, #0
 80195fe:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8019602:	460c      	mov	r4, r1
 8019604:	604a      	str	r2, [r1, #4]
 8019606:	700b      	strb	r3, [r1, #0]
 8019608:	b300      	cbz	r0, 801964c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 801960a:	4296      	cmp	r6, r2
 801960c:	6091      	str	r1, [r2, #8]
 801960e:	d118      	bne.n	8019642 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8019610:	6071      	str	r1, [r6, #4]
 8019612:	60f4      	str	r4, [r6, #12]
 8019614:	2701      	movs	r7, #1
 8019616:	f04f 0900 	mov.w	r9, #0
 801961a:	6873      	ldr	r3, [r6, #4]
 801961c:	42a3      	cmp	r3, r4
 801961e:	d03f      	beq.n	80196a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8019620:	6860      	ldr	r0, [r4, #4]
 8019622:	7802      	ldrb	r2, [r0, #0]
 8019624:	2a00      	cmp	r2, #0
 8019626:	d13b      	bne.n	80196a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8019628:	6845      	ldr	r5, [r0, #4]
 801962a:	68ab      	ldr	r3, [r5, #8]
 801962c:	4298      	cmp	r0, r3
 801962e:	d123      	bne.n	8019678 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8019630:	68eb      	ldr	r3, [r5, #12]
 8019632:	b183      	cbz	r3, 8019656 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8019634:	781a      	ldrb	r2, [r3, #0]
 8019636:	b972      	cbnz	r2, 8019656 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8019638:	7007      	strb	r7, [r0, #0]
 801963a:	701f      	strb	r7, [r3, #0]
 801963c:	702a      	strb	r2, [r5, #0]
 801963e:	462c      	mov	r4, r5
 8019640:	e7eb      	b.n	801961a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8019642:	68b3      	ldr	r3, [r6, #8]
 8019644:	4293      	cmp	r3, r2
 8019646:	d1e5      	bne.n	8019614 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8019648:	60b1      	str	r1, [r6, #8]
 801964a:	e7e3      	b.n	8019614 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801964c:	60d1      	str	r1, [r2, #12]
 801964e:	68f3      	ldr	r3, [r6, #12]
 8019650:	4293      	cmp	r3, r2
 8019652:	d1df      	bne.n	8019614 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8019654:	e7dd      	b.n	8019612 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8019656:	68c3      	ldr	r3, [r0, #12]
 8019658:	42a3      	cmp	r3, r4
 801965a:	d103      	bne.n	8019664 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 801965c:	4641      	mov	r1, r8
 801965e:	f7ff ff70 	bl	8019542 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8019662:	4604      	mov	r4, r0
 8019664:	6863      	ldr	r3, [r4, #4]
 8019666:	4641      	mov	r1, r8
 8019668:	701f      	strb	r7, [r3, #0]
 801966a:	4628      	mov	r0, r5
 801966c:	f885 9000 	strb.w	r9, [r5]
 8019670:	f7ff ff7c 	bl	801956c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8019674:	4625      	mov	r5, r4
 8019676:	e7e2      	b.n	801963e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8019678:	b113      	cbz	r3, 8019680 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 801967a:	781a      	ldrb	r2, [r3, #0]
 801967c:	2a00      	cmp	r2, #0
 801967e:	d0db      	beq.n	8019638 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8019680:	6883      	ldr	r3, [r0, #8]
 8019682:	42a3      	cmp	r3, r4
 8019684:	d103      	bne.n	801968e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8019686:	4641      	mov	r1, r8
 8019688:	f7ff ff70 	bl	801956c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801968c:	4604      	mov	r4, r0
 801968e:	6863      	ldr	r3, [r4, #4]
 8019690:	4641      	mov	r1, r8
 8019692:	701f      	strb	r7, [r3, #0]
 8019694:	4628      	mov	r0, r5
 8019696:	f885 9000 	strb.w	r9, [r5]
 801969a:	f7ff ff52 	bl	8019542 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801969e:	e7e9      	b.n	8019674 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80196a0:	2201      	movs	r2, #1
 80196a2:	701a      	strb	r2, [r3, #0]
 80196a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080196a8 <_ZSt17__throw_bad_allocv>:
 80196a8:	b508      	push	{r3, lr}
 80196aa:	f000 f80f 	bl	80196cc <abort>

080196ae <_ZSt20__throw_length_errorPKc>:
 80196ae:	b508      	push	{r3, lr}
 80196b0:	f000 f80c 	bl	80196cc <abort>

080196b4 <_ZSt25__throw_bad_function_callv>:
 80196b4:	b508      	push	{r3, lr}
 80196b6:	f000 f809 	bl	80196cc <abort>
	...

080196bc <_ZSt15get_new_handlerv>:
 80196bc:	4b02      	ldr	r3, [pc, #8]	; (80196c8 <_ZSt15get_new_handlerv+0xc>)
 80196be:	6818      	ldr	r0, [r3, #0]
 80196c0:	f3bf 8f5b 	dmb	ish
 80196c4:	4770      	bx	lr
 80196c6:	bf00      	nop
 80196c8:	2400120c 	.word	0x2400120c

080196cc <abort>:
 80196cc:	b508      	push	{r3, lr}
 80196ce:	2006      	movs	r0, #6
 80196d0:	f000 f986 	bl	80199e0 <raise>
 80196d4:	2001      	movs	r0, #1
 80196d6:	f7e8 fc4f 	bl	8001f78 <_exit>
	...

080196dc <__errno>:
 80196dc:	4b01      	ldr	r3, [pc, #4]	; (80196e4 <__errno+0x8>)
 80196de:	6818      	ldr	r0, [r3, #0]
 80196e0:	4770      	bx	lr
 80196e2:	bf00      	nop
 80196e4:	24000010 	.word	0x24000010

080196e8 <__libc_init_array>:
 80196e8:	b570      	push	{r4, r5, r6, lr}
 80196ea:	4d0d      	ldr	r5, [pc, #52]	; (8019720 <__libc_init_array+0x38>)
 80196ec:	4c0d      	ldr	r4, [pc, #52]	; (8019724 <__libc_init_array+0x3c>)
 80196ee:	1b64      	subs	r4, r4, r5
 80196f0:	10a4      	asrs	r4, r4, #2
 80196f2:	2600      	movs	r6, #0
 80196f4:	42a6      	cmp	r6, r4
 80196f6:	d109      	bne.n	801970c <__libc_init_array+0x24>
 80196f8:	4d0b      	ldr	r5, [pc, #44]	; (8019728 <__libc_init_array+0x40>)
 80196fa:	4c0c      	ldr	r4, [pc, #48]	; (801972c <__libc_init_array+0x44>)
 80196fc:	f000 f99a 	bl	8019a34 <_init>
 8019700:	1b64      	subs	r4, r4, r5
 8019702:	10a4      	asrs	r4, r4, #2
 8019704:	2600      	movs	r6, #0
 8019706:	42a6      	cmp	r6, r4
 8019708:	d105      	bne.n	8019716 <__libc_init_array+0x2e>
 801970a:	bd70      	pop	{r4, r5, r6, pc}
 801970c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019710:	4798      	blx	r3
 8019712:	3601      	adds	r6, #1
 8019714:	e7ee      	b.n	80196f4 <__libc_init_array+0xc>
 8019716:	f855 3b04 	ldr.w	r3, [r5], #4
 801971a:	4798      	blx	r3
 801971c:	3601      	adds	r6, #1
 801971e:	e7f2      	b.n	8019706 <__libc_init_array+0x1e>
 8019720:	0801a000 	.word	0x0801a000
 8019724:	0801a000 	.word	0x0801a000
 8019728:	0801a000 	.word	0x0801a000
 801972c:	0801a018 	.word	0x0801a018

08019730 <malloc>:
 8019730:	4b02      	ldr	r3, [pc, #8]	; (801973c <malloc+0xc>)
 8019732:	4601      	mov	r1, r0
 8019734:	6818      	ldr	r0, [r3, #0]
 8019736:	f000 b8a7 	b.w	8019888 <_malloc_r>
 801973a:	bf00      	nop
 801973c:	24000010 	.word	0x24000010

08019740 <free>:
 8019740:	4b02      	ldr	r3, [pc, #8]	; (801974c <free+0xc>)
 8019742:	4601      	mov	r1, r0
 8019744:	6818      	ldr	r0, [r3, #0]
 8019746:	f000 b833 	b.w	80197b0 <_free_r>
 801974a:	bf00      	nop
 801974c:	24000010 	.word	0x24000010

08019750 <memcpy>:
 8019750:	440a      	add	r2, r1
 8019752:	4291      	cmp	r1, r2
 8019754:	f100 33ff 	add.w	r3, r0, #4294967295
 8019758:	d100      	bne.n	801975c <memcpy+0xc>
 801975a:	4770      	bx	lr
 801975c:	b510      	push	{r4, lr}
 801975e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019762:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019766:	4291      	cmp	r1, r2
 8019768:	d1f9      	bne.n	801975e <memcpy+0xe>
 801976a:	bd10      	pop	{r4, pc}

0801976c <memmove>:
 801976c:	4288      	cmp	r0, r1
 801976e:	b510      	push	{r4, lr}
 8019770:	eb01 0402 	add.w	r4, r1, r2
 8019774:	d902      	bls.n	801977c <memmove+0x10>
 8019776:	4284      	cmp	r4, r0
 8019778:	4623      	mov	r3, r4
 801977a:	d807      	bhi.n	801978c <memmove+0x20>
 801977c:	1e43      	subs	r3, r0, #1
 801977e:	42a1      	cmp	r1, r4
 8019780:	d008      	beq.n	8019794 <memmove+0x28>
 8019782:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019786:	f803 2f01 	strb.w	r2, [r3, #1]!
 801978a:	e7f8      	b.n	801977e <memmove+0x12>
 801978c:	4402      	add	r2, r0
 801978e:	4601      	mov	r1, r0
 8019790:	428a      	cmp	r2, r1
 8019792:	d100      	bne.n	8019796 <memmove+0x2a>
 8019794:	bd10      	pop	{r4, pc}
 8019796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801979a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801979e:	e7f7      	b.n	8019790 <memmove+0x24>

080197a0 <memset>:
 80197a0:	4402      	add	r2, r0
 80197a2:	4603      	mov	r3, r0
 80197a4:	4293      	cmp	r3, r2
 80197a6:	d100      	bne.n	80197aa <memset+0xa>
 80197a8:	4770      	bx	lr
 80197aa:	f803 1b01 	strb.w	r1, [r3], #1
 80197ae:	e7f9      	b.n	80197a4 <memset+0x4>

080197b0 <_free_r>:
 80197b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80197b2:	2900      	cmp	r1, #0
 80197b4:	d044      	beq.n	8019840 <_free_r+0x90>
 80197b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80197ba:	9001      	str	r0, [sp, #4]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f1a1 0404 	sub.w	r4, r1, #4
 80197c2:	bfb8      	it	lt
 80197c4:	18e4      	addlt	r4, r4, r3
 80197c6:	f000 f927 	bl	8019a18 <__malloc_lock>
 80197ca:	4a1e      	ldr	r2, [pc, #120]	; (8019844 <_free_r+0x94>)
 80197cc:	9801      	ldr	r0, [sp, #4]
 80197ce:	6813      	ldr	r3, [r2, #0]
 80197d0:	b933      	cbnz	r3, 80197e0 <_free_r+0x30>
 80197d2:	6063      	str	r3, [r4, #4]
 80197d4:	6014      	str	r4, [r2, #0]
 80197d6:	b003      	add	sp, #12
 80197d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80197dc:	f000 b922 	b.w	8019a24 <__malloc_unlock>
 80197e0:	42a3      	cmp	r3, r4
 80197e2:	d908      	bls.n	80197f6 <_free_r+0x46>
 80197e4:	6825      	ldr	r5, [r4, #0]
 80197e6:	1961      	adds	r1, r4, r5
 80197e8:	428b      	cmp	r3, r1
 80197ea:	bf01      	itttt	eq
 80197ec:	6819      	ldreq	r1, [r3, #0]
 80197ee:	685b      	ldreq	r3, [r3, #4]
 80197f0:	1949      	addeq	r1, r1, r5
 80197f2:	6021      	streq	r1, [r4, #0]
 80197f4:	e7ed      	b.n	80197d2 <_free_r+0x22>
 80197f6:	461a      	mov	r2, r3
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	b10b      	cbz	r3, 8019800 <_free_r+0x50>
 80197fc:	42a3      	cmp	r3, r4
 80197fe:	d9fa      	bls.n	80197f6 <_free_r+0x46>
 8019800:	6811      	ldr	r1, [r2, #0]
 8019802:	1855      	adds	r5, r2, r1
 8019804:	42a5      	cmp	r5, r4
 8019806:	d10b      	bne.n	8019820 <_free_r+0x70>
 8019808:	6824      	ldr	r4, [r4, #0]
 801980a:	4421      	add	r1, r4
 801980c:	1854      	adds	r4, r2, r1
 801980e:	42a3      	cmp	r3, r4
 8019810:	6011      	str	r1, [r2, #0]
 8019812:	d1e0      	bne.n	80197d6 <_free_r+0x26>
 8019814:	681c      	ldr	r4, [r3, #0]
 8019816:	685b      	ldr	r3, [r3, #4]
 8019818:	6053      	str	r3, [r2, #4]
 801981a:	4421      	add	r1, r4
 801981c:	6011      	str	r1, [r2, #0]
 801981e:	e7da      	b.n	80197d6 <_free_r+0x26>
 8019820:	d902      	bls.n	8019828 <_free_r+0x78>
 8019822:	230c      	movs	r3, #12
 8019824:	6003      	str	r3, [r0, #0]
 8019826:	e7d6      	b.n	80197d6 <_free_r+0x26>
 8019828:	6825      	ldr	r5, [r4, #0]
 801982a:	1961      	adds	r1, r4, r5
 801982c:	428b      	cmp	r3, r1
 801982e:	bf04      	itt	eq
 8019830:	6819      	ldreq	r1, [r3, #0]
 8019832:	685b      	ldreq	r3, [r3, #4]
 8019834:	6063      	str	r3, [r4, #4]
 8019836:	bf04      	itt	eq
 8019838:	1949      	addeq	r1, r1, r5
 801983a:	6021      	streq	r1, [r4, #0]
 801983c:	6054      	str	r4, [r2, #4]
 801983e:	e7ca      	b.n	80197d6 <_free_r+0x26>
 8019840:	b003      	add	sp, #12
 8019842:	bd30      	pop	{r4, r5, pc}
 8019844:	24001210 	.word	0x24001210

08019848 <sbrk_aligned>:
 8019848:	b570      	push	{r4, r5, r6, lr}
 801984a:	4e0e      	ldr	r6, [pc, #56]	; (8019884 <sbrk_aligned+0x3c>)
 801984c:	460c      	mov	r4, r1
 801984e:	6831      	ldr	r1, [r6, #0]
 8019850:	4605      	mov	r5, r0
 8019852:	b911      	cbnz	r1, 801985a <sbrk_aligned+0x12>
 8019854:	f000 f88c 	bl	8019970 <_sbrk_r>
 8019858:	6030      	str	r0, [r6, #0]
 801985a:	4621      	mov	r1, r4
 801985c:	4628      	mov	r0, r5
 801985e:	f000 f887 	bl	8019970 <_sbrk_r>
 8019862:	1c43      	adds	r3, r0, #1
 8019864:	d00a      	beq.n	801987c <sbrk_aligned+0x34>
 8019866:	1cc4      	adds	r4, r0, #3
 8019868:	f024 0403 	bic.w	r4, r4, #3
 801986c:	42a0      	cmp	r0, r4
 801986e:	d007      	beq.n	8019880 <sbrk_aligned+0x38>
 8019870:	1a21      	subs	r1, r4, r0
 8019872:	4628      	mov	r0, r5
 8019874:	f000 f87c 	bl	8019970 <_sbrk_r>
 8019878:	3001      	adds	r0, #1
 801987a:	d101      	bne.n	8019880 <sbrk_aligned+0x38>
 801987c:	f04f 34ff 	mov.w	r4, #4294967295
 8019880:	4620      	mov	r0, r4
 8019882:	bd70      	pop	{r4, r5, r6, pc}
 8019884:	24001214 	.word	0x24001214

08019888 <_malloc_r>:
 8019888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801988c:	1ccd      	adds	r5, r1, #3
 801988e:	f025 0503 	bic.w	r5, r5, #3
 8019892:	3508      	adds	r5, #8
 8019894:	2d0c      	cmp	r5, #12
 8019896:	bf38      	it	cc
 8019898:	250c      	movcc	r5, #12
 801989a:	2d00      	cmp	r5, #0
 801989c:	4607      	mov	r7, r0
 801989e:	db01      	blt.n	80198a4 <_malloc_r+0x1c>
 80198a0:	42a9      	cmp	r1, r5
 80198a2:	d905      	bls.n	80198b0 <_malloc_r+0x28>
 80198a4:	230c      	movs	r3, #12
 80198a6:	603b      	str	r3, [r7, #0]
 80198a8:	2600      	movs	r6, #0
 80198aa:	4630      	mov	r0, r6
 80198ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b0:	4e2e      	ldr	r6, [pc, #184]	; (801996c <_malloc_r+0xe4>)
 80198b2:	f000 f8b1 	bl	8019a18 <__malloc_lock>
 80198b6:	6833      	ldr	r3, [r6, #0]
 80198b8:	461c      	mov	r4, r3
 80198ba:	bb34      	cbnz	r4, 801990a <_malloc_r+0x82>
 80198bc:	4629      	mov	r1, r5
 80198be:	4638      	mov	r0, r7
 80198c0:	f7ff ffc2 	bl	8019848 <sbrk_aligned>
 80198c4:	1c43      	adds	r3, r0, #1
 80198c6:	4604      	mov	r4, r0
 80198c8:	d14d      	bne.n	8019966 <_malloc_r+0xde>
 80198ca:	6834      	ldr	r4, [r6, #0]
 80198cc:	4626      	mov	r6, r4
 80198ce:	2e00      	cmp	r6, #0
 80198d0:	d140      	bne.n	8019954 <_malloc_r+0xcc>
 80198d2:	6823      	ldr	r3, [r4, #0]
 80198d4:	4631      	mov	r1, r6
 80198d6:	4638      	mov	r0, r7
 80198d8:	eb04 0803 	add.w	r8, r4, r3
 80198dc:	f000 f848 	bl	8019970 <_sbrk_r>
 80198e0:	4580      	cmp	r8, r0
 80198e2:	d13a      	bne.n	801995a <_malloc_r+0xd2>
 80198e4:	6821      	ldr	r1, [r4, #0]
 80198e6:	3503      	adds	r5, #3
 80198e8:	1a6d      	subs	r5, r5, r1
 80198ea:	f025 0503 	bic.w	r5, r5, #3
 80198ee:	3508      	adds	r5, #8
 80198f0:	2d0c      	cmp	r5, #12
 80198f2:	bf38      	it	cc
 80198f4:	250c      	movcc	r5, #12
 80198f6:	4629      	mov	r1, r5
 80198f8:	4638      	mov	r0, r7
 80198fa:	f7ff ffa5 	bl	8019848 <sbrk_aligned>
 80198fe:	3001      	adds	r0, #1
 8019900:	d02b      	beq.n	801995a <_malloc_r+0xd2>
 8019902:	6823      	ldr	r3, [r4, #0]
 8019904:	442b      	add	r3, r5
 8019906:	6023      	str	r3, [r4, #0]
 8019908:	e00e      	b.n	8019928 <_malloc_r+0xa0>
 801990a:	6822      	ldr	r2, [r4, #0]
 801990c:	1b52      	subs	r2, r2, r5
 801990e:	d41e      	bmi.n	801994e <_malloc_r+0xc6>
 8019910:	2a0b      	cmp	r2, #11
 8019912:	d916      	bls.n	8019942 <_malloc_r+0xba>
 8019914:	1961      	adds	r1, r4, r5
 8019916:	42a3      	cmp	r3, r4
 8019918:	6025      	str	r5, [r4, #0]
 801991a:	bf18      	it	ne
 801991c:	6059      	strne	r1, [r3, #4]
 801991e:	6863      	ldr	r3, [r4, #4]
 8019920:	bf08      	it	eq
 8019922:	6031      	streq	r1, [r6, #0]
 8019924:	5162      	str	r2, [r4, r5]
 8019926:	604b      	str	r3, [r1, #4]
 8019928:	4638      	mov	r0, r7
 801992a:	f104 060b 	add.w	r6, r4, #11
 801992e:	f000 f879 	bl	8019a24 <__malloc_unlock>
 8019932:	f026 0607 	bic.w	r6, r6, #7
 8019936:	1d23      	adds	r3, r4, #4
 8019938:	1af2      	subs	r2, r6, r3
 801993a:	d0b6      	beq.n	80198aa <_malloc_r+0x22>
 801993c:	1b9b      	subs	r3, r3, r6
 801993e:	50a3      	str	r3, [r4, r2]
 8019940:	e7b3      	b.n	80198aa <_malloc_r+0x22>
 8019942:	6862      	ldr	r2, [r4, #4]
 8019944:	42a3      	cmp	r3, r4
 8019946:	bf0c      	ite	eq
 8019948:	6032      	streq	r2, [r6, #0]
 801994a:	605a      	strne	r2, [r3, #4]
 801994c:	e7ec      	b.n	8019928 <_malloc_r+0xa0>
 801994e:	4623      	mov	r3, r4
 8019950:	6864      	ldr	r4, [r4, #4]
 8019952:	e7b2      	b.n	80198ba <_malloc_r+0x32>
 8019954:	4634      	mov	r4, r6
 8019956:	6876      	ldr	r6, [r6, #4]
 8019958:	e7b9      	b.n	80198ce <_malloc_r+0x46>
 801995a:	230c      	movs	r3, #12
 801995c:	603b      	str	r3, [r7, #0]
 801995e:	4638      	mov	r0, r7
 8019960:	f000 f860 	bl	8019a24 <__malloc_unlock>
 8019964:	e7a1      	b.n	80198aa <_malloc_r+0x22>
 8019966:	6025      	str	r5, [r4, #0]
 8019968:	e7de      	b.n	8019928 <_malloc_r+0xa0>
 801996a:	bf00      	nop
 801996c:	24001210 	.word	0x24001210

08019970 <_sbrk_r>:
 8019970:	b538      	push	{r3, r4, r5, lr}
 8019972:	4d06      	ldr	r5, [pc, #24]	; (801998c <_sbrk_r+0x1c>)
 8019974:	2300      	movs	r3, #0
 8019976:	4604      	mov	r4, r0
 8019978:	4608      	mov	r0, r1
 801997a:	602b      	str	r3, [r5, #0]
 801997c:	f7e8 fb06 	bl	8001f8c <_sbrk>
 8019980:	1c43      	adds	r3, r0, #1
 8019982:	d102      	bne.n	801998a <_sbrk_r+0x1a>
 8019984:	682b      	ldr	r3, [r5, #0]
 8019986:	b103      	cbz	r3, 801998a <_sbrk_r+0x1a>
 8019988:	6023      	str	r3, [r4, #0]
 801998a:	bd38      	pop	{r3, r4, r5, pc}
 801998c:	24001218 	.word	0x24001218

08019990 <_raise_r>:
 8019990:	291f      	cmp	r1, #31
 8019992:	b538      	push	{r3, r4, r5, lr}
 8019994:	4604      	mov	r4, r0
 8019996:	460d      	mov	r5, r1
 8019998:	d904      	bls.n	80199a4 <_raise_r+0x14>
 801999a:	2316      	movs	r3, #22
 801999c:	6003      	str	r3, [r0, #0]
 801999e:	f04f 30ff 	mov.w	r0, #4294967295
 80199a2:	bd38      	pop	{r3, r4, r5, pc}
 80199a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80199a6:	b112      	cbz	r2, 80199ae <_raise_r+0x1e>
 80199a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80199ac:	b94b      	cbnz	r3, 80199c2 <_raise_r+0x32>
 80199ae:	4620      	mov	r0, r4
 80199b0:	f000 f830 	bl	8019a14 <_getpid_r>
 80199b4:	462a      	mov	r2, r5
 80199b6:	4601      	mov	r1, r0
 80199b8:	4620      	mov	r0, r4
 80199ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80199be:	f000 b817 	b.w	80199f0 <_kill_r>
 80199c2:	2b01      	cmp	r3, #1
 80199c4:	d00a      	beq.n	80199dc <_raise_r+0x4c>
 80199c6:	1c59      	adds	r1, r3, #1
 80199c8:	d103      	bne.n	80199d2 <_raise_r+0x42>
 80199ca:	2316      	movs	r3, #22
 80199cc:	6003      	str	r3, [r0, #0]
 80199ce:	2001      	movs	r0, #1
 80199d0:	e7e7      	b.n	80199a2 <_raise_r+0x12>
 80199d2:	2400      	movs	r4, #0
 80199d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80199d8:	4628      	mov	r0, r5
 80199da:	4798      	blx	r3
 80199dc:	2000      	movs	r0, #0
 80199de:	e7e0      	b.n	80199a2 <_raise_r+0x12>

080199e0 <raise>:
 80199e0:	4b02      	ldr	r3, [pc, #8]	; (80199ec <raise+0xc>)
 80199e2:	4601      	mov	r1, r0
 80199e4:	6818      	ldr	r0, [r3, #0]
 80199e6:	f7ff bfd3 	b.w	8019990 <_raise_r>
 80199ea:	bf00      	nop
 80199ec:	24000010 	.word	0x24000010

080199f0 <_kill_r>:
 80199f0:	b538      	push	{r3, r4, r5, lr}
 80199f2:	4d07      	ldr	r5, [pc, #28]	; (8019a10 <_kill_r+0x20>)
 80199f4:	2300      	movs	r3, #0
 80199f6:	4604      	mov	r4, r0
 80199f8:	4608      	mov	r0, r1
 80199fa:	4611      	mov	r1, r2
 80199fc:	602b      	str	r3, [r5, #0]
 80199fe:	f7e8 faab 	bl	8001f58 <_kill>
 8019a02:	1c43      	adds	r3, r0, #1
 8019a04:	d102      	bne.n	8019a0c <_kill_r+0x1c>
 8019a06:	682b      	ldr	r3, [r5, #0]
 8019a08:	b103      	cbz	r3, 8019a0c <_kill_r+0x1c>
 8019a0a:	6023      	str	r3, [r4, #0]
 8019a0c:	bd38      	pop	{r3, r4, r5, pc}
 8019a0e:	bf00      	nop
 8019a10:	24001218 	.word	0x24001218

08019a14 <_getpid_r>:
 8019a14:	f7e8 ba98 	b.w	8001f48 <_getpid>

08019a18 <__malloc_lock>:
 8019a18:	4801      	ldr	r0, [pc, #4]	; (8019a20 <__malloc_lock+0x8>)
 8019a1a:	f000 b809 	b.w	8019a30 <__retarget_lock_acquire_recursive>
 8019a1e:	bf00      	nop
 8019a20:	2400121c 	.word	0x2400121c

08019a24 <__malloc_unlock>:
 8019a24:	4801      	ldr	r0, [pc, #4]	; (8019a2c <__malloc_unlock+0x8>)
 8019a26:	f000 b804 	b.w	8019a32 <__retarget_lock_release_recursive>
 8019a2a:	bf00      	nop
 8019a2c:	2400121c 	.word	0x2400121c

08019a30 <__retarget_lock_acquire_recursive>:
 8019a30:	4770      	bx	lr

08019a32 <__retarget_lock_release_recursive>:
 8019a32:	4770      	bx	lr

08019a34 <_init>:
 8019a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a36:	bf00      	nop
 8019a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a3a:	bc08      	pop	{r3}
 8019a3c:	469e      	mov	lr, r3
 8019a3e:	4770      	bx	lr

08019a40 <_fini>:
 8019a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a42:	bf00      	nop
 8019a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a46:	bc08      	pop	{r3}
 8019a48:	469e      	mov	lr, r3
 8019a4a:	4770      	bx	lr
